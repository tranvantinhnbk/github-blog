(self.webpackChunkgithub_blog=self.webpackChunkgithub_blog||[]).push([[330],{3330:(Qe,je,te)=>{"use strict";te.r(je),te.d(je,{ProjectsModule:()=>uq});var De={};te.r(De),te.d(De,{assertParamsValid:()=>Yh,computeFlatOffset:()=>Qh,computeOutShape:()=>Zh,getNormalizedAxes:()=>pS,isSliceContinous:()=>Jh,maskToAxes:()=>dS,parseSliceParams:()=>ql,sliceInfo:()=>ed,startForAxis:()=>hg,startIndicesWithElidedDims:()=>lg,stopForAxis:()=>dg,stopIndicesWithElidedDims:()=>ug,stridesForAxis:()=>cg,stridesWithElidedDims:()=>ag});var Ft={};te.r(Ft),te.d(Ft,{collectGatherOpShapeInfo:()=>Qd,computeOutShape:()=>fy,segOpComputeOptimalWindowSize:()=>py});var Ae={};te.r(Ae),te.d(Ae,{ERF_A1:()=>Md,ERF_A2:()=>zd,ERF_A3:()=>Bd,ERF_A4:()=>Wd,ERF_A5:()=>Ud,ERF_P:()=>Vd,PARALLELIZE_THRESHOLD:()=>Dd,RowPartitionType:()=>bs,SELU_SCALE:()=>hu,SELU_SCALEALPHA:()=>cu,applyActivation:()=>ru,assertAndGetBroadcastShape:()=>Pe,assertAxesAreInnerMostDims:()=>tn,assertParamsConsistent:()=>Rd,assignToTypedArray:()=>Zg,axesAreInnerMostDims:()=>ld,calculateShapes:()=>Pr,checkEinsumDimSizes:()=>Kd,checkPadOnDimRoundingMode:()=>mn,combineLocations:()=>vg,combineRaggedTensorToTensorShapes:()=>Ug,complexWithEvenIndex:()=>Xg,complexWithOddIndex:()=>Yg,computeConv2DInfo:()=>Kt,computeConv3DInfo:()=>tr,computeDefaultPad:()=>nd,computeDilation2DInfo:()=>jo,computeOptimalWindowSize:()=>uu,computeOutAndReduceShapes:()=>Xt,computeOutShape:()=>xs,computePool2DInfo:()=>Gn,computePool3DInfo:()=>Rs,convertConv2DDataFormat:()=>Ds,decodeEinsumEquation:()=>jd,eitherStridesOrDilationsAreOne:()=>en,expandShapeToKeepDim:()=>$t,exponent:()=>Qg,exponents:()=>Jg,fromStringArrayToUint8:()=>my,fromUint8ToStringArray:()=>zs,getAxesPermutation:()=>It,getBroadcastDims:()=>pa,getComplexWithIndex:()=>Gd,getEinsumComputePath:()=>Xd,getEinsumPermutation:()=>qd,getFusedBiasGradient:()=>su,getFusedDyActivation:()=>nu,getImageCenter:()=>Fd,getInnerMostAxes:()=>Et,getPermuted:()=>ai,getRaggedRank:()=>Hg,getReductionAxes:()=>Lt,getReshaped:()=>ri,getReshapedPermuted:()=>oi,getRowPartitionTypesHelper:()=>Gg,getSliceBeginCoords:()=>Od,getSliceSize:()=>Pd,getSparseFillEmptyRowsIndicesDenseShapeMismatch:()=>ny,getSparseFillEmptyRowsNegativeIndexErrorMessage:()=>sy,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:()=>ry,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:()=>iy,getSparseReshapeInputOutputMismatchErrorMessage:()=>uy,getSparseReshapeInputOutputMultipleErrorMessage:()=>ly,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:()=>ay,getSparseReshapeNegativeOutputDimErrorMessage:()=>oy,getSparseSegmentReductionIndicesOutOfRangeErrorMessage:()=>dy,getSparseSegmentReductionNegativeSegmentIdsErrorMessage:()=>Jd,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:()=>cy,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:()=>hy,getUndoAxesPermutation:()=>sr,isIdentityPermutation:()=>Yd,log:()=>E1,mergeRealAndImagArrays:()=>Ms,prepareAndValidate:()=>Ld,prepareSplitSize:()=>Zd,segment_util:()=>Ft,shouldFuse:()=>au,slice_util:()=>De,splitRealAndImagArrays:()=>Kg,stridesOrDilationsArePositive:()=>Ar,tupleValuesAreOne:()=>nr,upcastType:()=>Tn,validateDefaultValueShape:()=>jg,validateInput:()=>pk,validateUpdateShape:()=>qg,warn:()=>An});var gt={};te.r(gt),te.d(gt,{addImpl:()=>Ub,bincountImpl:()=>of,bincountReduceImpl:()=>Xb,bitwiseAndImpl:()=>Yb,castImpl:()=>Wb,ceilImpl:()=>Zb,concatImpl:()=>Jb,equalImpl:()=>t0,expImpl:()=>s0,expm1Impl:()=>a0,floorImpl:()=>l0,gatherNdImpl:()=>u0,gatherV2Impl:()=>c0,greaterEqualImpl:()=>d0,greaterImpl:()=>h0,lessEqualImpl:()=>f0,lessImpl:()=>p0,linSpaceImpl:()=>m0,logImpl:()=>g0,maxImpl:()=>y0,maximumImpl:()=>b0,minimumImpl:()=>w0,multiplyImpl:()=>lf,negImpl:()=>S0,notEqualImpl:()=>I0,prodImpl:()=>T0,raggedGatherImpl:()=>$0,raggedRangeImpl:()=>A0,raggedTensorToTensorImpl:()=>F0,rangeImpl:()=>O0,rsqrtImpl:()=>P0,scatterImpl:()=>jr,sigmoidImpl:()=>BA,simpleAbsImpl:()=>Hb,sliceImpl:()=>Kb,sparseFillEmptyRowsImpl:()=>V0,sparseReshapeImpl:()=>M0,sparseSegmentReductionImpl:()=>ff,sqrtImpl:()=>fL,staticRegexReplaceImpl:()=>z0,stridedSliceImpl:()=>B0,stringNGramsImpl:()=>W0,stringSplitImpl:()=>U0,stringToHashBucketFastImpl:()=>G0,subImpl:()=>o0,tileImpl:()=>H0,topKImpl:()=>q0,transposeImpl:()=>rf,uniqueImpl:()=>X0});var Me=te(6814),_e=te(8642);function ze(n,t,e,s,r,a,o){try{var i=n[a](o),l=i.value}catch(u){return void e(u)}i.done?t(l):Promise.resolve(l).then(s,r)}function O(n){return function(){var t=this,e=arguments;return new Promise(function(s,r){var a=n.apply(t,e);function o(l){ze(a,s,r,o,i,"next",l)}function i(l){ze(a,s,r,o,i,"throw",l)}o(void 0)})}}var V=te(2296),re=te(2438),pe=te(4664),Z=te(9773),ae=te(9360),ve=te(8251);class Ot{constructor(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}get(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)}set(t,e){this.dataIdsCount++,this.data.set(t,e)}has(t){return this.data.has(t)}delete(t){return this.dataIdsCount--,this.data.delete(t)}numDataIds(){return this.dataIdsCount}}class Bn{refCount(t){return vt("refCount")}incRef(t){return vt("incRef")}timerAvailable(){return!0}time(t){return vt("time")}read(t){return vt("read")}readSync(t){return vt("readSync")}readToGPU(t,e){return vt("readToGPU")}numDataIds(){return vt("numDataIds")}disposeData(t,e){return vt("disposeData")}write(t,e,s){return vt("write")}move(t,e,s,r,a){return vt("move")}createTensorFromGPUData(t,e,s){return vt("createTensorFromGPUData")}memory(){return vt("memory")}floatPrecision(){return vt("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return vt("dispose")}}function vt(n){throw new Error(`'${n}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function Ke(n){let t=n.length,e=0;for(;t>0;)e=Math.random()*t|0,t--,Y(n,t,e)}function qe(n,t,e){return Math.max(n,Math.min(t,e))}function Q(n){return n%2==0?n:n+1}function Y(n,t,e){const s=n[t];n[t]=n[e],n[e]=s}function S(n,t){if(!n)throw new Error("string"==typeof t?t:t())}function Re(n,t,e=""){S(ke(n,t),()=>e+` Shapes ${n} and ${t} must match`)}function tt(n){S(null!=n,()=>"The input to the tensor constructor must be a non-null value.")}function L(n){if(0===n.length)return 1;let t=n[0];for(let e=1;e<n.length;e++)t*=n[e];return t}function ke(n,t){if(n===t)return!0;if(null==n||null==t||n.length!==t.length)return!1;for(let e=0;e<n.length;e++)if(n[e]!==t[e])return!1;return!0}function Gt(n){return n%1==0}function an(n){const t=Math.ceil(Math.sqrt(n));return[t,Math.ceil(n/t)]}function ea(n,t){return t<=n.length?n:n+" ".repeat(t-n.length)}function Ff(n,t=(r=>0),e,s){return new Promise((r,a)=>{let o=0;const i=()=>{if(n())return void r();o++;const l=t(o);null!=e&&o>=e?a():null!=s?s(i,l):setTimeout(i,l)};i()})}function Of(n,t){let e=1,s=-1;for(let a=0;a<n.length;++a)if(n[a]>=0)e*=n[a];else if(-1===n[a]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${a}`);s=a}else if(n[a]<0)throw Error(`Shapes can not be < 0. Found ${n[a]} at dim ${a}`);if(-1===s){if(t>0&&t!==e)throw Error(`Size(${t}) must match the product of shape ${n}`);return n}if(0===e)throw Error(`Cannot infer the missing size in [${n}] when there are 0 elements`);if(t%e!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${e}`);const r=n.slice();return r[s]=t/e,r}function Ue(n,t){const e=t.length;return S((n=null==n?t.map((s,r)=>r):[].concat(n)).every(s=>s>=-e&&s<e),()=>`All values in axis param must be in range [-${e}, ${e}) but got axis ${n}`),S(n.every(s=>Gt(s)),()=>`All values in axis param must be integers but got axis ${n}`),n.map(s=>s<0?e+s:s)}function Hs(n,t){const e=[],s=[],r=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||r?null:Ue(t,n).sort();let o=0;for(let i=0;i<n.length;++i){if(null!=a){if(a[o]===i&&1!==n[i])throw new Error(`Can't squeeze axis ${i} since its dim '${n[i]}' is not 1`);(null==a[o]||a[o]>i)&&1===n[i]&&(e.push(n[i]),s.push(i)),a[o]<=i&&o++}1!==n[i]&&(e.push(n[i]),s.push(i))}return{newShape:e,keptDims:s}}function on(n,t){return _t(n,t)}function _t(n,t){let e=null;if(null==n||"float32"===n)e=new Float32Array(t);else if("int32"===n)e=new Int32Array(t);else if("bool"===n)e=new Uint8Array(t);else{if("string"!==n)throw new Error(`Unknown data type ${n}`);e=new Array(t)}return e}function Pf(n,t){return!("complex64"===t||"float32"===t&&"complex64"!==n||"int32"===t&&"float32"!==n&&"complex64"!==n||"bool"===t&&"bool"===n)}function Ri(n){if("float32"===n||"int32"===n)return 4;if("complex64"===n)return 8;if("bool"===n)return 1;throw new Error(`Unknown dtype ${n}`)}function Wa(n){return"string"==typeof n||n instanceof String}function yc(n){return"number"==typeof n}function ta(n){return Array.isArray(n)?ta(n[0]):n instanceof Float32Array?"float32":n instanceof Int32Array||n instanceof Uint8Array||n instanceof Uint8ClampedArray?"int32":yc(n)?"float32":Wa(n)?"string":function x1(n){return"boolean"==typeof n}(n)?"bool":"float32"}function xc(n){return!!(n&&n.constructor&&n.call&&n.apply)}function bc(n,t){for(let e=t;e<n;++e)if(n%e==0)return e;return n}function Ne(n){const t=n.length;if(t<2)return[];const e=new Array(t-1);e[t-2]=n[t-1];for(let s=t-3;s>=0;--s)e[s]=e[s+1]*n[s+1];return e}function Lf(n,t,e,s=!1){const r=new Array;if(1===t.length){const a=t[0]*(s?2:1);for(let o=0;o<a;o++)r[o]=e[n+o]}else{const a=t[0],o=t.slice(1),i=o.reduce((l,u)=>l*u)*(s?2:1);for(let l=0;l<a;l++)r[l]=Lf(n+l*i,o,e,s)}return r}function Qn(n,t,e=!1){if(0===n.length)return t[0];const s=n.reduce((r,a)=>r*a)*(e?2:1);if(0===s)return[];if(s!==t.length)throw new Error(`[${n}] does not match the input size ${t.length}${e?" for a complex tensor":""}.`);return Lf(0,n,t,e)}function wc(n,t){const e=ln(n,t);for(let s=0;s<e.length;s++)e[s]=1;return e}function ln(n,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(n);if("int32"===t)return new Int32Array(n);if("bool"===t)return new Uint8Array(n);throw new Error(`Unknown data type ${t}`)}function Vf(n,t){const e=n.reduce((s,r)=>s*r,1);if(null==t||"float32"===t)return Qn(n,new Float32Array(e));if("int32"===t)return Qn(n,new Int32Array(e));if("bool"===t)return Qn(n,new Uint8Array(e));throw new Error(`Unknown data type ${t}`)}function Es(n){n.forEach(t=>{S(Number.isInteger(t)&&t>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${n}].`)})}function hs(n,t,e){if(0===t)return 0;if(1===t)return n[0];let s=n[n.length-1];for(let r=0;r<n.length-1;++r)s+=e[r]*n[r];return s}function na(n,t,e){if(0===t)return[];if(1===t)return[n];const s=new Array(t);for(let r=0;r<s.length-1;++r)s[r]=Math.floor(n/e[r]),n-=s[r]*e[r];return s[s.length-1]=n,s}function vc(n){return n&&n.then&&"function"==typeof n.then}const Mf="tfjsflags";class w1{constructor(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=v1,this.populateURLFlags()}setPlatform(t,e){null!=this.platform&&(M().getBool("IS_TEST")||M().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`)),this.platformName=t,this.platform=e}registerFlag(t,e,s){if(this.flagRegistry[t]={evaluationFn:e,setHook:s},null!=this.urlFlags[t]){const r=this.urlFlags[t];M().getBool("IS_TEST")||M().getBool("PROD")||console.warn(`Setting feature override from URL ${t}: ${r}.`),this.set(t,r)}}getAsync(t){var e=this;return O(function*(){return t in e.flags||(e.flags[t]=yield e.evaluateFlag(t)),e.flags[t]})()}get(t){if(t in this.flags)return this.flags[t];const e=this.evaluateFlag(t);if(vc(e))throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[t]=e,this.flags[t]}getNumber(t){return this.get(t)}getBool(t){return this.get(t)}getString(t){return this.get(t)}getFlags(){return this.flags}get features(){return this.flags}set(t,e){if(null==this.flagRegistry[t])throw new Error(`Cannot set flag ${t} as it has not been registered.`);this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)}evaluateFlag(t){if(null==this.flagRegistry[t])throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);return this.flagRegistry[t].evaluationFn()}setFlags(t){this.flags=Object.assign({},t)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(typeof this.global>"u"||typeof this.global.location>"u"||typeof this.global.location.search>"u")return;const t=this.getQueryParams(this.global.location.search);Mf in t&&t[Mf].split(",").forEach(s=>{const[r,a]=s.split(":");this.urlFlags[r]=function I1(n,t){const e=t.toLowerCase();return"true"===e||"false"===e?"true"===e:""+ +e===e?+e:t}(0,a)})}}function v1(n){const t={};return n.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(e,...s)=>(function S1(n,t,e){n[decodeURIComponent(t)]=decodeURIComponent(e||"")}(t,s[0],s[1]),s.join("="))),t}function M(){return zf}let Sc,zf=null;function Bf(){if(null==Sc){let n;if(typeof window<"u")n=window;else if(typeof global<"u")n=global;else if(typeof process<"u")n=process;else{if(!(typeof self<"u"))throw new Error("Could not find a global object");n=self}Sc=n}return Sc}function Ic(n,t){const e=function C1(){const n=Bf();return null==n._tfGlobals&&(n._tfGlobals=new Map),n._tfGlobals}();if(e.has(n))return e.get(n);{const s=t();return e.set(n,s),e.get(n)}}const Di="Abs",Ua="Acos",Ga="Acosh",sa="Add",Nc="AddN",Fi="ArgMax",Oi="ArgMin",Ha="Asin",ja="Asinh",qa="Atan",Ka="Atanh",Xa="Atan2",Pi="AvgPool",Tc="AvgPoolGrad",Li="AvgPool3D",_c="AvgPool3DGrad",Vi="BatchMatMul",Mi="BatchToSpaceND",$c="Bincount",Ec="BitwiseAnd",Wf="BroadcastArgs",Ya="Cast",Za="Ceil",Ja="ClipByValue",Ac="Complex",zi="ComplexAbs",Bi="Concat",Wi="Conv2D",Rc="Conv2DBackpropFilter",Ui="Conv2DBackpropInput",Gi="Conv3D",Dc="Conv3DBackpropFilterV2",Fc="Conv3DBackpropInputV2",Qa="Cos",eo="Cosh",Oc="Cumprod",Hi="Cumsum",Pc="CropAndResize",Lc="DenseBincount",Vc="DepthToSpace",ji="DepthwiseConv2dNative",Mc="DepthwiseConv2dNativeBackpropFilter",zc="DepthwiseConv2dNativeBackpropInput",qi="Dilation2D",Bc="Dilation2DBackpropInput",Wc="Dilation2DBackpropFilter",to="RealDiv",Uc="Einsum",no="Elu",Gc="EluGrad",so="Erf",Ki="Equal",ro="Exp",Xi="ExpandDims",ao="Expm1",jc="Fill",qc="FlipLeftRight",oo="Floor",lo="FloorDiv",Yi="FusedBatchNorm",Zi="GatherV2",Gf="GatherNd",Ji="Greater",uo="GreaterEqual",co="Identity",Kc="IFFT",Xc="Imag",ho="IsFinite",po="IsInf",fo="IsNan",Qi="LeakyRelu",el="Less",tl="LessEqual",Hf="LinSpace",mo="Log",go="Log1p",nl="LogicalAnd",sl="LogicalNot",rl="LogicalOr",al="LRN",Yc="LRNGrad",ol="Max",yo="Maximum",il="MaxPool",Zc="MaxPoolGrad",ll="MaxPool3D",Jc="MaxPool3DGrad",jf="MaxPoolWithArgmax",ul="Mean",cl="Min",xo="Minimum",hl="MirrorPad",bo="Mod",qf="Multinomial",wo="Multiply",dl="Neg",pl="NotEqual",Qc="NonMaxSuppressionV3",eh="NonMaxSuppressionV4",th="NonMaxSuppressionV5",fl="OnesLike",ml="OneHot",gl="Pack",yl="PadV2",vo="Pow",xl="Prelu",bl="Prod",Kf="RaggedGather",Xf="RaggedRange",Yf="RaggedTensorToTensor",nh="Range",sh="Real",So="Reciprocal",Io="Relu",wl="Reshape",vl="ResizeNearestNeighbor",rh="ResizeNearestNeighborGrad",Sl="ResizeBilinear",ah="ResizeBilinearGrad",No="Relu6",Il="Reverse",Co="Round",ko="Rsqrt",Zf="ScatterNd",Jf="TensorScatterUpdate",Qf="SearchSorted",Nl="Select",To="Selu",Cl="Slice",_o="Sin",$o="Sinh",Eo="Sign",Ao="Sigmoid",Ro="Softplus",Do="Sqrt",kl="Sum",Tl="SpaceToBatchND",_l="SplitV",$l="Softmax",oh="SparseFillEmptyRows",ih="SparseReshape",lh="SparseSegmentMean",uh="SparseSegmentSum",em="SparseToDense",Fo="SquaredDifference",ch="Square",El="StaticRegexReplace",hh="StridedSlice",dh="StringNGrams",ph="StringSplit",fh="StringToHashBucketFast",Oo="Sub",Po="Tan",Lo="Tanh",Vo="Tile",mh="TopK",gh="Transform",ra="Transpose",yh="Unique",Al="Unpack",Rl="UnsortedSegmentSum",Dl="ZerosLike",Mo="Step",xh="RotateWithOffset",Fl="_FusedMatMul",Ol="FusedConv2D",Pl="FusedDepthwiseConv2D";function An(...n){M().getBool("IS_TEST")||M().getBool("PROD")||console.warn(...n)}function E1(...n){M().getBool("IS_TEST")||M().getBool("PROD")||console.log(...n)}const aa=Ic("kernelRegistry",()=>new Map),zo=Ic("gradRegistry",()=>new Map);function tm(n,t){const e=vh(n,t);return aa.get(e)}function nm(n){return zo.get(n)}function bh(n){const t=aa.entries(),e=[];for(;;){const{done:s,value:r}=t.next();if(s)break;const[a,o]=r,[i]=a.split("_");i===n&&e.push(o)}return e}function wh(n){const{kernelName:t,backendName:e}=n,s=vh(t,e);aa.has(s)&&An(`The kernel '${t}' for backend '${e}' is already registered`),aa.set(s,n)}function A1(n){const{kernelName:t}=n;zo.has(t)&&M().getBool("DEBUG")&&An(`Overriding the gradient for '${t}'`),zo.set(t,n)}function vh(n,t){return`${t}_${n}`}function sm(n){return n instanceof Float32Array||n instanceof Int32Array||n instanceof Uint8Array||n instanceof Uint8ClampedArray}var rm=te(186);const Sr=te.n(rm)()||rm;function Ll(n){return Sr.fromString(n,!0,16)}const am=Ll("c3a5c85c97cb3127"),Ir=Ll("b492b66fbe98f273"),dn=Ll("9ae16a3b2f90404f");function Sh(n){return n.xor(n.shru(47))}function om(n,t,e){const s=n.slice(t,t+e);return Sr.fromBytes(Array.from(s),!0,!0)}function ht(n,t){return om(n,t,8)}function im(n,t){return om(n,t,4)}function jt(n,t){return 0===t?n:n.shru(t).or(n.shl(64-t))}function js(n,t,e=Ll("9ddfea08eb382d69")){let s=n.xor(t).mul(e);s=s.xor(s.shru(47));let r=t.xor(s).mul(e);return r=r.xor(r.shru(47)),r=r.mul(e),r}function Vl(n,t,e,s){return function D1(n,t,e,s,r,a){r=r.add(n),a=jt(a.add(r).add(s),21);const o=r;return r=(r=r.add(t)).add(e),a=a.add(jt(r,44)),[r.add(s),a.add(o)]}(ht(n,t),ht(n,t+8),ht(n,t+16),ht(n,t+24),e,s)}function L1(n,t=n.length){const e=Sr.fromNumber(81,!0);if(t<=32)return t<=16?function F1(n,t=n.length){if(t>=8){const e=dn.add(2*t),s=ht(n,0).add(dn),r=ht(n,t-8);return js(jt(r,37).mul(e).add(s),jt(s,25).add(r).mul(e),e)}if(t>=4){const e=dn.add(2*t);return js(im(n,0).shl(3).add(t),im(n,t-4),e)}if(t>0){const o=t+(n[t-1]<<2);return Sh(dn.mul(n[0]+(n[t>>1]<<8)).xor(am.mul(o))).mul(dn)}return dn}(n,t):function O1(n,t=n.length){const e=dn.add(2*t),s=ht(n,0).mul(Ir),r=ht(n,8),a=ht(n,t-8).mul(e),o=ht(n,t-16).mul(dn);return js(jt(s.add(r),43).add(jt(a,30)).add(o),s.add(jt(r.add(dn),18)).add(a),e)}(n,t);if(t<=64)return function P1(n,t=n.length){const e=dn.add(2*t),s=ht(n,0).mul(dn),r=ht(n,8),a=ht(n,t-8).mul(e),o=ht(n,t-16).mul(dn),i=jt(s.add(r),43).add(jt(a,30)).add(o),l=js(i,s.add(jt(r.add(dn),18)).add(a),e),u=ht(n,16).mul(e),c=ht(n,24),h=i.add(ht(n,t-32)).mul(e),d=l.add(ht(n,t-24)).mul(e);return js(jt(u.add(c),43).add(jt(h,30)).add(d),u.add(jt(c.add(s),18)).add(h),e)}(n,t);let s=e,r=e.mul(Ir).add(113),a=Sh(r.mul(dn).add(113)).mul(dn),o=[Sr.UZERO,Sr.UZERO],i=[Sr.UZERO,Sr.UZERO];s=s.mul(dn).add(ht(n,0));let l=0;const u=64*(t-1>>6),c=u+(t-1&63)-63;do{s=jt(s.add(r).add(o[0]).add(ht(n,l+8)),37).mul(Ir),r=jt(r.add(o[1]).add(ht(n,l+48)),42).mul(Ir),s=s.xor(i[1]),r=r.add(o[0]).add(ht(n,l+40)),a=jt(a.add(i[0]),33).mul(Ir),o=Vl(n,l,o[1].mul(Ir),s.add(i[0])),i=Vl(n,l+32,a.add(i[1]),r.add(ht(n,l+16))),[a,s]=[s,a],l+=64}while(l!==u);const h=Ir.add(a.and(255).shl(1));return l=c,i[0]=i[0].add(t-1&63),o[0]=o[0].add(i[0]),i[0]=i[0].add(o[0]),s=jt(s.add(r).add(o[0]).add(ht(n,l+8)),37).mul(h),r=jt(r.add(o[1]).add(ht(n,l+48)),42).mul(h),s=s.xor(i[1].mul(9)),r=r.add(o[0].mul(9).add(ht(n,l+40))),a=jt(a.add(i[0]),33).mul(h),o=Vl(n,l,o[1].mul(h),s.add(i[0])),i=Vl(n,l+32,a.add(i[1]),r.add(ht(n,l+16))),[a,s]=[s,a],js(js(o[0],i[0],h).add(Sh(r).mul(am)).add(a),js(o[1],i[1],h).add(s),h)}function qs(n,t){return"string"===t?Ks(n):Nr([n],t)}function Nr(n,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(n)&&(n=Cr(n)),M().getBool("DEBUG")&&function m1(n,t){for(let e=0;e<n.length;e++){const s=n[e];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${t} being uploaded contains ${s}.`)}}(n,t),function V1(n,t){return n instanceof Float32Array&&"float32"===t||n instanceof Int32Array&&"int32"===t||n instanceof Uint8Array&&"bool"===t}(n,t))return n;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(n);if("int32"===t)return new Int32Array(n);if("bool"===t){const e=new Uint8Array(n.length);for(let s=0;s<e.length;++s)0!==Math.round(n[s])&&(e[s]=1);return e}throw new Error(`Unknown data type ${t}`)}function wn(){return M().platform.now()}function Ks(n,t="utf-8"){return t=t||"utf-8",M().platform.encode(n,t)}function Xs(n,t="utf-8"){return t=t||"utf-8",M().platform.decode(n,t)}function Wn(n){return null!=M().platform.isTypedArray?M().platform.isTypedArray(n):sm(n)}function Cr(n,t=[],e=!1){if(null==t&&(t=[]),"boolean"==typeof n||"number"==typeof n||"string"==typeof n||vc(n)||null==n||Wn(n)&&e)t.push(n);else if(Array.isArray(n)||Wn(n))for(let s=0;s<n.length;++s)Cr(n[s],t,e);else{let s=-1;for(const r of Object.keys(n))/^([1-9]+[0-9]*|0)$/.test(r)&&(s=Math.max(s,Number(r)));for(let r=0;r<=s;r++)Cr(n[r],t,e)}return t}class M1{constructor(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new B1)}profileKernel(t,e,s){let r;const a=()=>{r=s()};let o;const i=wn();if(this.backendTimer.timerAvailable())o=this.backendTimer.time(a);else{a();for(const u of r)u.dataSync();o=Promise.resolve({kernelMs:wn()-i})}if(M().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let u=0;u<r.length;u++){const c=r[u];c.data().then(h=>{z1(h,c.dtype,t)})}return{kernelName:t,outputs:r,inputs:e,timeMs:o.then(u=>u.kernelMs),extraInfo:o.then(u=>null!=u.getExtraProfileInfo?u.getExtraProfileInfo():"")}}logKernelProfile(t){const{kernelName:e,outputs:s,timeMs:r,inputs:a,extraInfo:o}=t;s.forEach(i=>{Promise.all([i.data(),r,o]).then(l=>{this.logger.logKernelProfile(e,i,l[0],l[1],a,l[2])})})}}function z1(n,t,e){if("float32"!==t)return!1;for(let s=0;s<n.length;s++){const r=n[s];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${e}'`),!0}return!1}class B1{logKernelProfile(t,e,s,r,a,o){const i="number"==typeof r?ea(`${r}ms`,9):r.error,l=ea(t,25),u=e.rank,c=e.size,h=ea(e.shape.toString(),14);let d="";for(const p in a){const f=a[p];if(null!=f){const g=f.shape||e.shape,m=g.length;d+=`${p}: ${m}D ${m>0?g:""} `}}console.log(`%c${l}\t%c${i}\t%c${u}D ${h}\t%c${c}\t%c${d}\t%c${o}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}const lm=20,Bo=3,Ih=7;function G1(n,t,e,s){const r=Ne(t),a=function H1(n,t,e,s){const r=L(t),a=s[s.length-1],o=new Array(a).fill(0),i=t.length,l="complex64"===e?Uo(n):n;if(i>1)for(let u=0;u<r/a;u++){const c=u*a;for(let h=0;h<a;h++)o[h]=Math.max(o[h],Wo(l[c+h],0,e).length)}return o}(n,t,e,r),o=t.length,i=Ml(n,t,e,r,a),l=["Tensor"];return s&&(l.push(`  dtype: ${e}`),l.push(`  rank: ${o}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(i.map(u=>"    "+u).join("\n")),l.join("\n")}function Wo(n,t,e){let s;return s=Array.isArray(n)?`${parseFloat(n[0].toFixed(Ih))} + ${parseFloat(n[1].toFixed(Ih))}j`:Wa(n)?`'${n}'`:"bool"===e?um(n):parseFloat(n.toFixed(Ih)).toString(),ea(s,t)}function um(n){return 0===n?"false":"true"}function Ml(n,t,e,s,r,a=!0){const o="complex64"===e?2:1,i=t[0],l=t.length;if(0===l)return"complex64"===e?[Wo(Uo(n)[0],0,e)]:"bool"===e?[um(n[0])]:[n[0].toString()];if(1===l){if(i>lm){let y=Array.from(n.slice(0,Bo*o)),x=Array.from(n.slice((i-Bo)*o,i*o));return"complex64"===e&&(y=Uo(y),x=Uo(x)),["["+y.map((b,w)=>Wo(b,r[w],e)).join(", ")+", ..., "+x.map((b,w)=>Wo(b,r[i-Bo+w],e)).join(", ")+"]"]}return["["+("complex64"===e?Uo(n):Array.from(n)).map((m,y)=>Wo(m,r[y],e)).join(", ")+"]"]}const u=t.slice(1),c=s.slice(1),h=s[0]*o,d=[];if(i>lm){for(let g=0;g<Bo;g++){const m=g*h;d.push(...Ml(n.slice(m,m+h),u,e,c,r,!1))}d.push("...");for(let g=i-Bo;g<i;g++){const m=g*h;d.push(...Ml(n.slice(m,m+h),u,e,c,r,g===i-1))}}else for(let g=0;g<i;g++){const m=g*h;d.push(...Ml(n.slice(m,m+h),u,e,c,r,g===i-1))}const p=2===l?",":"";d[0]="["+(i>0?d[0]+p:"");for(let g=1;g<d.length-1;g++)d[g]=" "+d[g]+p;let f=",\n";for(let g=2;g<l;g++)f+="\n";return d[d.length-1]=" "+d[d.length-1]+"]"+(a?"":f),d}function Uo(n){const t=[];for(let e=0;e<n.length;e+=2)t.push([n[e],n[e+1]]);return t}class Qt{constructor(t,e,s){if(this.dtype=e,this.shape=t.slice(),this.size=L(t),null!=s){const r=s.length;S(r===this.size,()=>`Length of values '${r}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=s||_t(e,this.size),this.strides=Ne(t)}set(t,...e){0===e.length&&(e=[0]),S(e.length===this.rank,()=>`The number of provided coordinates (${e.length}) must match the rank (${this.rank})`);const s=this.locToIndex(e);this.values[s]=t}get(...t){0===t.length&&(t=[0]);let e=0;for(const r of t){if(r<0||r>=this.shape[e])throw new Error(`Requested out of range element at ${t}.   Buffer shape=${this.shape}`);e++}let s=t[t.length-1];for(let r=0;r<t.length-1;++r)s+=this.strides[r]*t[r];return this.values[s]}locToIndex(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];let e=t[t.length-1];for(let s=0;s<t.length-1;++s)e+=this.strides[s]*t[s];return e}indexToLoc(t){if(0===this.rank)return[];if(1===this.rank)return[t];const e=new Array(this.shape.length);for(let s=0;s<e.length-1;++s)e[s]=Math.floor(t/this.strides[s]),t-=e[s]*this.strides[s];return e[e.length-1]=t,e}get rank(){return this.shape.length}toTensor(){return es().makeTensor(this.values,this.shape,this.dtype)}}let es=null,oa=null,cm=null;class Pt{constructor(t,e,s,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=L(t),this.strides=Ne(t),this.dataId=s,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}buffer(){var t=this;return O(function*(){const e=yield t.data();return oa.buffer(t.shape,t.dtype,e)})()}bufferSync(){return oa.buffer(this.shape,this.dtype,this.dataSync())}array(){var t=this;return O(function*(){const e=yield t.data();return Qn(t.shape,e,"complex64"===t.dtype)})()}arraySync(){return Qn(this.shape,this.dataSync(),"complex64"===this.dtype)}data(){var t=this;return O(function*(){t.throwIfDisposed();const e=es().read(t.dataId);if("string"===t.dtype){const s=yield e;try{return s.map(r=>Xs(r))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e})()}dataToGPU(t){return this.throwIfDisposed(),es().readToGPU(this.dataId,t)}dataSync(){this.throwIfDisposed();const t=es().readSync(this.dataId);if("string"===this.dtype)try{return t.map(e=>Xs(e))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t}bytes(){var t=this;return O(function*(){t.throwIfDisposed();const e=yield es().read(t.dataId);return"string"===t.dtype?e:new Uint8Array(e.buffer)})()}dispose(){this.isDisposed||(this.kerasMask&&this.kerasMask.dispose(),es().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(t=!1){return oa.print(this,t)}clone(){return this.throwIfDisposed(),oa.clone(this)}toString(t=!1){return G1(this.dataSync(),this.shape,this.dtype,t)}cast(t){return this.throwIfDisposed(),oa.cast(this,t)}variable(t=!0,e,s){return this.throwIfDisposed(),es().makeVariable(this,t,e,s)}}function j(){return Ic("Tensor",()=>Pt)}Object.defineProperty(Pt,Symbol.hasInstance,{value:n=>!!n&&null!=n.data&&null!=n.dataSync&&null!=n.throwIfDisposed}),j();class zl extends Pt{constructor(t,e,s,r){super(t.shape,t.dtype,t.dataId,r),this.trainable=e,this.name=s}assign(t){if(t.dtype!==this.dtype)throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);if(!ke(t.shape,this.shape))throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);es().disposeTensor(this),this.dataId=t.dataId,es().incRef(this,null)}dispose(){es().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(zl,Symbol.hasInstance,{value:n=>n instanceof Pt&&null!=n.assign&&n.assign instanceof Function});var hm=function(n){return n.float32="float32",n.int32="int32",n.bool="int32",n.complex64="complex64",n}(hm||{}),dm=function(n){return n.float32="float32",n.int32="int32",n.bool="bool",n.complex64="complex64",n}(dm||{}),pm=function(n){return n.float32="float32",n.int32="float32",n.bool="float32",n.complex64="complex64",n}(pm||{}),fm=function(n){return n.float32="complex64",n.int32="complex64",n.bool="complex64",n.complex64="complex64",n}(fm||{});const Y1={float32:pm,int32:hm,bool:dm,complex64:fm};function Tn(n,t){if("string"===n||"string"===t){if("string"===n&&"string"===t)return"string";throw new Error(`Can not upcast ${n} with ${t}`)}return Y1[n][t]}function Nh(n){return Tn(n,"int32")}function mm(n){return null!=n&&"object"==typeof n&&"texture"in n&&n.texture instanceof WebGLTexture}function gm(n){return typeof GPUBuffer<"u"&&null!=n&&"object"==typeof n&&"buffer"in n&&n.buffer instanceof GPUBuffer}function kt(n,t){if(n.dtype===t.dtype)return[n,t];const e=Tn(n.dtype,t.dtype);return[n.cast(e),t.cast(e)]}function ym(n){const t=[];return xm(n,t,new Set),t}function xm(n,t,e){if(null==n)return;if(n instanceof Pt)return void t.push(n);if(!function Z1(n){return Array.isArray(n)||"object"==typeof n}(n))return;const s=n;for(const r in s){const a=s[r];e.has(a)||(e.add(a),xm(a,t,e))}}function Ch(n){return null!=n.kernelName}class bm{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(t=>t.name)))}}}dispose(){for(const t in this.registeredVariables)this.registeredVariables[t].dispose()}}let J1=(()=>{class n{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new bm}ready(){var e=this;return O(function*(){if(null!=e.pendingBackendInit)return e.pendingBackendInit.then(()=>{});if(null!=e.backendInstance)return;const s=e.getSortedBackends();for(let r=0;r<s.length;r++){const a=s[r];if(yield e.initializeBackend(a).success)return void(yield e.setBackend(a))}throw new Error("Could not initialize any backends, all backend initializations failed.")})()}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:s}=this.initializeBackendsAndReturnBest();if(s)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:s}=this.initializeBackend(e);if(s)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,s,r=1){return e in this.registryFactory?(An(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:s,priority:r},!0)}setBackend(e){var s=this;return O(function*(){if(null==s.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(s.backendName=e,null==s.registry[e]){s.backendInstance=null;const{success:r,asyncInit:a}=s.initializeBackend(e);if(!(a?yield r:r))return!1}return s.backendInstance=s.registry[e],s.setupRegisteredKernels(),s.profiler=new M1(s.backendInstance),!0})()}setupRegisteredKernels(){bh(this.backendName).forEach(s=>{null!=s.setupFunc&&s.setupFunc(this.backendInstance)})}disposeRegisteredKernels(e){bh(e).forEach(r=>{null!=r.disposeFunc&&r.disposeFunc(this.registry[e])})}initializeBackend(e){const s=this.registryFactory[e];if(null==s)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const r=s.factory();if(!r||r instanceof Bn||"function"!=typeof r.then)return this.registry[e]=r,{success:!0,asyncInit:!1};{const a=++this.pendingBackendInitId,o=r.then(i=>!(a<this.pendingBackendInitId||(this.registry[e]=i,this.pendingBackendInit=null,0))).catch(i=>(a<this.pendingBackendInitId||(this.pendingBackendInit=null,An(`Initialization of backend ${e} failed`),An(i.stack||i.message)),!1));return this.pendingBackendInit=o,{success:o,asyncInit:!0}}}catch(r){return An(`Initialization of backend ${e} failed`),An(r.stack||r.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((e,s)=>this.registryFactory[s].priority-this.registryFactory[e].priority)}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let s=0;s<e.length;s++){const r=e[s],{success:a,asyncInit:o}=this.initializeBackend(r);if(o||a)return{name:r,asyncInit:o}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,s){const r=this.state.tensorInfo.get(s),a=r.backend,o=this.readSync(s),i=a.refCount(s);a.disposeData(s,!0),r.backend=e,e.move(s,o,r.shape,r.dtype,i),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,s){let a,r=null;if(null==s){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");s=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof s)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun(()=>this.startScope(r),()=>this.endScope(a),()=>(a=s(),a instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),a))}scopedRun(e,s,r){e();try{const a=r();return s(),a}catch(a){throw s(),a}}nextTensorId(){return n.nextTensorId++}nextVariableId(){return n.nextVariableId++}clone(e){const s=R.runKernel(co,{x:e});return this.addTapeNode(this.state.activeScope.name,{x:e},[s],i=>({x:()=>R.runKernel(Ya,{x:i},{dtype:"float32"})}),[],{}),s}runKernel(e,s,r){if(null==tm(e,this.backendName))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:s,attrs:r})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,s,r){const a=this.backend.numDataIds();let o=0;r.forEach(u=>{o+="complex64"===u.dtype?3:1});const l=a-s-o-this.state.numDataMovesStack[this.state.numDataMovesStack.length-1];if(l>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${l} data ids) after running '${e}'`)}runKernelFunc(e){let s,r=[];const a=this.isTapeOn(),o=this.state.numBytes,i=this.state.numTensors;let l,u;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);const c=Ch(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(Ch(e)){const{kernelName:g,inputs:m,attrs:y}=e,x=tm(g,this.backendName);S(null!=x,()=>`Cannot find registered kernel '${g}' for backend '${this.backendName}'`),l=()=>{const b=this.backend.numDataIds();u=x.kernelFunc({inputs:m,attrs:y,backend:this.backend});const w=Array.isArray(u)?u:[u];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(g,b,w);const v=w.map(I=>null!=I.rank?I:this.makeTensorFromTensorInfo(I));if(a){const I=this.getTensorsForGradient(g,m,v);r=this.saveTensorsForBackwardMode(I)}return v}}else{const{forwardFunc:g}=e,m=y=>{a&&(r=y.map(x=>this.keep(this.clone(x))))};l=()=>{const y=this.backend.numDataIds();u=this.tidy(()=>g(this.backend,m));const x=Array.isArray(u)?u:[u];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(c,y,x),x}}const{inputs:h,attrs:d}=e,p=Ch(e)?null:e.backwardsFunc;let f;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(f=this.profiler.profileKernel(c,h,()=>l()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(f),s=f.outputs):s=l()}),a&&this.addTapeNode(c,h,s,p,r,d),this.state.profiling&&this.state.activeProfile.kernels.push({name:c,bytesAdded:this.state.numBytes-o,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-i,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(h).map(g=>null!=h[g]?h[g].shape:null),outputShapes:s.map(g=>g.shape),kernelTimeMs:f.timeMs,extraInfo:f.extraInfo}),Array.isArray(u)?s:s[0]}saveTensorsForBackwardMode(e){return e.map(r=>this.keep(this.clone(r)))}getTensorsForGradient(e,s,r){const a=nm(e);if(null!=a){const o=a.inputsToSave||[],i=a.outputsToSave||[];let l;a.saveAllInputs?(S(Array.isArray(s),()=>"saveAllInputs is true, expected inputs to be an array."),l=Object.keys(s).map(c=>s[c])):l=o.map(c=>s[c]);const u=r.filter((c,h)=>i[h]);return l.concat(u)}return[]}makeTensor(e,s,r,a){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");a=a||this.backend;let o=e;"string"===(r=r||"float32")&&Wa(e[0])&&(o=e.map(u=>Ks(u)));const i=a.write(o,s,r),l=new Pt(s,r,i,this.nextTensorId());if(this.trackTensor(l,a),"string"===r){const u=this.state.tensorInfo.get(i),c=function y1(n){if(null==n)return 0;let t=0;return n.forEach(e=>t+=e.length),t}(o);this.state.numBytes+=c-u.bytes,u.bytes=c}return l}makeTensorFromDataId(e,s,r,a){return this.makeTensorFromTensorInfo({dataId:e,shape:s,dtype:r=r||"float32"},a)}makeTensorFromTensorInfo(e,s){const{dataId:r,shape:a,dtype:o}=e,i=new Pt(a,o,r,this.nextTensorId());return this.trackTensor(i,s),i}makeVariable(e,s=!0,r,a){r=r||this.nextVariableId().toString(),null!=a&&a!==e.dtype&&(e=e.cast(a));const o=new zl(e,s,r,this.nextTensorId());if(null!=this.state.registeredVariables[o.name])throw new Error(`Variable with name ${o.name} was already registered`);return this.state.registeredVariables[o.name]=o,this.incRef(o,this.backend),o}trackTensor(e,s){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let r=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(r=e.size*Ri(e.dtype)),this.state.numBytes+=r,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:s||this.backend,dtype:e.dtype,shape:e.shape,bytes:r})),e instanceof zl||this.track(e)}incRef(e,s){this.trackTensor(e,s),this.backend.incRef(e.dataId)}removeDataId(e,s){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===s&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const s=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=s.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const r=e.size*Ri(e.dtype);this.state.numBytes-=r}s.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,s.backend)}disposeVariables(){for(const e in this.state.registeredVariables)this.disposeVariable(this.state.registeredVariables[e])}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}profile(e){var s=this;return O(function*(){s.state.profiling=!0;const r=s.state.numBytes,a=s.state.numTensors;s.state.activeProfile.kernels=[],s.state.activeProfile.result=yield e(),s.state.profiling=!1,s.state.activeProfile.peakBytes=Math.max(...s.state.activeProfile.kernels.map(o=>o.totalBytesSnapshot)),s.state.activeProfile.newBytes=s.state.numBytes-r,s.state.activeProfile.newTensors=s.state.numTensors-a;for(const o of s.state.activeProfile.kernels)o.kernelTimeMs=yield o.kernelTimeMs,o.extraInfo=yield o.extraInfo;return s.state.activeProfile})()}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,s,r,a,o,i){const l={id:this.state.nextTapeNodeId++,kernelName:e,inputs:s,outputs:r,saved:o},u=nm(e);null!=u&&(a=u.gradFunc),null!=a&&(l.gradient=c=>(c=c.map((h,d)=>{if(null==h){const p=r[d],f=ln(p.size,p.dtype);return this.makeTensor(f,p.shape,p.dtype)}return h}),a(c.length>1?c:c[0],o,i))),this.state.activeTape.push(l)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const s={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(s.name=e),this.state.scopeStack.push(s),this.state.activeScope=s}endScope(e){const s=ym(e),r=new Set(s.map(o=>o.id));for(let o=0;o<this.state.activeScope.track.length;o++){const i=this.state.activeScope.track[o];!i.kept&&!r.has(i.id)&&i.dispose()}const a=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],s.forEach(o=>{!o.kept&&o.scopeId===a.id&&this.track(o)})}gradients(e,s,r,a=!1){if(S(s.length>0,()=>"gradients() received an empty list of xs."),null!=r&&"float32"!==r.dtype)throw new Error(`dy must have 'float32' dtype, but has '${r.dtype}'`);const o=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",e));S(o instanceof Pt,()=>"The result y returned by f() must be a tensor.");const i=function W1(n,t,e){const s={},r={};for(let l=0;l<t.length;l++)s[t[l].id]=!0;for(let l=0;l<n.length;l++){const u=n[l],c=u.inputs;for(const h in c){const d=c[h];let p=!1;for(let f=0;f<t.length;f++)if(s[d.id]){u.outputs.forEach(g=>s[g.id]=!0),p=!0,r[u.id]=!0;break}if(p)break}}const a={};a[e.id]=!0;const o={};for(let l=n.length-1;l>=0;l--){const u=n[l],c=u.inputs;for(let h=0;h<u.outputs.length;h++)if(a[u.outputs[h].id]){for(const d in c)a[c[d].id]=!0,o[u.id]=!0;break}}const i=[];for(let l=0;l<n.length;l++){const u=n[l];if(r[u.id]&&o[u.id]){const c={};for(const d in u.inputs){const p=u.inputs[d];s[p.id]&&(c[d]=p)}const h=Object.assign({},u);h.inputs=c,h.outputs=u.outputs,i.push(h)}}return i}(this.state.activeTape,s,o);if(!a&&0===i.length&&s.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const l={};l[o.id]=r??function Q1(n){const t=wc(L(n),"float32");return R.makeTensor(t,n,"float32")}(o.shape),function U1(n,t,e,s){for(let r=t.length-1;r>=0;r--){const a=t[r],o=[];if(a.outputs.forEach(l=>{const u=n[l.id];o.push(null!=u?u:null)}),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const i=a.gradient(o);for(const l in a.inputs){if(!(l in i))throw new Error(`Cannot backprop through input ${l}. Available gradients found: ${Object.keys(i)}.`);const u=e(()=>i[l]());if("float32"!==u.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${l} must have 'float32' dtype, but has '${u.dtype}'`);const c=a.inputs[l];if(!ke(u.shape,c.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${l}' has shape '${u.shape}', which does not match the shape of the input '${c.shape}'`);if(null==n[c.id])n[c.id]=u;else{const h=n[c.id];n[c.id]=s(h,u),h.dispose()}}}}(l,i,c=>this.tidy(c),ev);const u=s.map(c=>l[c.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(c=>{for(const h of c.saved)h.dispose()}),this.state.activeTape=null),{value:o,grads:u}})}customGrad(e){return S(xc(e),()=>"The f passed in customGrad(f) must be a function."),(...s)=>{let r;S(s.every(l=>l instanceof Pt),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const a={};return s.forEach((l,u)=>{a[u]=l}),this.runKernelFunc({forwardFunc:(l,u)=>(r=e(...s,u),S(r.value instanceof Pt,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),S(xc(r.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),r.value),backwardsFunc:(l,u)=>{const c=r.gradFunc(l,u),h=Array.isArray(c)?c:[c];S(h.length===s.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),S(h.every(p=>p instanceof Pt),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const d={};return h.forEach((p,f)=>{d[f]=()=>p}),d},inputs:a})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,s){return this.state.tensorInfo.get(e).backend.readToGPU(e,s)}time(e){var s=this;return O(function*(){const r=wn(),a=yield s.backend.time(e);return a.wallMs=wn()-r,a})()}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new bm;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}return n.nextTensorId=0,n.nextVariableId=0,n})();function wm(){const n=Bf();if(null==n._tfengine){const t=new w1(n);n._tfengine=new J1(t)}return function N1(n){zf=n}(n._tfengine.ENV),function j1(n){es=n}(()=>n._tfengine),n._tfengine}const R=wm();function ev(n,t){return R.runKernel(sa,{a:n,b:t})}function vm(n){if(n||function tv(){return typeof navigator<"u"&&null!=navigator}()){if(n||(n=navigator),"ReactNative"===n.product)return!0;const t=n.userAgent||n.vendor||(typeof window<"u"?window.opera:"");return t?/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4)):n.userAgentData&&n.userAgentData.mobile}return!1}function Sm(){return typeof window<"u"&&null!=window.document||typeof WorkerGlobalScope<"u"}const vn=M();function Bl(n,t){let e=n;if(Wn(n))return"string"===t?[]:[n.length];if(mm(n))return[n.height,n.width*(n.channels||"RGBA").length];if(gm(n))return[n.buffer.size/(null==t?4:Ri(t))];if(!Array.isArray(n))return[];const s=[];for(;Array.isArray(e)||Wn(e)&&"string"!==t;)s.push(e.length),e=e[0];return Array.isArray(n)&&M().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&Im(n,s,[]),s}function Im(n,t,e){if(e=e||[],!Array.isArray(n)&&!Wn(n))return void S(0===t.length,()=>`Element arr[${e.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`);S(t.length>0,()=>`Element arr[${e.join("][")}] should be a primitive, but is an array of ${n.length} elements`),S(n.length===t[0],()=>`Element arr[${e.join("][")}] should have ${t[0]} elements, but has ${n.length} elements`);const s=t.slice(1);for(let r=0;r<n.length;++r)Im(n[r],s,e.concat(r))}function Nm(n,t,e,s){if("string_or_numeric"!==n){if(null==n)throw new Error("Expected dtype cannot be null.");if("numeric"!==n&&n!==t||"numeric"===n&&"string"===t)throw new Error(`Argument '${e}' passed to '${s}' must be ${n} tensor, but got ${t} tensor`)}}function C(n,t,e,s="numeric"){if(n instanceof j())return Nm(s,n.dtype,t,e),n;let r=ta(n);if("string"!==r&&["bool","int32","float32"].indexOf(s)>=0&&(r=s),Nm(s,r,t,e),null==n||!Wn(n)&&!Array.isArray(n)&&"number"!=typeof n&&"boolean"!=typeof n&&"string"!=typeof n)throw new Error(`Argument '${t}' passed to '${e}' must be a Tensor or TensorLike, but got '${null==n?"null":n.constructor.name}'`);const a=Bl(n,r);!Wn(n)&&!Array.isArray(n)&&(n=[n]);const i="string"!==r?Nr(n,r):Cr(n,[],!0);return R.makeTensor(i,a,r)}function Cm(n,t,e,s="numeric"){if(!Array.isArray(n))throw new Error(`Argument ${t} passed to ${e} must be a \`Tensor[]\` or \`TensorLike[]\``);return n.map((a,o)=>C(a,`${t}[${o}]`,e,s))}function D(n){const t=Object.keys(n);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let e=t[0];const s=n[e];e.endsWith("_")&&(e=e.substring(0,e.length-1)),e+="__op";const r=(...a)=>{R.startScope(e);try{const o=s(...a);return vc(o)&&console.error("Cannot return a Promise inside of tidy."),R.endScope(o),o}catch(o){throw R.endScope(null),o}};return Object.defineProperty(r,"name",{value:e,configurable:!0}),r}vn.registerFlag("DEBUG",()=>!1,n=>{n&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),vn.registerFlag("IS_BROWSER",()=>Sm()),vn.registerFlag("IS_NODE",()=>typeof process<"u"&&typeof process.versions<"u"&&typeof process.versions.node<"u"),vn.registerFlag("IS_CHROME",()=>typeof navigator<"u"&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),vn.registerFlag("IS_SAFARI",()=>typeof navigator<"u"&&null!=navigator&&null!=navigator.userAgent&&/Safari/.test(navigator.userAgent)&&/Apple/.test(navigator.vendor)),vn.registerFlag("PROD",()=>!1),vn.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>vn.getBool("DEBUG")),vn.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),vn.registerFlag("IS_TEST",()=>!1),vn.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>vn.getBool("DEBUG")),vn.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1),vn.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",()=>!1),vn.registerFlag("USE_SETTIMEOUTCUSTOM",()=>!1);const kr=D({complex_:function sv(n,t){const e=C(n,"real","complex"),s=C(t,"imag","complex");return Re(e.shape,s.shape,`real and imag shapes, ${e.shape} and ${s.shape}, must match in call to tf.complex().`),R.runKernel(Ac,{real:e,imag:s})}});function Wl(n,t,e,s){if(null==s)s=ta(n);else if("complex64"===s)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(gm(n)||mm(n)){if("float32"!==s&&"int32"!==s)throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${s}.`);return R.backend.createTensorFromGPUData(n,t||e,s)}if(!Wn(n)&&!Array.isArray(n)&&"number"!=typeof n&&"boolean"!=typeof n&&"string"!=typeof n)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){Es(t);const r=L(t),a=L(e);S(r===a,()=>`Based on the provided shape, [${t}], the tensor should have ${r} values but has ${a}`);for(let o=0;o<e.length;++o){const l=o!==e.length-1||e[o]!==L(t.slice(o));S(e[o]===t[o]||!l,()=>`Error creating a new Tensor. Inferred shape (${e}) does not match the provided shape (${t}). `)}}return!Wn(n)&&!Array.isArray(n)&&(n=[n]),t=t||e,n="string"!==s?Nr(n,s):Cr(n,[],!0),R.makeTensor(n,t,s)}function Ys(n,t,e){return Wl(n,t,Bl(n,e),e)}const Tr={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};class ds{static join(t){return new ds(t).slice()}constructor(t){if(this.shards=[],this.previousShardIndex=0,null==t||(t instanceof Array||(t=[t]),0===(t=t.map(s=>Wn(s)?s.buffer:s)).length))return;this.bufferUniformSize=t[0].byteLength;let e=0;for(let s=0;s<t.length;s++){const r=t[s];s!==t.length-1&&r.byteLength!==this.bufferUniformSize&&(this.bufferUniformSize=void 0);const a=e+r.byteLength;this.shards.push({buffer:r,start:e,end:a}),e=a}0===this.shards.length&&(this.byteLength=0),this.byteLength=this.shards[this.shards.length-1].end}slice(t=0,e=this.byteLength){if(0===this.shards.length)return new ArrayBuffer(0);if(t=isNaN(Number(t))?0:t,e=isNaN(Number(e))?0:e,t=Math.max(0,t),(e=Math.min(this.byteLength,e))<=t)return new ArrayBuffer(0);const s=this.findShardForByte(t);if(-1===s)throw new Error(`Could not find start shard for byte ${t}`);const a=new ArrayBuffer(e-t),o=new Uint8Array(a);let i=0;for(let l=s;l<this.shards.length;l++){const u=this.shards[l],h=t+i-u.start,d=i,f=Math.min(e,u.end)-u.start,g=new Uint8Array(u.buffer,h,f-h);if(o.set(g,d),i+=g.length,e<u.end)break}return a}findShardForByte(t){if(0===this.shards.length||t<0||t>=this.byteLength)return-1;if(null!=this.bufferUniformSize)return this.previousShardIndex=Math.floor(t/this.bufferUniformSize),this.previousShardIndex;function e(r){return t<r.start?-1:t>=r.end?1:0}if(0===e(this.shards[this.previousShardIndex]))return this.previousShardIndex;const s=function rv(n,t){let e=0,s=n.length;for(;e<=s;){const r=Math.floor((s-e)/2)+e,a=t(n[r]);if(0===a)return r;a<0?s=r:e=r+1}return-1}(this.shards,e);return-1===s?-1:(this.previousShardIndex=s,this.previousShardIndex)}}function ps(){return R}function Th(){return R.memory()}function z(n,t){return R.tidy(n,t)}function Be(n){ym(n).forEach(e=>e.dispose())}function fs(n){return R.keep(n)}function km(n,t,e=1){return R.registerBackend(n,t,e)}!function K1(n){cm=n}(function av(n){M().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(n+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")});const Zs=4;function _m(n,t){return _h.apply(this,arguments)}function _h(){return _h=O(function*(n,t){const e=[],s=[],r=Array.isArray(n)?n.map(o=>o.name):Object.keys(n);for(let o=0;o<r.length;++o){const i=r[o],l=Array.isArray(n)?n[o].tensor:n[i];if("float32"!==l.dtype&&"int32"!==l.dtype&&"bool"!==l.dtype&&"string"!==l.dtype&&"complex64"!==l.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${l.dtype}`);const u={name:i,shape:l.shape,dtype:l.dtype};if("string"===l.dtype){const c=new Promise(function(){var h=O(function*(d){const p=yield l.bytes(),f=p.reduce((y,x)=>y+x.length,0)+Zs*p.length,g=new Uint8Array(f);let m=0;for(let y=0;y<p.length;y++){const x=p[y],b=new Uint8Array(new Uint32Array([x.length]).buffer);g.set(b,m),m+=Zs,g.set(x,m),m+=x.length}d(g)});return function(d){return h.apply(this,arguments)}}());s.push(c)}else s.push(l.data());null!=t&&(u.group=t),e.push(u)}return{data:uv(yield Promise.all(s)),specs:e}}),_h.apply(this,arguments)}function iv(n,t){const e=L(n.shape);let s;if("quantization"in n)s=Tr[n.quantization.dtype];else{if("string"===n.dtype){let r=0;for(let a=0;a<e;a++)r+=Zs+new Uint32Array(t(r,r+Zs))[0];return r}s=Tr[n.dtype]}return e*s}function Em(n,t){const e=n.name,s=n.dtype,r=n.shape,a=L(r);let o,i=0;if("quantization"in n){const l=n.quantization;if("uint8"===l.dtype||"uint16"===l.dtype){if(!("min"in l)||!("scale"in l))throw new Error(`Weight ${n.name} with quantization ${l.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==l.dtype)throw new Error(`Weight ${n.name} has unknown quantization dtype ${l.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==s)throw new Error(`Weight ${n.name} is quantized with ${l.dtype} which only supports weights of type float32 not ${s}.`)}const u=Tr[l.dtype],c="uint8"===l.dtype?new Uint8Array(t):new Uint16Array(t);if("float32"===s)if("uint8"===l.dtype||"uint16"===l.dtype){o=new Float32Array(c.length);for(let h=0;h<c.length;h++)o[h]=c[h]*l.scale+l.min}else{if("float16"!==l.dtype)throw new Error(`Unsupported quantization type ${l.dtype} for weight type float32.`);o=function yv(){const n=function fv(){const n=e=>{let s=e<<13,r=0;for(;!(8388608&s);)r-=8388608,s<<=1;return s&=-8388609,r+=947912704,s|r},t=new Uint32Array(2048);t[0]=0;for(let e=1;e<1024;e++)t[e]=n(e);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function mv(){const n=new Uint32Array(64);n[0]=0,n[31]=1199570944,n[32]=2147483648,n[63]=3347054592;for(let t=1;t<31;t++)n[t]=t<<23;for(let t=33;t<63;t++)n[t]=2147483648+(t-32<<23);return n}(),e=function gv(){const n=new Uint32Array(64);for(let t=0;t<64;t++)n[t]=1024;return n[0]=n[32]=0,n}();return s=>{const r=new ArrayBuffer(4*s.length),a=new Uint32Array(r);for(let o=0;o<s.length;o++){const i=s[o];a[o]=n[e[i>>10]+(1023&i)]+t[i>>10]}return new Float32Array(r)}}()(c)}else{if("int32"!==s)throw new Error(`Unsupported dtype in weight '${e}': ${s}`);if("uint8"!==l.dtype&&"uint16"!==l.dtype)throw new Error(`Unsupported quantization type ${l.dtype} for weight type int32.`);o=new Int32Array(c.length);for(let h=0;h<c.length;h++)o[h]=Math.round(c[h]*l.scale+l.min)}i+=a*u}else if("string"===s){const l=L(n.shape);o=[];for(let u=0;u<l;u++){const c=new Uint32Array(t.slice(i,i+Zs))[0];i+=Zs;const h=new Uint8Array(t.slice(i,i+c));o.push(h),i+=c}}else{const l=Tr[s];if("float32"===s)o=new Float32Array(t);else if("int32"===s)o=new Int32Array(t);else{if("bool"!==s){if("complex64"===s){o=new Float32Array(t);const u=new Float32Array(o.length/2),c=new Float32Array(o.length/2);for(let f=0;f<u.length;f++)u[f]=o[2*f],c[f]=o[2*f+1];const h=Ys(u,r,"float32"),d=Ys(c,r,"float32"),p=kr(h,d);return h.dispose(),d.dispose(),p}throw new Error(`Unsupported dtype in weight '${e}': ${s}`)}o=new Uint8Array(t)}i+=a*l}return Ys(o,r,s)}function uv(n){if(null===n)throw new Error(`Invalid input value: ${JSON.stringify(n)}`);let t=0;const e=[];n.forEach(a=>{if(t+=a.byteLength,e.push(a.byteLength===a.buffer.byteLength?a:new a.constructor(a)),!(a instanceof Float32Array||a instanceof Int32Array||a instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${a.constructor.name}`)});const s=new Uint8Array(t);let r=0;return e.forEach(a=>{s.set(new Uint8Array(a.buffer),r),r+=a.byteLength}),s.buffer}const Rh=typeof Buffer<"u"&&(typeof Blob>"u"||typeof atob>"u"||typeof btoa>"u");function Rm(n){return Rh?Buffer.byteLength(n,"utf8"):new Blob([n]).size}function Fm(n,t){const e={modelTopology:n.modelTopology,format:n.format,generatedBy:n.generatedBy,convertedBy:n.convertedBy,weightsManifest:t};return null!=n.signature&&(e.signature=n.signature),null!=n.userDefinedMetadata&&(e.userDefinedMetadata=n.userDefinedMetadata),null!=n.modelInitializer&&(e.modelInitializer=n.modelInitializer),null!=n.initializerSignature&&(e.initializerSignature=n.initializerSignature),null!=n.trainingConfig&&(e.trainingConfig=n.trainingConfig),e}function Om(n,t){return Dh.apply(this,arguments)}function Dh(){return(Dh=O(function*(n,t){let e,s;return null!=n.weightsManifest&&([e,s]=yield t(n.weightsManifest)),function pv(n,t,e){const s={modelTopology:n.modelTopology,format:n.format,generatedBy:n.generatedBy,convertedBy:n.convertedBy};if(null!=n.trainingConfig&&(s.trainingConfig=n.trainingConfig),null!=n.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!e)throw new Error("modelJSON has weightsManifest but weightData is null");s.weightSpecs=t,s.weightData=e}return null!=n.signature&&(s.signature=n.signature),null!=n.userDefinedMetadata&&(s.userDefinedMetadata=n.userDefinedMetadata),null!=n.modelInitializer&&(s.modelInitializer=n.modelInitializer),null!=n.initializerSignature&&(s.initializerSignature=n.initializerSignature),s}(n,e,s)})).apply(this,arguments)}function Ul(n){if(n.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==n.modelTopology?0:Rm(JSON.stringify(n.modelTopology)),weightSpecsBytes:null==n.weightSpecs?0:Rm(JSON.stringify(n.weightSpecs)),weightDataBytes:null==n.weightData?0:new ds(n.weightData).byteLength}}function Pm(n){const t=[];for(const e of n)t.push(...e.weights);return t}class St{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==St.instance&&(St.instance=new St),St.instance}static registerSaveRouter(t){St.getInstance().saveRouters.push(t)}static registerLoadRouter(t){St.getInstance().loadRouters.push(t)}static getSaveHandlers(t){return St.getHandlers(t,"save")}static getLoadHandlers(t,e){return St.getHandlers(t,"load",e)}static getHandlers(t,e,s){const r=[];return("load"===e?St.getInstance().loadRouters:St.getInstance().saveRouters).forEach(o=>{const i=o(t,s);null!==i&&r.push(i)}),r}}const Gl="tensorflowjs",_r="models_store",Js="model_info_store";function Ph(){if(!M().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const n=typeof window>"u"?self:window,t=n.indexedDB||n.mozIndexedDB||n.webkitIndexedDB||n.msIndexedDB||n.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function Lh(n){const t=n.result;t.createObjectStore(_r,{keyPath:"modelPath"}),t.createObjectStore(Js,{keyPath:"modelPath"})}let ia=(()=>{class n{constructor(e){if(this.indexedDB=Ph(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}save(e){var s=this;return O(function*(){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return s.databaseAction(s.modelPath,e)})()}load(){var e=this;return O(function*(){return e.databaseAction(e.modelPath)})()}databaseAction(e,s){return new Promise((r,a)=>{const o=this.indexedDB.open(Gl,1);o.onupgradeneeded=()=>Lh(o),o.onsuccess=()=>{const i=o.result;if(null==s){const l=i.transaction(_r,"readonly"),c=l.objectStore(_r).get(this.modelPath);c.onsuccess=()=>{if(null==c.result)return i.close(),a(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));r(c.result.modelArtifacts)},c.onerror=h=>(i.close(),a(c.error)),l.oncomplete=()=>i.close()}else{s.weightData=ds.join(s.weightData);const l=Ul(s),u=i.transaction(Js,"readwrite");let h,d,c=u.objectStore(Js);try{h=c.put({modelPath:this.modelPath,modelArtifactsInfo:l})}catch(p){return a(p)}h.onsuccess=()=>{d=i.transaction(_r,"readwrite");const p=d.objectStore(_r);let f;try{f=p.put({modelPath:this.modelPath,modelArtifacts:s,modelArtifactsInfo:l})}catch(g){return a(g)}f.onsuccess=()=>r({modelArtifactsInfo:l}),f.onerror=g=>{c=u.objectStore(Js);const m=c.delete(this.modelPath);m.onsuccess=()=>(i.close(),a(f.error)),m.onerror=y=>(i.close(),a(f.error))}},h.onerror=p=>(i.close(),a(h.error)),u.oncomplete=()=>{null==d?i.close():d.oncomplete=()=>i.close()}}},o.onerror=i=>a(o.error)})}}return n.URL_SCHEME="indexeddb://",n})();const Lm=n=>M().getBool("IS_BROWSER")&&!Array.isArray(n)&&n.startsWith(ia.URL_SCHEME)?function wv(n){return new ia(n)}(n.slice(ia.URL_SCHEME.length)):null;St.registerSaveRouter(Lm),St.registerLoadRouter(Lm);class Sv{constructor(){this.indexedDB=Ph()}listModels(){var t=this;return O(function*(){return new Promise((e,s)=>{const r=t.indexedDB.open(Gl,1);r.onupgradeneeded=()=>Lh(r),r.onsuccess=()=>{const a=r.result,o=a.transaction(Js,"readonly"),l=o.objectStore(Js).getAll();l.onsuccess=()=>{const u={};for(const c of l.result)u[c.modelPath]=c.modelArtifactsInfo;e(u)},l.onerror=u=>(a.close(),s(l.error)),o.oncomplete=()=>a.close()},r.onerror=a=>s(r.error)})})()}removeModel(t){var e=this;return O(function*(){return t=function vv(n){return n.startsWith(ia.URL_SCHEME)?n.slice(ia.URL_SCHEME.length):n}(t),new Promise((s,r)=>{const a=e.indexedDB.open(Gl,1);a.onupgradeneeded=()=>Lh(a),a.onsuccess=()=>{const o=a.result,i=o.transaction(Js,"readwrite"),l=i.objectStore(Js),u=l.get(t);let c;u.onsuccess=()=>{if(null==u.result)return o.close(),r(new Error(`Cannot find model with path '${t}' in IndexedDB.`));{const h=l.delete(t),d=()=>{c=o.transaction(_r,"readwrite");const f=c.objectStore(_r).delete(t);f.onsuccess=()=>s(u.result.modelArtifactsInfo),f.onerror=g=>r(u.error)};h.onsuccess=d,h.onerror=p=>(d(),o.close(),r(u.error))}},u.onerror=h=>(o.close(),r(u.error)),i.oncomplete=()=>{null==c?o.close():c.oncomplete=()=>o.close()}},a.onerror=o=>r(a.error)})})()}}const ms="/",$r="tensorflowjs_models",Vm="info",Iv="model_topology",Nv="weight_specs",Cv="weight_data",kv="model_metadata";function Mm(n){return{info:[$r,n,Vm].join(ms),topology:[$r,n,Iv].join(ms),weightSpecs:[$r,n,Nv].join(ms),weightData:[$r,n,Cv].join(ms),modelMetadata:[$r,n,kv].join(ms)}}function zm(n){for(const t of Object.values(n))window.localStorage.removeItem(t)}function Bm(n){const t=n.split(ms);if(t.length<3)throw new Error(`Invalid key format: ${n}`);return t.slice(1,t.length-1).join(ms)}let la=(()=>{class n{constructor(e){if(!M().getBool("IS_BROWSER")||typeof window>"u"||typeof window.localStorage>"u")throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=Mm(this.modelPath)}save(e){var s=this;return O(function*(){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const r=JSON.stringify(e.modelTopology),a=JSON.stringify(e.weightSpecs),o=Ul(e),i=ds.join(e.weightData);try{return s.LS.setItem(s.keys.info,JSON.stringify(o)),s.LS.setItem(s.keys.topology,r),s.LS.setItem(s.keys.weightSpecs,a),s.LS.setItem(s.keys.weightData,function cv(n){if(Rh)return Buffer.from(n).toString("base64");const t=new Uint8Array(n);let e="";for(let s=0,r=t.length;s<r;s++)e+=String.fromCharCode(t[s]);return btoa(e)}(i)),s.LS.setItem(s.keys.modelMetadata,JSON.stringify({format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,initializerSignature:null!=e.initializerSignature?e.initializerSignature:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0})),{modelArtifactsInfo:o}}catch{throw zm(s.keys),new Error(`Failed to save model '${s.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${o.modelTopologyBytes}, weightSpecsBytes=${o.weightSpecsBytes}, weightDataBytes=${o.weightDataBytes}.`)}}})()}load(){var e=this;return O(function*(){const s=JSON.parse(e.LS.getItem(e.keys.info));if(null==s)throw new Error(`In local storage, there is no model with name '${e.modelPath}'`);if("JSON"!==s.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const r={},a=JSON.parse(e.LS.getItem(e.keys.topology));if(null==a)throw new Error(`In local storage, the topology of model '${e.modelPath}' is missing.`);r.modelTopology=a;const o=JSON.parse(e.LS.getItem(e.keys.weightSpecs));if(null==o)throw new Error(`In local storage, the weight specs of model '${e.modelPath}' are missing.`);r.weightSpecs=o;const i=e.LS.getItem(e.keys.modelMetadata);if(null!=i){const u=JSON.parse(i);r.format=u.format,r.generatedBy=u.generatedBy,r.convertedBy=u.convertedBy,null!=u.signature&&(r.signature=u.signature),null!=u.userDefinedMetadata&&(r.userDefinedMetadata=u.userDefinedMetadata),null!=u.modelInitializer&&(r.modelInitializer=u.modelInitializer),null!=u.initializerSignature&&(r.initializerSignature=u.initializerSignature),null!=u.trainingConfig&&(r.trainingConfig=u.trainingConfig)}const l=e.LS.getItem(e.keys.weightData);if(null==l)throw new Error(`In local storage, the binary weight values of model '${e.modelPath}' are missing.`);return r.weightData=function hv(n){if(Rh){const s=Buffer.from(n,"base64");return s.buffer.slice(s.byteOffset,s.byteOffset+s.byteLength)}const t=atob(n),e=new Uint8Array(t.length);for(let s=0;s<t.length;++s)e.set([t.charCodeAt(s)],s);return e.buffer}(l),r})()}}return n.URL_SCHEME="localstorage://",n})();const Wm=n=>M().getBool("IS_BROWSER")&&!Array.isArray(n)&&n.startsWith(la.URL_SCHEME)?function _v(n){return new la(n)}(n.slice(la.URL_SCHEME.length)):null;St.registerSaveRouter(Wm),St.registerLoadRouter(Wm);class $v{constructor(){S(M().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),S(typeof window>"u"||typeof window.localStorage<"u",()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}listModels(){var t=this;return O(function*(){const e={},s=$r+ms,r=ms+Vm;for(let a=0;a<t.LS.length;++a){const o=t.LS.key(a);o.startsWith(s)&&o.endsWith(r)&&(e[Bm(o)]=JSON.parse(t.LS.getItem(o)))}return e})()}removeModel(t){var e=this;return O(function*(){const s=Mm(t=function Tv(n){return n.startsWith(la.URL_SCHEME)?n.slice(la.URL_SCHEME.length):n}(t));if(null==e.LS.getItem(s.info))throw new Error(`Cannot find model at path '${t}'`);const r=JSON.parse(e.LS.getItem(s.info));return zm(s),r})()}}class pn{constructor(){this.managers={}}static getInstance(){return null==pn.instance&&(pn.instance=new pn),pn.instance}static registerManager(t,e){S(null!=t,()=>"scheme must not be undefined or null."),t.endsWith("://")&&(t=t.slice(0,t.indexOf("://"))),S(t.length>0,()=>"scheme must not be an empty string.");const s=pn.getInstance();S(null==s.managers[t],()=>`A model store manager is already registered for scheme '${t}'.`),s.managers[t]=e}static getManager(t){const e=pn.getInstance().managers[t];if(null==e)throw new Error(`Cannot find model manager for scheme '${t}'`);return e}static getSchemes(){return Object.keys(pn.getInstance().managers)}}class Ev{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(t,e){return fetch(t,e)}now(){return performance.now()}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error(`Browser's encoder only supports utf-8, but got ${e}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)}decode(t,e){return new TextDecoder(e).decode(t)}setTimeoutCustom(t,e){typeof window>"u"||!M().getBool("USE_SETTIMEOUTCUSTOM")?setTimeout(t,e):(this.functionRefs.push(t),setTimeout(()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")},e),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",s=>{s.source===window&&s.data.name===this.messageName&&(s.stopPropagation(),(0,this.functionRefs[s.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0))},!0)))}isTypedArray(t){return sm(t)}}if(M().get("IS_BROWSER")){M().setPlatform("browser",new Ev);try{pn.registerManager(la.URL_SCHEME,new $v)}catch{}try{pn.registerManager(ia.URL_SCHEME,new Sv)}catch{}}let ca;function Ge(n,t="float32",e){return t=t||"float32",Es(n),new Qt(n,t,e)}M().get("IS_NODE")&&!M().get("IS_BROWSER")&&M().setPlatform("node",new class Rv{constructor(){this.util=te(8628),this.textEncoder=new this.util.TextEncoder}fetch(t,e){return null!=M().global.fetch?M().global.fetch(t,e):(null==ca&&(ca=te(5410)),ca(t,e))}now(){const t=process.hrtime();return 1e3*t[0]+t[1]/1e6}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error(`Node built-in encoder only supports utf-8, but got ${e}`);return this.textEncoder.encode(t)}decode(t,e){return 0===t.length?"":new this.util.TextDecoder(e).decode(t)}isTypedArray(t){return this.util.types.isFloat32Array(t)||this.util.types.isInt32Array(t)||this.util.types.isUint8Array(t)||this.util.types.isUint8ClampedArray(t)}});const he=D({cast_:function Dv(n,t){const e=C(n,"x","cast");if(!function g1(n){return"bool"===n||"complex64"===n||"float32"===n||"int32"===n||"string"===n}(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==e.dtype||"string"!==t&&"string"===e.dtype)throw new Error("Only strings can be casted to strings");return R.runKernel(Ya,{x:e},{dtype:t})}}),Er=D({clone_:function Fv(n){const e={x:C(n,"x","clone","string_or_numeric")};return R.runKernel(co,e)}});wm(),function q1(n){oa=n}({buffer:Ge,cast:he,clone:Er,print:function Ov(n,t=!1){console.log(n.toString(t))}});const ne=D({add_:function Pv(n,t){let e=C(n,"a","add"),s=C(t,"b","add");return[e,s]=kt(e,s),R.runKernel(sa,{a:e,b:s})}}),Gm=D({floorDiv_:function Lv(n,t){let e=C(n,"a","floorDiv"),s=C(t,"b","floorDiv");return[e,s]=kt(e,s),R.runKernel(lo,{a:e,b:s})}}),Ie=D({div_:function Vv(n,t){let e=C(n,"a","div"),s=C(t,"b","div");return[e,s]=kt(e,s),"int32"===e.dtype&&"int32"===s.dtype?Gm(e,s):R.runKernel(to,{a:e,b:s},{})}}),E=D({mul_:function Mv(n,t){let e=C(n,"a","mul"),s=C(t,"b","mul");return[e,s]=kt(e,s),R.runKernel(wo,{a:e,b:s})}}),fn=D({sqrt_:function zv(n){const e={x:C(n,"x","sqrt","float32")};return R.runKernel(Do,e)}}),dt=D({square_:function Bv(n){const t=C(n,"x","square");return R.runKernel("Square",{x:t},{})}}),Xe=D({zerosLike_:function Wv(n){const e={x:C(n,"x","zerosLike")};return R.runKernel(Dl,e)}});function As(n){return R.customGrad(n)}function Fe(n,t){if((Wn(n)&&"string"!==t||Array.isArray(n))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&Wn(n)&&!(n instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Wl(n,[],[],t)}const Gv=new Map,Uh=new Map;class ha{getClassName(){return this.constructor.className}static fromConfig(t,e){return new t(e)}}class Un{constructor(){this.classNameMap={}}static getMap(){return null==Un.instance&&(Un.instance=new Un),Un.instance}static register(t){Un.getMap().classNameMap[t.className]=[t,t.fromConfig]}}function J(n,t,e){S(null!=n.className,()=>"Class being registered does not have the static className property defined."),S("string"==typeof n.className,()=>"className is required to be a string, but got type "+typeof n.className),S(n.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),typeof t>"u"&&(t="Custom"),typeof e>"u"&&(e=n.className);const r=t+">"+e;return Un.register(n),Gv.set(r,n),Uh.set(n,r),n}class Qs extends ha{minimize(t,e=!1,s){const{value:r,grads:a}=this.computeGradients(t,s);if(null!=s){const o=s.map(i=>({name:i.name,tensor:a[i.name]}));this.applyGradients(o)}else this.applyGradients(a);return Be(a),e?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(t,e){return function Uv(n,t){S(xc(n),()=>"The f passed in variableGrads(f) must be a function"),S(null==t||Array.isArray(t)&&t.every(u=>u instanceof zl),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const e=null!=t;if(!e){t=[];for(const u in R.registeredVariables)t.push(R.registeredVariables[u])}const s=e?t.filter(u=>!u.trainable):null,r=t.length;S((t=t.filter(u=>u.trainable)).length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`);const{value:o,grads:i}=R.gradients(n,t,null,!0);S(i.some(u=>null!=u),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),S(0===o.rank,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${o.rank} tensor`);const l={};return t.forEach((u,c)=>{null!=i[c]&&(l[u.name]=i[c])}),s?.forEach(u=>l[u.name]=null),{value:o,grads:l}}(t,e)}dispose(){null!=this.iterations_&&Be(this.iterations_)}saveIterations(){var t=this;return O(function*(){return null==t.iterations_&&(t.iterations_=0),{name:"iter",tensor:Fe(t.iterations_,"int32")}})()}getWeights(){return O(function*(){throw new Error("getWeights() is not implemented for this optimizer yet.")})()}setWeights(t){var e=this;return O(function*(){throw new Error(`setWeights() is not implemented for this optimizer class ${e.getClassName()}`)})()}extractIterations(t){var e=this;return O(function*(){return e.iterations_=(yield t[0].tensor.data())[0],t.slice(1)})()}}Object.defineProperty(Qs,Symbol.hasInstance,{value:n=>null!=n.minimize&&null!=n.computeGradients&&null!=n.applyGradients});class Hm extends Qs{static get className(){return"Adadelta"}constructor(t,e,s=null){super(),this.learningRate=t,this.rho=e,this.epsilon=s,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==s&&(this.epsilon=R.backend.epsilon())}applyGradients(t){(Array.isArray(t)?t.map(s=>s.name):Object.keys(t)).forEach((s,r)=>{const a=R.registeredVariables[s];null==this.accumulatedGrads[r]&&(this.accumulatedGrads[r]={originalName:`${s}/accum_grad`,variable:z(()=>Xe(a).variable(!1))}),null==this.accumulatedUpdates[r]&&(this.accumulatedUpdates[r]={originalName:`${s}/accum_var`,variable:z(()=>Xe(a).variable(!1))});const i=Array.isArray(t)?t[r].tensor:t[s];if(null==i)return;const l=this.accumulatedGrads[r].variable,u=this.accumulatedUpdates[r].variable;z(()=>{const c=ne(E(l,this.rho),E(dt(i),1-this.rho)),h=E(Ie(fn(ne(u,this.epsilon)),fn(ne(l,this.epsilon))),i),d=ne(E(u,this.rho),E(dt(h),1-this.rho));l.assign(c),u.assign(d);const p=ne(E(h,-this.learningRate),a);a.assign(p)})}),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(Be(this.accumulatedGrads.map(t=>t.variable)),Be(this.accumulatedUpdates.map(t=>t.variable)))}getWeights(){var t=this;return O(function*(){const e=[...t.accumulatedGrads,...t.accumulatedUpdates];return[yield t.saveIterations()].concat(e.map(s=>({name:s.originalName,tensor:s.variable})))})()}setWeights(t){var e=this;return O(function*(){const s=(t=yield e.extractIterations(t)).length/2;e.accumulatedGrads=t.slice(0,s).map(a=>({originalName:a.name,variable:a.tensor.variable(!1)})),e.accumulatedUpdates=t.slice(s,2*s).map(a=>({originalName:a.name,variable:a.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.rho,e.epsilon)}}function Go(n,t,e){return Es(n),e=e||ta(t),R.runKernel(jc,{},{shape:n,value:t,dtype:e})}class jm extends Qs{static get className(){return"Adagrad"}constructor(t,e=.1){super(),this.learningRate=t,this.initialAccumulatorValue=e,this.accumulatedGrads=[]}applyGradients(t){(Array.isArray(t)?t.map(s=>s.name):Object.keys(t)).forEach((s,r)=>{const a=R.registeredVariables[s];null==this.accumulatedGrads[r]&&(this.accumulatedGrads[r]={originalName:`${s}/accumulator`,variable:z(()=>Go(a.shape,this.initialAccumulatorValue).variable(!1))});const o=Array.isArray(t)?t[r].tensor:t[s];if(null==o)return;const i=this.accumulatedGrads[r].variable;z(()=>{const l=ne(i,dt(o));i.assign(l);const u=ne(E(Ie(o,fn(ne(l,R.backend.epsilon()))),-this.learningRate),a);a.assign(u)})}),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&Be(this.accumulatedGrads.map(t=>t.variable))}getWeights(){var t=this;return O(function*(){return[yield t.saveIterations()].concat(t.accumulatedGrads.map(e=>({name:e.originalName,tensor:e.variable})))})()}setWeights(t){var e=this;return O(function*(){t=yield e.extractIterations(t),e.accumulatedGrads=t.map(r=>({originalName:r.name,variable:r.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(t,e){return new t(e.learningRate,e.initialAccumulatorValue)}}const da=D({pow_:function Hv(n,t){let e=C(n,"base","pow"),s=C(t,"exp","pow");return[e,s]=kt(e,s),R.runKernel(vo,{a:e,b:s})}}),ge=D({sub_:function jv(n,t){let e=C(n,"a","sub"),s=C(t,"b","sub");return[e,s]=kt(e,s),R.runKernel(Oo,{a:e,b:s})}});class qm extends Qs{static get className(){return"Adam"}constructor(t,e,s,r=null){super(),this.learningRate=t,this.beta1=e,this.beta2=s,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],z(()=>{this.accBeta1=Fe(e).variable(),this.accBeta2=Fe(s).variable()}),null==r&&(this.epsilon=R.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map(s=>s.name):Object.keys(t);z(()=>{const s=ge(1,this.accBeta1),r=ge(1,this.accBeta2);e.forEach((a,o)=>{const i=R.registeredVariables[a];null==this.accumulatedFirstMoment[o]&&(this.accumulatedFirstMoment[o]={originalName:`${a}/m`,variable:z(()=>Xe(i).variable(!1))}),null==this.accumulatedSecondMoment[o]&&(this.accumulatedSecondMoment[o]={originalName:`${a}/v`,variable:z(()=>Xe(i).variable(!1))});const u=Array.isArray(t)?t[o].tensor:t[a];if(null==u)return;const c=this.accumulatedFirstMoment[o].variable,h=this.accumulatedSecondMoment[o].variable,d=ne(E(c,this.beta1),E(u,1-this.beta1)),p=ne(E(h,this.beta2),E(dt(u),1-this.beta2)),f=Ie(d,s),g=Ie(p,r);c.assign(d),h.assign(p);const m=ne(E(Ie(f,ne(fn(g),this.epsilon)),-this.learningRate),i);i.assign(m)}),this.accBeta1.assign(E(this.accBeta1,this.beta1)),this.accBeta2.assign(E(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&Be(this.accumulatedFirstMoment.map(t=>t.variable)),null!=this.accumulatedSecondMoment&&Be(this.accumulatedSecondMoment.map(t=>t.variable))}getWeights(){var t=this;return O(function*(){const e=[...t.accumulatedFirstMoment,...t.accumulatedSecondMoment];return[yield t.saveIterations()].concat(e.map(s=>({name:s.originalName,tensor:s.variable})))})()}setWeights(t){var e=this;return O(function*(){t=yield e.extractIterations(t),z(()=>{e.accBeta1.assign(da(e.beta1,e.iterations_+1)),e.accBeta2.assign(da(e.beta2,e.iterations_+1))});const s=t.length/2;e.accumulatedFirstMoment=t.slice(0,s).map(a=>({originalName:a.name,variable:a.tensor.variable(!1)})),e.accumulatedSecondMoment=t.slice(s,2*s).map(a=>({originalName:a.name,variable:a.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)}}const qt=D({abs_:function qv(n){const t=C(n,"x","abs");return R.runKernel("complex64"===t.dtype?zi:Di,{x:t})}});function pa(n,t){const e=n.length,s=[];for(let r=0;r<e;r++){const a=e-1-r;(t[t.length-1-r]||1)>1&&1===(n[a]||1)&&s.unshift(a)}return s}function Lt(n,t){const e=[];for(let s=0;s<t.length;s++){const r=n[n.length-s-1],a=t.length-s-1;(null==r||1===r&&t[a]>1)&&e.unshift(a)}return e}function Pe(n,t){const e=Math.max(n.length,t.length),s=new Array(e);for(let r=0;r<e;r++){let a=n[n.length-r-1];null==a&&(a=1);let o=t[t.length-r-1];if(null==o&&(o=1),1===a)s[e-r-1]=o;else if(1===o)s[e-r-1]=a;else{if(a!==o)throw Error(`Operands could not be broadcast together with shapes ${n} and ${t}.`);s[e-r-1]=a}}return s}const er=D({maximum_:function Kv(n,t){let e=C(n,"a","maximum"),s=C(t,"b","maximum");return[e,s]=kt(e,s),"bool"===e.dtype&&(e=he(e,"int32"),s=he(s,"int32")),Pe(e.shape,s.shape),R.runKernel(yo,{a:e,b:s})}});class Km extends Qs{static get className(){return"Adamax"}constructor(t,e,s,r=null,a=0){super(),this.learningRate=t,this.beta1=e,this.beta2=s,this.epsilon=r,this.decay=a,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],z(()=>{this.iteration=Fe(0).variable(),this.accBeta1=Fe(e).variable()}),null==r&&(this.epsilon=R.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map(s=>s.name):Object.keys(t);z(()=>{const s=ge(1,this.accBeta1),r=Ie(-this.learningRate,ne(E(this.iteration,this.decay),1));e.forEach((a,o)=>{const i=R.registeredVariables[a];null==this.accumulatedFirstMoment[o]&&(this.accumulatedFirstMoment[o]={originalName:`${a}/m`,variable:Xe(i).variable(!1)}),null==this.accumulatedWeightedInfNorm[o]&&(this.accumulatedWeightedInfNorm[o]={originalName:`${a}/v`,variable:Xe(i).variable(!1)});const u=Array.isArray(t)?t[o].tensor:t[a];if(null==u)return;const c=this.accumulatedFirstMoment[o].variable,h=this.accumulatedWeightedInfNorm[o].variable,d=ne(E(c,this.beta1),E(u,1-this.beta1)),p=E(h,this.beta2),f=qt(u),g=er(p,f);c.assign(d),h.assign(g);const m=ne(E(Ie(r,s),Ie(d,ne(g,this.epsilon))),i);i.assign(m)}),this.iteration.assign(ne(this.iteration,1)),this.accBeta1.assign(E(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&Be(this.accumulatedFirstMoment.map(t=>t.variable)),null!=this.accumulatedWeightedInfNorm&&Be(this.accumulatedWeightedInfNorm.map(t=>t.variable))}getWeights(){return O(function*(){throw new Error("getWeights() is not implemented for Adamax yet.")})()}setWeights(t){return O(function*(){throw new Error("setWeights() is not implemented for Adamax yet.")})()}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)}}class Gh extends Qs{static get className(){return"SGD"}constructor(t){super(),this.learningRate=t,this.setLearningRate(t)}applyGradients(t){(Array.isArray(t)?t.map(s=>s.name):Object.keys(t)).forEach((s,r)=>{const a=Array.isArray(t)?t[r].tensor:t[s];if(null==a)return;const o=R.registeredVariables[s];z(()=>{const i=ne(E(this.c,a),o);o.assign(i)})}),this.incrementIterations()}setLearningRate(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=fs(Fe(-t))}dispose(){this.c.dispose()}getWeights(){var t=this;return O(function*(){return[yield t.saveIterations()]})()}setWeights(t){var e=this;return O(function*(){if(0!==(t=yield e.extractIterations(t)).length)throw new Error("SGD optimizer does not have settable weights.")})()}getConfig(){return{learningRate:this.learningRate}}static fromConfig(t,e){return new t(e.learningRate)}}class Xm extends Gh{static get className(){return"Momentum"}constructor(t,e,s=!1){super(t),this.learningRate=t,this.momentum=e,this.useNesterov=s,this.accumulations=[],this.m=Fe(this.momentum)}applyGradients(t){(Array.isArray(t)?t.map(s=>s.name):Object.keys(t)).forEach((s,r)=>{const a=R.registeredVariables[s];null==this.accumulations[r]&&(this.accumulations[r]={originalName:`${s}/momentum`,variable:z(()=>Xe(a).variable(!1))});const o=this.accumulations[r].variable,i=Array.isArray(t)?t[r].tensor:t[s];null!=i&&z(()=>{let l;const u=ne(E(this.m,o),i);l=ne(E(this.c,this.useNesterov?ne(i,E(u,this.m)):u),a),o.assign(u),a.assign(l)})}),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&Be(this.accumulations.map(t=>t.variable))}setMomentum(t){this.momentum=t}getWeights(){var t=this;return O(function*(){return[yield t.saveIterations()].concat(t.accumulations.map(e=>({name:e.originalName,tensor:e.variable})))})()}setWeights(t){var e=this;return O(function*(){t=yield e.extractIterations(t),e.accumulations=t.map(r=>({originalName:r.name,variable:r.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)}}class Ym extends Qs{static get className(){return"RMSProp"}constructor(t,e=.9,s=0,r=null,a=!1){if(super(),this.learningRate=t,this.decay=e,this.momentum=s,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=a,null==r&&(this.epsilon=R.backend.epsilon()),null==t)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(t){(Array.isArray(t)?t.map(s=>s.name):Object.keys(t)).forEach((s,r)=>{const a=R.registeredVariables[s],o=!1;null==this.accumulatedMeanSquares[r]&&(this.accumulatedMeanSquares[r]={originalName:`${s}/rms`,variable:z(()=>Xe(a).variable(o))}),null==this.accumulatedMoments[r]&&(this.accumulatedMoments[r]={originalName:`${s}/momentum`,variable:z(()=>Xe(a).variable(o))}),null==this.accumulatedMeanGrads[r]&&this.centered&&(this.accumulatedMeanGrads[r]={originalName:`${s}/mg`,variable:z(()=>Xe(a).variable(o))});const i=Array.isArray(t)?t[r].tensor:t[s];if(null==i)return;const l=this.accumulatedMeanSquares[r].variable,u=this.accumulatedMoments[r].variable;z(()=>{const c=ne(E(l,this.decay),E(dt(i),1-this.decay));if(this.centered){const h=this.accumulatedMeanGrads[r].variable,d=ne(E(h,this.decay),E(i,1-this.decay)),p=Ie(E(i,this.learningRate),fn(ge(c,ne(dt(d),this.epsilon)))),f=ne(E(u,this.momentum),p);l.assign(c),h.assign(d),u.assign(f);const g=ge(a,f);a.assign(g)}else{const h=ne(E(l,this.decay),E(dt(i),1-this.decay)),d=ne(E(u,this.momentum),Ie(E(i,this.learningRate),fn(ne(h,this.epsilon))));l.assign(h),u.assign(d);const p=ge(a,d);a.assign(p)}})}),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&Be(this.accumulatedMeanSquares.map(t=>t.variable)),null!=this.accumulatedMeanGrads&&this.centered&&Be(this.accumulatedMeanGrads.map(t=>t.variable)),null!=this.accumulatedMoments&&Be(this.accumulatedMoments.map(t=>t.variable))}getWeights(){var t=this;return O(function*(){const e=[...t.accumulatedMeanSquares,...t.accumulatedMoments];return t.centered&&e.push(...t.accumulatedMeanGrads),[yield t.saveIterations()].concat(e.map(s=>({name:s.originalName,tensor:s.variable})))})()}setWeights(t){var e=this;return O(function*(){t=yield e.extractIterations(t);const s=e.centered?t.length/3:t.length/2,r=!1;e.accumulatedMeanSquares=t.slice(0,s).map(a=>({originalName:a.name,variable:a.tensor.variable(r)})),e.accumulatedMoments=t.slice(s,2*s).map(a=>({originalName:a.name,variable:a.tensor.variable(r)})),e.centered&&(e.accumulatedMeanGrads=t.slice(2*s,3*s).map(a=>({originalName:a.name,variable:a.tensor.variable(r)})))})()}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)}}const Xv=[Hm,jm,qm,Km,Xm,Ym,Gh];function Zm(n){return new Promise(t=>setTimeout(t)).then(n)}let Hh=(()=>{class n{constructor(e){if(!M().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(n.URL_SCHEME)&&(e=e.slice(n.URL_SCHEME.length)),(null==e||0===e.length)&&(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}save(e){var s=this;return O(function*(){if(typeof document>"u")throw new Error("Browser downloads are not supported in this environment since `document` is not present");const r=ds.join(e.weightData),a=window.URL.createObjectURL(new Blob([r],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const i=Fm(e,[{paths:["./"+s.weightDataFileName],weights:e.weightSpecs}]),l=window.URL.createObjectURL(new Blob([JSON.stringify(i)],{type:"application/json"})),u=null==s.modelJsonAnchor?document.createElement("a"):s.modelJsonAnchor;if(u.download=s.modelJsonFileName,u.href=l,yield Zm(()=>u.dispatchEvent(new MouseEvent("click"))),null!=e.weightData){const c=null==s.weightDataAnchor?document.createElement("a"):s.weightDataAnchor;c.download=s.weightDataFileName,c.href=a,yield Zm(()=>c.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:Ul(e)}}})()}}return n.URL_SCHEME="downloads://",n})();function Jm(n,t,e,s){(function o(l){S(null!=l&&Array.isArray(l)&&l.length>0,()=>"promises must be a none empty array")})(n),function i(l,u){S(l>=0&&l<=1,()=>`Progress fraction must be in range [0, 1], but got startFraction ${l}`),S(u>=0&&u<=1,()=>`Progress fraction must be in range [0, 1], but got endFraction ${u}`),S(u>=l,()=>`startFraction must be no more than endFraction, but got startFraction ${l} and endFraction ${u}`)}(e=e??0,s=s??1);let r=0;return Promise.all(n.map(l=>(l.then(u=>{const c=e+ ++r/n.length*(s-e);return t(c),u}),l)))}function Qm(n,t){return jh.apply(this,arguments)}function jh(){return(jh=O(function*(n,t){null==t&&(t={});const e=null==t.fetchFunc?M().platform.fetch:t.fetchFunc,s=n.map(h=>e(h,t.requestInit,{isBinary:!0})),i=(null==t.onProgress?yield Promise.all(s):yield Jm(s,t.onProgress,0,.5)).map(h=>h.arrayBuffer());return null==t.onProgress?yield Promise.all(i):yield Jm(i,t.onProgress,.5,1)})).apply(this,arguments)}St.registerSaveRouter(n=>M().getBool("IS_BROWSER")&&!Array.isArray(n)&&n.startsWith(Hh.URL_SCHEME)?function nS(n="model"){return new Hh(n)}(n.slice(Hh.URL_SCHEME.length)):null);let eg=(()=>{class n{constructor(e,s){if(this.DEFAULT_METHOD="POST",null==s&&(s={}),this.weightPathPrefix=s.weightPathPrefix,this.weightUrlConverter=s.weightUrlConverter,null!=s.fetchFunc?(S("function"==typeof s.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=s.fetchFunc):this.fetch=M().platform.fetch,S(null!=e&&e.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(e)&&S(2===e.length,()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`),this.path=e,null!=s.requestInit&&null!=s.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=s.requestInit||{},this.loadOptions=s}save(e){var s=this;return O(function*(){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const r=Object.assign({method:s.DEFAULT_METHOD},s.requestInit);r.body=new FormData;const o=Fm(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);if(r.body.append("model.json",new Blob([JSON.stringify(o)],{type:"application/json"}),"model.json"),null!=e.weightData){const l=ds.join(e.weightData);r.body.append("model.weights.bin",new Blob([l],{type:"application/octet-stream"}),"model.weights.bin")}const i=yield s.fetch(s.path,r);if(i.ok)return{modelArtifactsInfo:Ul(e),responses:[i]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${i.status}.`)})()}loadModelJSON(){var e=this;return O(function*(){const s=yield e.fetch(e.path,e.requestInit);if(!s.ok)throw new Error(`Request to ${e.path} failed with status code ${s.status}. Please verify this URL points to the model JSON of the model to load.`);let r;try{r=yield s.json()}catch{let l=`Failed to parse model JSON of response from ${e.path}.`;throw e.path.endsWith(".pb")?l+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":l+=" Please make sure the server is serving valid JSON for this request.",new Error(l)}if(null==r.modelTopology&&null==r.weightsManifest)throw new Error(`The JSON from HTTP path ${e.path} contains neither model topology or manifest for weights.`);return r})()}load(){var e=this;return O(function*(){return e.loadOptions.streamWeights?e.loadStream():Om(yield e.loadModelJSON(),r=>e.loadWeights(r))})()}loadStream(){var e=this;return O(function*(){const s=yield e.loadModelJSON(),r=yield e.getWeightUrls(s.weightsManifest),a=Pm(s.weightsManifest);return Object.assign(Object.assign({},s),{weightSpecs:a,getWeightStream:()=>function sS(n,t){var e;const s=null==t.fetchFunc?M().platform.fetch:t.fetchFunc;let a,r=0;return null===(e=t.onProgress)||void 0===e||e.call(t,0),new ReadableStream({pull:(o=O(function*(i){for(var l;r<n.length;){a||(a=(yield s(n[r],t.requestInit,{isBinary:!0})).body.getReader());const{done:u,value:c}=yield a.read();if(!u)return void i.enqueue(c);r++,a=void 0,null===(l=t.onProgress)||void 0===l||l.call(t,r/n.length)}i.close()}),function(l){return o.apply(this,arguments)})});var o}(r,e.loadOptions)})})()}getWeightUrls(e){var s=this;return O(function*(){const r=Array.isArray(s.path)?s.path[1]:s.path,[a,o]=function iS(n){const t=n.lastIndexOf("/"),e=n.lastIndexOf("?");return[n.substring(0,t)+"/",e>t?n.substring(e):""]}(r),i=s.weightPathPrefix||a,l=[],u=[];for(const c of e)for(const h of c.paths)null!=s.weightUrlConverter?u.push(s.weightUrlConverter(h)):l.push(i+h+o);return s.weightUrlConverter&&l.push(...yield Promise.all(u)),l})()}loadWeights(e){var s=this;return O(function*(){const r=yield s.getWeightUrls(e);return[Pm(e),yield Qm(r,s.loadOptions)]})()}}return n.URL_SCHEME_REGEX=/^https?:\/\//,n})();function tg(n){return null!=n.match(eg.URL_SCHEME_REGEX)}const ng=(n,t)=>{if(typeof fetch>"u"&&(null==t||null==t.fetchFunc))return null;{let e=!0;if(e=Array.isArray(n)?n.every(s=>tg(s)):tg(n),e)return sg(n,t)}return null};function sg(n,t){return new eg(n,t)}St.registerSaveRouter(ng),St.registerLoadRouter(ng);const Xh=-2,hS=-1;function Yh(n,t,e){const s=n.shape.length;S(s===t.length,()=>`Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`),S(s===e.length,()=>`Error in slice${s}D: Length of size ${e} must match the rank of the array (${s}).`);for(let r=0;r<s;++r)S(t[r]+e[r]<=n.shape[r],()=>`Error in slice${s}D: begin[${r}] + size[${r}] (${t[r]+e[r]}) would overflow input.shape[${r}] (${n.shape[r]})`)}function dS(n){const t=[];let e=0;for(;n>0;)1&n&&t.push(e),n/=2,e++;return t}function Zh(n,t,e){const s=[];for(let r=0;r<n.length;r++)s[r]=Math.ceil((t[r]-n[r])/e[r]);return s}function ag(n,t,e,s){const r=[...n];for(let a=r.length;a<s.length;a++)r.push(1);for(let a=0;a<e;a++)0===a?r[t]=1:(r.splice(t,0,1),r.pop());return r}function og(n,t,e){return e<=n?e:e-(t-1)}function ig(n,t){const e=[];for(let s=0;s<n;s++)e.push(t+s);return e}function pS(n,t,e,s,r,a,o,i,l){const u=n.length;let c=new Array(u),h=new Array(u),d=new Array(u);if(t.length&&e>0){const p=t[0],f=e+1;c=lg(o,p,f,s,n),h=ug(i,p,f,r,n),d=ag(a,p,f,n)}else for(let p=0;p<u;p++)c[p]=hg(o,s,a,n,p,l),h[p]=dg(i,r,a,n,p,l),d[p]=cg(a,p,l);return{begin:c,end:h,strides:d}}function lg(n,t,e,s,r){const a=[...r],o=ig(e,t);for(let i=0;i<a.length;i++)if(o.indexOf(i)>-1)a[i]=0;else{const l=og(t,e,i);let u=s[l];n&1<<l&&(u=0),a[i]=u}return a}function ug(n,t,e,s,r){const a=[...r],o=ig(e,t);for(let i=0;i<a.length;i++)if(o.indexOf(i)>-1)a[i]=Number.MAX_SAFE_INTEGER;else{const l=og(t,e,i);let u=s[l];n&1<<l&&(u=Number.MAX_SAFE_INTEGER),a[i]=u}for(let i=0;i<a.length;i++)a[i]<0&&(a[i]+=r[i]),a[i]=qe(0,a[i],r[i]);return a}function cg(n,t,e){let s=n[t];return(e&1<<t||null==s)&&(s=1),s}function hg(n,t,e,s,r,a){let o=t[r];(n&1<<r||a&1<<r||null==o)&&(o=(e[r]||1)>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=s[r];return o<0&&(o+=l),o=qe(0,o,l-1),o}function dg(n,t,e,s,r,a){let o=t[r];const i=e[r]||1;(n&1<<r||a&1<<r||null==o)&&(o=i>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=s[r];return o<0&&(o+=l),o=i>0?qe(0,o,l):qe(-1,o,l-1),o}function Jh(n,t,e){let s=e.length;for(let r=0;r<e.length;r++)if(e[r]>1){s=r;break}for(let r=s+1;r<e.length;r++)if(t[r]>0||e[r]!==n[r])return!1;return!0}function Qh(n,t){let e=n.length>0?n[n.length-1]:1;for(let s=0;s<n.length-1;s++)e+=n[s]*t[s];return e}function ql(n,t,e){let s;const r=n.shape.length;let a;return s="number"==typeof t?[t,...new Array(r-1).fill(0)]:t.length<r?t.concat(new Array(r-t.length).fill(0)):t.slice(),s.forEach(o=>{S(-1!==o,()=>"slice() does not support negative begin indexing.")}),a=null==e?new Array(r).fill(-1):"number"==typeof e?[e,...new Array(r-1).fill(-1)]:e.length<r?e.concat(new Array(r-e.length).fill(-1)):e,a=a.map((o,i)=>o>=0?o:(S(-1===o,()=>`Negative size values should be exactly -1 but got ${o} for the slice() size at index ${i}.`),n.shape[i]-s[i])),[s,a]}function ed(n,t,e,s,r,a,o,i,l){let u;if(null==s?(u=new Array(t.length),u.fill(1)):u=s,null!=o&&o&o-1)throw new Error("Multiple ellipses in slice is not allowed.");let c=!1;const h={dims:u.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:e.slice(),strides:u.slice(),beginMask:r,endMask:a,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:l};for(let b=0;b<h.dims;b++)c&&1<<b&i&&h.numAddAxisAfterEllipsis++,1<<b&o&&(c=!0);c||(h.ellipsisMask|=1<<h.dims,h.dims++);const d={dims:n.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function fS(n,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let e=0;t.beginValid=null!=n.begin,t.endValid=null!=n.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let s=0;s<n.dims;s++)if(1<<s&n.ellipsisMask){const r=Math.min(t.dims-(n.dims-s)+1+n.numAddAxisAfterEllipsis,t.dims);for(;e<r;e++)t.begin[e]=0,t.end[e]=0,t.strides[e]=1,t.beginMask|=1<<e,t.endMask|=1<<e,t.finalShapeGatherIndices.push(e),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[e]=s}else if(1<<s&n.newAxisMask)t.finalShapeGatherIndices.push(Xh),t.finalShapeGatherIndicesSparse.push(-1);else{if(e===t.begin.length)throw Error(`Index out of range using input dim ${e}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=n.begin&&(t.begin[e]=n.begin[s]),null!=n.end&&(t.end[e]=n.end[s]),t.strides[e]=n.strides[s],n.beginMask&1<<s&&(t.beginMask|=1<<e),n.endMask&1<<s&&(t.endMask|=1<<e),n.shrinkAxisMask&1<<s?(t.finalShapeGatherIndices.push(hS),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<e):(t.finalShapeGatherIndices.push(e),t.finalShapeGatherIndicesSparse.push(s)),t.inputShapeGatherIndicesSparse[e]=s,e++}}(h,d);let p=!0,f=!0,g=!0;const m=[],y=[];for(let b=0;b<n.length;++b){if(0===d.strides[b])throw Error(`strides[${b}] must be non-zero`);const w=!!(d.shrinkAxisMask&1<<b),v=n[b];if(-1===v){m.push(w?1:-1);continue}const I=[d.beginMask&1<<b,d.endMask&1<<b],N=[d.strides[b]>0?0:-1,d.strides[b]>0?v:v-1];if(w&&d.strides[b]<=0)throw Error("only stride 1 allowed on non-range indexing.");g=g&&1===d.strides[b];const k=!!(d.beginMask&1<<b&&d.endMask&1<<b);if(d.beginValid&&d.endValid){if(w){const B=d.begin[b]<0?v+d.begin[b]:d.begin[b];if(d.begin[b]=B,d.end[b]=d.begin[b]+1,B<0||B>=v)throw Error(`slice index ${d.begin[b]} of dimension ${b} out of bounds.`)}else d.begin[b]=pg(d.begin[b],0,d.strides[b],v,I,N),d.end[b]=pg(d.end[b],1,d.strides[b],v,I,N);const P=1===d.strides[b]&&0===d.begin[b]&&d.end[b]===v;p=p&&P,f=f&&(0===b&&1===d.strides[b]||P)}else p=p&&1===d.strides[b]&&k,f=f&&(0===b&&1===d.strides[b]||k);let _,$=!1;if(d.beginValid&&d.endValid?(_=d.end[b]-d.begin[b],$=!0):w?(_=1,$=!0):k&&v>=0&&(_=d.strides[b]<0?-v:v,$=!0),$){let P;P=0===_||_<0!=d.strides[b]<0?0:Math.trunc(_/d.strides[b])+(_%d.strides[b]!=0?1:0),m.push(P)}else m.push(-1)}for(let b=0;b<d.finalShapeGatherIndices.length;++b){const w=d.finalShapeGatherIndices[b];w>=0?y.push(m[w]):w===Xh&&y.push(1)}return{finalShapeSparse:y.filter((b,w)=>d.finalShapeGatherIndices[w]!==Xh),finalShape:y,isIdentity:p,sliceDim0:f,isSimpleSlice:g,begin:d.begin,end:d.end,strides:d.strides}}function pg(n,t,e,s,r,a){if(r[t])return e>0?a[t]:a[t+1&1];{const o=n<0?s+n:n;return o<a[0]?a[0]:o>a[1]?a[1]:o}}const fg=D({all_:function gS(n,t=null,e=!1){const r={x:C(n,"x","all","bool")};return R.runKernel("All",r,{axis:t,keepDims:e})}}),td=D({any_:function yS(n,t=null,e=!1){const r={x:C(n,"x","any","bool")};return R.runKernel("Any",r,{axis:t,keepDims:e})}}),Ho=D({argMax_:function xS(n,t=0){const s={x:C(n,"x","argMax")};return R.runKernel(Fi,s,{axis:t})}});function jo(n,t,e,s,r="NHWC",a){return Kt(n,[...t,n[3]],e,a,s,null,null,Ds(r))}function Gn(n,t,e,s,r,a,o="channelsLast"){const[i,l]=qo(t);let u;if("channelsLast"===o)u=[i,l,n[3],n[3]];else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);u=[i,l,n[1],n[1]]}return Kt(n,u,e,s,r,a,!1,o)}function Rs(n,t,e,s,r,a,o="NDHWC"){const[i,l,u]=sd(t);let c,h;if("NDHWC"===o)h="channelsLast",c=[i,l,u,n[4],n[4]];else{if("NCDHW"!==o)throw new Error(`Unknown dataFormat ${o}`);h="channelsFirst",c=[i,l,u,n[1],n[1]]}return tr(n,c,e,s,r,!1,h,a)}function Kt(n,t,e,s,r,a,o=!1,i="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h]=n;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,h,u,c]=n}const[d,p,,f]=t,[g,m]=qo(e),[y,x]=qo(s),b=fa(d,y),w=fa(p,x),{padInfo:v,outHeight:I,outWidth:N}=function vS(n,t,e,s,r,a,o,i,l){let u,c,h;if("number"==typeof n){u={top:n,bottom:n,left:n,right:n,type:0===n?"VALID":"NUMBER"};const p=function bS(n,t,e,s,r){null==s&&(s=nd(n,t,e));const o=n[1];return[Ko((n[0]-t+2*s)/e+1,r),Ko((o-t+2*s)/e+1,r)]}([t,e],a,s,n,i);c=p[0],h=p[1]}else if("same"===n){c=Math.ceil(t/s),h=Math.ceil(e/r);const d=Math.max(0,(c-1)*s+a-t),p=Math.max(0,(h-1)*r+o-e),f=Math.floor(d/2),g=d-f,m=Math.floor(p/2);u={top:f,bottom:g,left:m,right:p-m,type:"SAME"}}else if("valid"===n)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/s),h=Math.ceil((e-o+1)/r);else{if("object"!=typeof n)throw Error(`Unknown padding parameter: ${n}`);{const d="channelsLast"===l?n[1][0]:n[2][0],p="channelsLast"===l?n[1][1]:n[2][1],f="channelsLast"===l?n[2][0]:n[3][0],g="channelsLast"===l?n[2][1]:n[3][1];u={top:d,bottom:p,left:f,right:g,type:0===d&&0===p&&0===f&&0===g?"VALID":"EXPLICIT"},c=Ko((t-a+d+p)/s+1,i),h=Ko((e-o+f+g)/r+1,i)}}return{padInfo:u,outHeight:c,outWidth:h}}(r,u,c,g,m,b,w,a,i),k=o?f*h:f;let _;return"channelsFirst"===i?_=[l,k,I,N]:"channelsLast"===i&&(_=[l,I,N,k]),{batchSize:l,dataFormat:i,inHeight:u,inWidth:c,inChannels:h,outHeight:I,outWidth:N,outChannels:k,padInfo:v,strideHeight:g,strideWidth:m,filterHeight:d,filterWidth:p,effectiveFilterHeight:b,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:x,inShape:n,outShape:_,filterShape:t}}function tr(n,t,e,s,r,a=!1,o="channelsLast",i){let[l,u,c,h,d]=[-1,-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,h,d]=n;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[l,d,u,c,h]=n}const[p,f,g,,m]=t,[y,x,b]=sd(e),[w,v,I]=sd(s),N=fa(p,w),k=fa(f,v),_=fa(g,I),{padInfo:$,outDepth:P,outHeight:B,outWidth:W}=function SS(n,t,e,s,r,a,o,i,l,u,c){let h,d,p,f;if("valid"===n&&(n=0),"number"==typeof n){h={top:n,bottom:n,left:n,right:n,front:n,back:n,type:0===n?"VALID":"NUMBER"};const m=function wS(n,t,e,s,r,a){null==r&&(r=nd(n,t[0],s[0]));const o=[0,0,0,e];for(let i=0;i<3;i++)n[i]+2*r>=t[i]&&(o[i]=Ko((n[i]-t[i]+2*r)/s[i]+1,a));return o}([t,e,s,1],[i,l,u],1,[r,a,o],n,c);d=m[0],p=m[1],f=m[2]}else{if("same"!==n)throw Error(`Unknown padding parameter: ${n}`);{d=Math.ceil(t/r),p=Math.ceil(e/a),f=Math.ceil(s/o);const g=(d-1)*r+i-t,m=(p-1)*a+l-e,y=(f-1)*o+u-s,x=Math.floor(g/2),b=g-x,w=Math.floor(m/2),v=m-w,I=Math.floor(y/2);h={top:w,bottom:v,left:I,right:y-I,front:x,back:b,type:"SAME"}}}return{padInfo:h,outDepth:d,outHeight:p,outWidth:f}}(r,u,c,h,y,x,b,N,k,_,i),U=a?m*d:m;let G;return"channelsFirst"===o?G=[l,U,P,B,W]:"channelsLast"===o&&(G=[l,P,B,W,U]),{batchSize:l,dataFormat:o,inDepth:u,inHeight:c,inWidth:h,inChannels:d,outDepth:P,outHeight:B,outWidth:W,outChannels:U,padInfo:$,strideDepth:y,strideHeight:x,strideWidth:b,filterDepth:p,filterHeight:f,filterWidth:g,effectiveFilterDepth:N,effectiveFilterHeight:k,effectiveFilterWidth:_,dilationDepth:w,dilationHeight:v,dilationWidth:I,inShape:n,outShape:G,filterShape:t}}function nd(n,t,e,s=1){const r=fa(t,s);return Math.floor((n[0]*(e-1)-e+r)/2)}function qo(n){return"number"==typeof n?[n,n,n]:2===n.length?[n[0],n[1],1]:n}function sd(n){return"number"==typeof n?[n,n,n]:n}function fa(n,t){return t<=1?n:n+(n-1)*(t-1)}function Ko(n,t){if(!t)return Math.trunc(n);switch(t){case"round":return Math.round(n);case"ceil":return Math.ceil(n);case"floor":return Math.floor(n);default:throw new Error(`Unknown roundingMode ${t}`)}}function nr(n){const[t,e,s]=qo(n);return 1===t&&1===e&&1===s}function en(n,t){return nr(n)||nr(t)}function Ar(n){return qo(n).every(t=>t>0)}function Ds(n){if("NHWC"===n)return"channelsLast";if("NCHW"===n)return"channelsFirst";throw new Error(`Unknown dataFormat ${n}`)}function mn(n,t,e){if(null!=e){if("string"==typeof t)throw Error(`Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`);if("number"==typeof t)S(Gt(t),()=>`Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`);else{if("object"!=typeof t)throw Error(`Error in ${n}: Unknown padding parameter: ${t}`);t.forEach(s=>{s.forEach(r=>{S(Gt(r),()=>`Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${r}.`)})})}}}const F=D({reshape_:function IS(n,t){const s={x:C(n,"x","reshape","string_or_numeric")};return R.runKernel(wl,s,{shape:t})}}),rd=D({avgPool_:function NS(n,t,e,s,r){const a=C(n,"x","avgPool","float32");S(en(e,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${e} and dilations '1'`);let i=a,l=!1;3===a.rank&&(l=!0,i=F(a,[1,a.shape[0],a.shape[1],a.shape[2]])),S(4===i.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`),mn("avgPool",s,r);let h=R.runKernel(Pi,{x:i},{filterSize:t,strides:e,pad:s,dimRoundingMode:r});return h=he(h,a.dtype),l?F(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),kS=D({avgPool3d_:function CS(n,t,e,s,r,a="NDHWC"){const o=C(n,"x","avgPool3d","float32");let i=o,l=!1;4===o.rank&&(l=!0,i=F(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),S(5===i.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`),S("NDHWC"===a,()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`),S("number"==typeof e&&e>0||Array.isArray(e)&&e[0]>0&&e[1]>0&&e[2]>0,()=>`Error in avgPool3d: Stride must be > 0, but got '${e}'`),mn("avgPool3d",s,r);let h=R.runKernel(Li,{x:i},{filterSize:t,strides:e,pad:s,dimRoundingMode:r,dataFormat:a});return h=he(h,i.dtype),l?F(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});function TS(n){let t;return t=0===n.rank||1===n.rank?F(n,[1,1,1,n.size]):2===n.rank?F(n,[1,1,n.shape[0],n.shape[1]]):3===n.rank?F(n,[1,n.shape[0],n.shape[1],n.shape[2]]):n,t}const Kl=D({batchNorm_:function _S(n,t,e,s,r,a){null==a&&(a=.001);const o=C(n,"x","batchNorm"),i=C(t,"mean","batchNorm"),l=C(e,"variance","batchNorm");let u,c;null!=r&&(u=C(r,"scale","batchNorm")),null!=s&&(c=C(s,"offset","batchNorm")),S(i.rank===l.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),S(null==c||i.rank===c.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),S(null==u||i.rank===u.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const d={x:TS(o),scale:u,offset:c,mean:i,variance:l},f=R.runKernel(Yi,d,{varianceEpsilon:a});return F(f,o.shape)}}),ES=D({batchNorm2d_:function $S(n,t,e,s,r,a){const o=C(n,"x","batchNorm"),i=C(t,"mean","batchNorm"),l=C(e,"variance","batchNorm");let u,c;return null!=r&&(u=C(r,"scale","batchNorm")),null!=s&&(c=C(s,"offset","batchNorm")),S(2===o.rank,()=>`Error in batchNorm2D: x must be rank 2 but got rank ${o.rank}.`),S(2===i.rank||1===i.rank,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`),S(2===l.rank||1===l.rank,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`),null!=u&&S(2===u.rank||1===u.rank,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`),null!=c&&S(2===c.rank||1===c.rank,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`),Kl(o,i,l,c,u,a)}}),RS=D({batchNorm3d_:function AS(n,t,e,s,r,a){const o=C(n,"x","batchNorm"),i=C(t,"mean","batchNorm"),l=C(e,"variance","batchNorm");let u,c;return null!=r&&(u=C(r,"scale","batchNorm")),null!=s&&(c=C(s,"offset","batchNorm")),S(3===o.rank,()=>`Error in batchNorm3D: x must be rank 3 but got rank ${o.rank}.`),S(3===i.rank||1===i.rank,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`),S(3===l.rank||1===l.rank,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`),null!=u&&S(3===u.rank||1===u.rank,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`),null!=c&&S(3===c.rank||1===c.rank,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`),Kl(o,i,l,c,u,a)}}),FS=D({batchNorm4d_:function DS(n,t,e,s,r,a){const o=C(n,"x","batchNorm"),i=C(t,"mean","batchNorm"),l=C(e,"variance","batchNorm");let u,c;return null!=r&&(u=C(r,"scale","batchNorm")),null!=s&&(c=C(s,"offset","batchNorm")),S(4===o.rank,()=>`Error in batchNorm4D: x must be rank 4 but got rank ${o.rank}.`),S(4===i.rank||1===i.rank,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`),S(4===l.rank||1===l.rank,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`),null!=u&&S(4===u.rank||1===u.rank,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`),null!=c&&S(4===c.rank||1===c.rank,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`),Kl(o,i,l,c,u,a)}}),Xo=D({broadcastTo_:function OS(n,t){let e=C(n,"broadcastTo","x");const s=e.shape;if(Es(t),t.length<e.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${e.rank}.`);if(t.length>e.rank){const u=e.shape.slice();for(;u.length<t.length;)u.unshift(1);e=F(e,u)}const r=e.shape,a=Array.from(t);for(let u=t.length-1;u>=0;u--)if(r[u]===t[u])a[u]=1;else if(1!==e.shape[u])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${t}].`);return 0===a.map((u,c)=>u>1?c:-1).filter(u=>u>=0).length?Er(e):R.runKernel(Vo,{x:e},{reps:a})}}),Rn=D({clipByValue_:function PS(n,t,e){const s=C(n,"x","clipByValue");return S(t<=e,()=>`Error in clip: min (${t}) must be less than or equal to max (${e}).`),t===e?Go(s.shape,t,s.dtype):R.runKernel(Ja,{x:s},{clipValueMin:t,clipValueMax:e})}}),un=D({concat_:function LS(n,t=0){S(n.length>=1,()=>"Pass at least one tensor to concat");const e=Cm(n,"tensors","concat","string_or_numeric");return"complex64"===e[0].dtype&&e.forEach(a=>{if("complex64"!==a.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${a.dtype}. `)}),1===e.length?Er(e[0]):R.runKernel(Bi,e,{axis:t})}}),MS=D({concat1d_:function VS(n){return un(n,0)}}),BS=D({concat2d_:function zS(n,t){return un(n,t)}}),US=D({concat3d_:function WS(n,t){return un(n,t)}}),HS=D({concat4d_:function GS(n,t){return un(n,t)}}),Rr=D({conv2d_:function jS(n,t,e,s,r="NHWC",a=[1,1],o){const i=C(n,"x","conv2d","float32"),l=C(t,"filter","conv2d","float32");let u=i,c=!1;3===i.rank&&(c=!0,u=F(i,[1,i.shape[0],i.shape[1],i.shape[2]])),S(4===u.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`),S(4===l.rank,()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`),mn("conv2d",s,o);const h="NHWC"===r?u.shape[3]:u.shape[1];S(h===l.shape[2],()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`),S(en(e,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${a}'`),S(Ar(a),()=>"Error in conv2D: Dilated rates should be larger than 0."),S(Ar(e),()=>"Error in conv2D: Strides should be larger than 0.");const f=R.runKernel(Wi,{x:u,filter:l},{strides:e,pad:s,dataFormat:r,dilations:a,dimRoundingMode:o});return c?F(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),mg=D({conv1d_:function qS(n,t,e,s,r="NWC",a=1,o){const i=C(n,"x","conv1d"),l=C(t,"filter","conv1d");let u=i,c=!1;2===i.rank&&(c=!0,u=F(i,[1,i.shape[0],i.shape[1]])),S(3===u.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`),S(3===l.rank,()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`),mn("conv1d",s,o),S(u.shape[2]===l.shape[1],()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`),S(en(e,a),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${e} and dilation '${a}'`),S(Ar(a),()=>"Error in conv1D: Dilated rates should be larger than 0."),S(Ar(e),()=>"Error in conv1D: Stride should be larger than 0."),S("NWC"===r,()=>`Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`);const h=F(l,[1,l.shape[0],l.shape[1],l.shape[2]]),d=F(u,[u.shape[0],1,u.shape[1],u.shape[2]]),m=Rr(d,h,[1,e],s,"NHWC",[1,a],o);return F(m,c?[m.shape[2],m.shape[3]]:[m.shape[0],m.shape[2],m.shape[3]])}}),ad=D({conv2DBackpropInput_:function KS(n,t,e,s,r,a="NHWC",o){S(n.length===t.rank,()=>`Length of inShape (${n.length}) and rank of dy (${t.rank}) must match`);let i=n,l=t,u=!1;3===t.rank&&(u=!0,l=F(t,[1,t.shape[0],t.shape[1],t.shape[2]]),i=[1,n[0],n[1],n[2]]),S(4===i.length,()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`),S(4===l.rank,()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`),S(4===e.rank,()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${e.rank}`);const c="NHWC"===a?i[3]:i[1],h="NHWC"===a?l.shape[3]:l.shape[1];S(c===e.shape[2],()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${e.shape[2]}.`),S(h===e.shape[3],()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${e.shape[3]}.`),mn("conv2dDerInput",r,o);const f=R.runKernel(Ui,{dy:l,filter:e},{strides:s,pad:r,dataFormat:a,dimRoundingMode:o,inputShape:i});return u?F(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),gg=D({conv2dTranspose_:function XS(n,t,e,s,r,a){const o=C(n,"x","conv2dTranspose"),i=C(t,"filter","conv2dTranspose");return ad(e,o,i,s,r,"NHWC",a)}}),ZS=D({conv3d_:function YS(n,t,e,s,r="NDHWC",a=[1,1,1]){const o=C(n,"x","conv3d"),i=C(t,"filter","conv3d");let l=o,u=!1;4===o.rank&&(u=!0,l=F(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),S(5===l.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`),S(5===i.rank,()=>`Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`),S(l.shape[4]===i.shape[3],()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${i.shape[3]}.`),S(en(e,a),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${e} and dilations '${a}'`),S("NDHWC"===r,()=>`Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`),S(Ar(a),()=>"Error in conv3D: Dilated rates should be larger than 0."),S(Ar(e),()=>"Error in conv3D: Strides should be larger than 0.");const d=R.runKernel(Gi,{x:l,filter:i},{strides:e,pad:s,dataFormat:r,dilations:a});return u?F(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),yg=D({conv3DBackpropInput_:function JS(n,t,e,s,r){S(n.length===t.rank,()=>`Length of inShape (${n.length}) and rank of dy (${t.rank}) must match`);let a=n,o=t,i=!1;4===t.rank&&(i=!0,o=F(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,n[0],n[1],n[2],n[3]]);const l=a[4],u=o.shape[4];S(5===a.length,()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`),S(5===o.rank,()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${o.rank}`),S(5===e.rank,()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${e.rank}`),S(l===e.shape[3],()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${e.shape[3]}.`),S(u===e.shape[4],()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${e.shape[4]}.`);const d=R.runKernel(Fc,{dy:o,filter:e},{pad:r,strides:s,inputShape:a});return i?F(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),eI=D({conv3dTranspose_:function QS(n,t,e,s,r){const a=C(n,"x","conv3dTranspose"),o=C(t,"filter","conv3dTranspose");return yg(e,a,o,s,r)}}),xg=D({denseBincount_:function tI(n,t,e,s=!1){const r=C(n,"x","denseBincount"),a=C(t,"weights","denseBincount");return S("int32"===r.dtype,()=>`Error in denseBincount: input dtype must be int32, but got ${r.dtype}`),S(r.rank<=2,()=>`Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`),S(e>=0,()=>`size must be non-negative, but got ${e}.`),S(a.size===r.size||0===a.size,()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: ${a.shape}.`),R.runKernel(Lc,{x:r,weights:a},{size:e,binaryOutput:s})}}),Xl=D({depthwiseConv2d_:function nI(n,t,e,s,r="NHWC",a=[1,1],o){const i=C(n,"x","depthwiseConv2d","float32"),l=C(t,"filter","depthwiseConv2d","float32");let u=i,c=!1;3===i.rank&&(c=!0,u=F(i,[1,i.shape[0],i.shape[1],i.shape[2]])),S(4===u.rank,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`),S(4===l.rank,()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`);const h="NHWC"===r?u.shape[3]:u.shape[1];S(h===l.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${h}) must match the inChannels dimension in filter ${l.shape[2]}.`),mn("depthwiseConv2d",s,o);const f=R.runKernel(ji,{x:u,filter:l},{strides:e,pad:s,dataFormat:r,dilations:a,dimRoundingMode:o});return c?F(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),Yl=D({elu_:function sI(n){const e={x:C(n,"x","elu","float32")};return R.runKernel(no,e)}}),gs=D({equal_:function rI(n,t){let e=C(n,"a","equal","string_or_numeric"),s=C(t,"b","equal","string_or_numeric");return[e,s]=kt(e,s),Pe(e.shape,s.shape),R.runKernel(Ki,{a:e,b:s})}}),Dn=D({exp_:function aI(n){const e={x:C(n,"x","exp")};return R.runKernel(ro,e)}}),Sn=D({expandDims_:function oI(n,t=0){const e=C(n,"x","expandDims","string_or_numeric");return S(t<=e.rank,()=>"Axis must be <= rank of the tensor"),R.runKernel(Xi,{input:e},{dim:t})}}),ts=D({tile_:function iI(n,t){const e=C(n,"x","tile","string_or_numeric");return S(e.rank===t.length,()=>`Error in transpose: rank of input ${e.rank} must match length of reps ${t}.`),R.runKernel(Vo,{x:e},{reps:t})}}),bg=D({eye_:function lI(n,t,e,s="float32"){null==t&&(t=n);const r=Ge([n,t],s),a=n<=t?n:t;for(let i=0;i<a;++i)r.set(1,i,i);const o=F(r.toTensor(),[n,t]);if(null==e)return o;if(1===e.length)return ts(Sn(o,0),[e[0],1,1]);if(2===e.length)return ts(Sn(Sn(o,0),0),[e[0],e[1],1,1]);if(3===e.length)return ts(Sn(Sn(Sn(o,0),0),0),[e[0],e[1],e[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${e.length}D.`)}}),Zl=D({floor_:function uI(n){const e={x:C(n,"x","floor","float32")};return R.runKernel(oo,e)}}),Yo=D({gather_:function cI(n,t,e=0,s=0){const r=C(n,"x","gather"),a=C(t,"indices","gather","int32");return R.runKernel(Zi,{x:r,indices:a},{axis:e,batchDims:s})}}),Fn=D({greater_:function hI(n,t){let e=C(n,"a","greater","string_or_numeric"),s=C(t,"b","greater","string_or_numeric");return[e,s]=kt(e,s),Pe(e.shape,s.shape),R.runKernel(Ji,{a:e,b:s})}}),Dr=D({greaterEqual_:function dI(n,t){let e=C(n,"a","greaterEqual","string_or_numeric"),s=C(t,"b","greaterEqual","string_or_numeric");return[e,s]=kt(e,s),Pe(e.shape,s.shape),R.runKernel(uo,{a:e,b:s})}}),od=D({leakyRelu_:function pI(n,t=.2){const s={x:C(n,"x","leakyRelu")};return R.runKernel(Qi,s,{alpha:t})}}),Hn=D({log_:function fI(n){const e={x:C(n,"x","log","float32")};return R.runKernel(mo,e)}}),id=D({log1p_:function mI(n){const e={x:C(n,"x","log1p")};return R.runKernel(go,e)}}),ns=D({max_:function gI(n,t=null,e=!1){const r={x:C(n,"x","max")};return R.runKernel(ol,r,{reductionIndices:t,keepDims:e})}}),be=D({sum_:function yI(n,t=null,e=!1){let s=C(n,"x","sum");return"bool"===s.dtype&&(s=he(s,"int32")),R.runKernel(kl,{x:s},{axis:t,keepDims:e})}}),wg=D({logSoftmax_:function xI(n,t=-1){const e=C(n,"logits","logSoftmax");if(-1===t&&(t=e.rank-1),t!==e.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and axis was ${t}`);return As((r,a)=>{const i=ns(r,t,!0),l=ge(r,i),u=ge(he(l,"float32"),Hn(be(Dn(l),t,!0)));return a([u]),{value:u,gradFunc:(h,d)=>{const[p]=d,g=Dn(p);return ge(h,E(be(h,t,!0),g))}}})(e)}});function ld(n,t){for(let e=0;e<n.length;++e)if(n[n.length-e-1]!==t-1-e)return!1;return!0}function vg(n,t,e){const s=n.length+t.length,r=[];let a=0,o=0;for(let i=0;i<s;i++)-1===e.indexOf(i)?r.push(n[a++]):r.push(t[o++]);return r}function Xt(n,t){const e=[],s=n.length;for(let a=0;a<s;a++)-1===t.indexOf(a)&&e.push(n[a]);return[e,t.map(a=>n[a])]}function $t(n,t){return vg(n,t.map(s=>1),t)}function tn(n,t,e){S(ld(t,e),()=>`${n} supports only inner-most axes for now. Got axes ${t} and rank-${e} input.`)}function It(n,t){if(ld(n,t))return null;const e=[];for(let s=0;s<t;++s)-1===n.indexOf(s)&&e.push(s);return n.forEach(s=>e.push(s)),e}function sr(n){return n.map((t,e)=>[e,t]).sort((t,e)=>t[1]-e[1]).map(t=>t[0])}function Et(n,t){const e=[];for(let s=t-n;s<t;++s)e.push(s);return e}const ud=D({logSumExp_:function bI(n,t=null,e=!1){const s=C(n,"x","logSumExp"),r=Ue(t,s.shape),a=ns(s,r,!0),o=ge(s,a),i=Dn(o),l=be(i,r),u=Hn(l),c=ne(F(a,u.shape),u);if(e){const h=$t(c.shape,r);return F(c,h)}return c}}),Fs=D({logicalAnd_:function wI(n,t){const e=C(n,"a","logicalAnd","bool"),s=C(t,"b","logicalAnd","bool");return Pe(e.shape,s.shape),R.runKernel(nl,{a:e,b:s})}}),et=D({matMul_:function vI(n,t,e=!1,s=!1){let r=C(n,"a","matMul"),a=C(t,"b","matMul");return[r,a]=kt(r,a),R.runKernel(Vi,{a:r,b:a},{transposeA:e,transposeB:s})}}),cd=D({maxPool_:function SI(n,t,e,s,r){const a=C(n,"x","maxPool");let i=a,l=!1;3===a.rank&&(l=!0,i=F(a,[1,a.shape[0],a.shape[1],a.shape[2]])),S(4===i.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`),S(en(e,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${e} and dilations '1'`),mn("maxPool",s,r);const h=R.runKernel(il,{x:i},{filterSize:t,strides:e,pad:s,dimRoundingMode:r});return l?F(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),NI=D({maxPool3d_:function II(n,t=[1,1,1],e,s,r,a="NDHWC"){const o=C(n,"x","maxPool3d");let i=o,l=!1;4===o.rank&&(l=!0,i=F(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),S(5===i.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`),S("NDHWC"===a,()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`),mn("maxPool3d",s,r);const h=R.runKernel(ll,{x:i},{filterSize:t,strides:e,pad:s,dimRoundingMode:r,dataFormat:a});return l?F(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),At=D({mean_:function CI(n,t=null,e=!1){const r={x:C(n,"x","mean")};return R.runKernel(ul,r,{axis:t,keepDims:e})}}),Jl=D({min_:function kI(n,t=null,e=!1){const r={x:C(n,"x","min")};return R.runKernel(cl,r,{axis:t,keepDims:e})}}),ma=D({minimum_:function TI(n,t){let e=C(n,"a","minimum"),s=C(t,"b","minimum");return[e,s]=kt(e,s),"bool"===e.dtype&&(e=he(e,"int32"),s=he(s,"int32")),Pe(e.shape,s.shape),R.runKernel(xo,{a:e,b:s})}}),hd=D({moments_:function _I(n,t=null,e=!1){const s=Ue(t,(n=C(n,"x","moments")).shape),r=At(n,s,e);let a=r.shape;e||(a=$t(r.shape,s));const o=dt(ge(he(n,"float32"),F(r,a)));return{mean:r,variance:At(o,s,e)}}}),yt=D({neg_:function $I(n){const e={x:C(n,"x","neg")};return R.runKernel(dl,e)}}),Zo=D({notEqual_:function EI(n,t){let e=C(n,"a","notEqual","string_or_numeric"),s=C(t,"b","notEqual","string_or_numeric");return[e,s]=kt(e,s),Pe(e.shape,s.shape),R.runKernel(pl,{a:e,b:s})}}),Sg=D({oneHot_:function AI(n,t,e=1,s=0,r="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const o={indices:C(n,"indices","oneHot","int32")};return R.runKernel(ml,o,{dtype:r,depth:t,onValue:e,offValue:s})}});function Yt(n,t="float32"){if(Es(n),"complex64"===t){const s=Yt(n,"float32"),r=Yt(n,"float32");return kr(s,r)}const e=ln(L(n),t);return R.makeTensor(e,n,t)}function Os(n,t="float32"){if(Es(n),"complex64"===t){const s=Os(n,"float32"),r=Yt(n,"float32");return kr(s,r)}const e=wc(L(n),t);return R.makeTensor(e,n,t)}const jn=D({onesLike_:function RI(n){const e={x:C(n,"x","onesLike")};return R.runKernel(fl,e)}}),dd=D({pad_:function DI(n,t,e=0){const s=C(n,"x","pad");if(0===s.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");return R.runKernel(yl,{x:s},{paddings:t,constantValue:e})}}),pd=D({prelu_:function FI(n,t){const e=C(n,"x","prelu"),s=C(t,"alpha","prelu");return R.runKernel(xl,{x:e,alpha:s})}});var fd=te(9128);class md{constructor(t,e,s,r,a){this.mean=t,this.stdDev=e,this.dtype=s,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const o=a||Math.random();this.random=fd.alea(o.toString())}nextValue(){if(!isNaN(this.nextVal)){const r=this.nextVal;return this.nextVal=NaN,r}let t,e,s=!1;for(;!s;){let r,a,o;do{r=2*this.random()-1,a=2*this.random()-1,o=r*r+a*a}while(o>=1||0===o);const i=Math.sqrt(-2*Math.log(o)/o);t=this.mean+this.stdDev*r*i,e=this.mean+this.stdDev*a*i,(!this.truncated||this.isValidTruncated(t))&&(s=!0)}return(!this.truncated||this.isValidTruncated(e))&&(this.nextVal=this.convertValue(e)),this.convertValue(t)}convertValue(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)}isValidTruncated(t){return t<=this.upper&&t>=this.lower}}class OI{constructor(t=0,e=1,s,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=t,this.range=e-t,this.dtype=s,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);this.random=fd.alea(r)}convertValue(t){return this.canReturnFloat()?t:Math.round(t)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const zI=D({randomNormal_:function MI(n,t=0,e=1,s,r){if(Es(n),null!=s&&"bool"===s)throw new Error(`Unsupported data type ${s}`);const a=new md(t,e,s,!1,r),o=Ge(n,s);for(let i=0;i<o.values.length;i++)o.values[i]=a.nextValue();return o.toTensor()}}),Jo=D({randomUniform_:function BI(n,t=0,e=1,s="float32",r){Es(n);const a=Ge(n,s),o=new OI(t,e,null,r);for(let i=0;i<a.values.length;i++)a.values[i]=o.nextValue();return a.toTensor()}});function Qo(n,t,e=1,s="float32"){if(0===e)throw new Error("Cannot have a step of zero");return R.runKernel(nh,{},{start:n,stop:t,step:e,dtype:s})}const Ps=D({relu_:function WI(n){const e={x:C(n,"x","relu")};return R.runKernel(Io,e)}}),Fr=D({reverse_:function UI(n,t){const s={x:C(n,"x","reverse")};return R.runKernel(Il,s,{dims:t})}}),Ig=D({selu_:function GI(n){const e={x:C(n,"x","selu")};return R.runKernel(To,e)}}),Ng=D({separableConv2d_:function HI(n,t,e,s,r,a=[1,1],o="NHWC"){const i=C(n,"x","separableConv2d"),l=C(t,"depthwiseFilter","separableConv2d"),u=C(e,"pointwiseFilter","separableConv2d");let c=i,h=!1;if(3===i.rank&&(h=!0,c=F(i,[1,i.shape[0],i.shape[1],i.shape[2]])),"NCHW"===o)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");S(4===c.rank,()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`),S(4===l.rank,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`),S(4===u.rank,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`),S(1===u.shape[0],()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`),S(1===u.shape[1],()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`);const d=l.shape[2],p=l.shape[3];S(u.shape[2]===d*p,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${d*p}, but got ${u.shape[2]}.`);const f=Xl(c,l,s,r,o,a),m=Rr(f,u,1,"valid",o);return h?F(m,[m.shape[1],m.shape[2],m.shape[3]]):m}}),ga=D({sigmoid_:function jI(n){const e={x:C(n,"x","sigmoid","float32")};return R.runKernel(Ao,e)}}),ot=D({slice_:function qI(n,t,e){const s=C(n,"x","slice","string_or_numeric");if(0===s.rank)throw new Error("Slicing scalar is not possible");return R.runKernel(Cl,{x:s},{begin:t,size:e})}}),yd=D({slice1d_:function KI(n,t,e){const s=C(n,"x","slice1d");return S(1===s.rank,()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`),ot(s,[t],[e])}}),Cg=D({slice2d_:function XI(n,t,e){const s=C(n,"x","slice2d");return S(2===s.rank,()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`),ot(s,t,e)}}),xd=D({slice3d_:function YI(n,t,e){const s=C(n,"x","slice3d");return S(3===s.rank,()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`),ot(s,t,e)}}),Ql=D({slice4d_:function ZI(n,t,e){const s=C(n,"x","slice4d");return S(4===s.rank,()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`),ot(s,t,e)}}),bd=D({softmax_:function JI(n,t=-1){const e=C(n,"logits","softmax","float32");if(-1===t&&(t=e.rank-1),t!==e.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and dim was ${t}`);return R.runKernel($l,{logits:e},{dim:t})}}),ei=D({softplus_:function QI(n){const e={x:C(n,"x","softplus")};return R.runKernel(Ro,e)}}),On=D({split_:function eN(n,t,e=0){const r={x:C(n,"x","split")};return R.runKernel(_l,r,{numOrSizeSplits:t,axis:e})}}),ti=D({squeeze_:function tN(n,t){const e=C(n,"x","squeeze","string_or_numeric");return F(e,Hs(e.shape,t).newShape)}}),Ls=D({stack_:function nN(n,t=0){const e=Cm(n,"tensors","stack","string_or_numeric");return S(e.length>=1,()=>"Pass at least one tensor to tf.stack"),e.length>0&&S(t<=e[0].rank,()=>"Axis must be <= rank of the tensor"),R.runKernel(gl,e,{axis:t})}}),wd=D({tanh_:function sN(n){const e={x:C(n,"x","tanh","float32")};return R.runKernel(Lo,e)}});function In(n,t){tt(n);const e=Bl(n,t);if(1!==e.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Wl(n,null,e,t)}const kg=D({truncatedNormal_:function rN(n,t=0,e=1,s,r){if(Es(n),null!=s&&"bool"===s)throw new Error("Unsupported data type $ { dtype }");const a=new md(t,e,s,!0,r),o=Ge(n,s);for(let i=0;i<o.values.length;i++)o.values[i]=a.nextValue();return o.toTensor()}}),Or=D({unstack_:function aN(n,t=0){const e=C(n,"x","unstack","string_or_numeric");return S(t>=-e.shape.length&&t<e.shape.length,()=>`Axis = ${t} is not in [-${e.shape.length}, ${e.shape.length})`),R.runKernel(Al,{value:e},{axis:t})}}),gn=D({where_:function iN(n,t,e){const s=C(t,"a","where"),r=C(e,"b","where"),a=C(n,"condition","where","bool"),o=Pe(Pe(a.shape,s.shape),r.shape),i=Xo(a,o),l=Xo(s,o),u=Xo(r,o);return R.runKernel(Nl,{condition:i,t:l,e:u})}}),vd=D({imag_:function lN(n){const e={input:C(n,"input","imag")};return R.runKernel(Xc,e)}}),eu=D({real_:function uN(n){const e={input:C(n,"input","real")};return R.runKernel(sh,e)}}),Ye=D({transpose_:function cN(n,t,e){const s=C(n,"x","transpose");if(null==t&&(t=s.shape.map((o,i)=>i).reverse()),S(s.rank===t.length,()=>`Error in transpose: rank of input ${s.rank} must match length of perm ${t}.`),t.forEach(o=>{S(o>=0&&o<s.rank,()=>`All entries in 'perm' must be between 0 and ${s.rank-1} but got ${t}`)}),s.rank<=1)return s.clone();const r={x:s},a={perm:t};return"complex64"===s.dtype?z(()=>{let o=eu(s),i=vd(s);return o=R.runKernel(ra,{x:o},a),i=R.runKernel(ra,{x:i},a),e&&(i=yt(i)),kr(o,i)}):R.runKernel(ra,r,a)}}),pN=D({dropout_:function dN(n,t,e,s){const r=C(n,"x","dropout");if(S("float32"===r.dtype,()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`),S(t>=0&&t<1,()=>`rate must be a float in the range [0, 1), but got ${t}.`),0===t)return n instanceof Pt?r.clone():r;const a=function hN(n,t){if(null==t)return n.shape.slice();if(ke(n.shape,t))return t;if(n.shape.length===t.length){const e=[];for(let s=0;s<n.shape.length;s++)e.push(null==t[s]&&null!=n.shape[s]?n.shape[s]:t[s]);return e}return t}(r,e),o=1-t,i=Ie(Zl(ne(Jo(a,0,1,"float32",s),o)),o);return E(r,i)}}),Sd=D({fft_:function fN(n){return S("complex64"===n.dtype,()=>`The dtype for tf.spectral.fft() must be complex64 but got ${n.dtype}.`),R.runKernel("FFT",{input:n})}}),Id=D({rfft_:function mN(n,t){S("float32"===n.dtype,()=>`The dtype for rfft() must be real value but got ${n.dtype}`);let e=n.shape[n.shape.length-1];const s=n.size/e;let r;if(null!=t&&t<e){const f=n.shape.map(m=>0),g=n.shape.map(m=>m);g[n.shape.length-1]=t,r=ot(n,f,g),e=t}else if(null!=t&&t>e){const f=n.shape.map(g=>g);f[n.shape.length-1]=t-e,r=un([n,Yt(f)],n.shape.length-1),e=t}else r=n;const a=Xe(r),o=F(kr(r,a),[s,e]),i=Sd(o),l=Math.floor(e/2)+1,u=eu(i),c=vd(i),h=On(u,[l,e-l],u.shape.length-1),d=On(c,[l,e-l],c.shape.length-1),p=r.shape.slice();return p[r.shape.length-1]=l,F(kr(h[0],d[0]),p)}}),tu=D({ifft_:function gN(n){return S("complex64"===n.dtype,()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${n.dtype}.`),R.runKernel(Kc,{input:n})}}),Tg=D({irfft_:function yN(n){const t=n.shape[n.shape.length-1],e=n.size/t;let s;if(t<=2){const r=F(n,[e,t]);s=tu(r)}else{const r=[e,2*(t-1)],a=F(eu(n),[e,t]),o=F(vd(n),[e,t]),i=Fr(ot(a,[0,1],[e,t-2]),1),l=E(Fr(ot(o,[0,1],[e,t-2]),1),Fe(-1)),u=un([a,i],1),c=un([o,l],1),h=F(kr(u,c),[r[0],r[1]]);s=tu(h)}if(s=eu(s),3===n.rank&&0!==n.shape[0]){const r=s,a=n.shape[0];s=F(s,[a,s.shape[0]/a,s.shape[1]]),r.dispose()}return s}}),Nd=D({conv2DBackpropFilter_:function xN(n,t,e,s,r,a="NHWC",o){let i=n;3===n.rank&&(i=F(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let l=t;3===l.rank&&(l=F(t,[1,t.shape[0],t.shape[1],t.shape[2]])),S(4===i.rank,()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`),S(4===l.rank,()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`),S(4===e.length,()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${e}.`);const u="NHWC"===a?i.shape[3]:i.shape[1],c="NHWC"===a?l.shape[3]:l.shape[1];return S(u===e[2],()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${e[2]}.`),S(c===e[3],()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${e[3]}).`),mn("conv2dDerFilter",r,o),R.runKernel(Rc,{x:i,dy:l},{strides:s,pad:r,dataFormat:a,dimRoundingMode:o,filterShape:e})}}),_g=D({relu6_:function bN(n){const e={x:C(n,"x","relu6")};return R.runKernel(No,e)}}),ni=D({step_:function wN(n,t=0){const s={x:C(n,"x","step")};return R.runKernel(Mo,s,{alpha:t})}});function nu(n,t,e){if(null==e||"linear"===e)return n;if("relu"===e)return E(n,ni(t));throw new Error(`Cannot compute gradient for fused activation ${e}.`)}function su(n,t){let e=t;const s=Lt(n.shape,t.shape);return s.length>0&&(e=be(e,s)),F(e,n.shape)}function ru(n,t,e,s){if("linear"===t)return n;if("relu"===t)return Ps(n);if("elu"===t)return Yl(n);if("relu6"===t)return _g(n);if("prelu"===t)return pd(n,e);if("leakyrelu"===t)return od(n,s);if("sigmoid"===t)return ga(n);throw new Error(`Unknown fused activation ${t}.`)}const au=(n,t)=>!(n>0)||"linear"===t,SN=D({fusedConv2d_:function vN({x:n,filter:t,strides:e,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===au(R.state.gradientDepth,l=l||"linear")){S("NHWC"===r,()=>`Error in fused conv2d: got dataFormat of ${r} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);let I=Rr(n,t,e,s,r,a,o);return null!=i&&(I=ne(I,i)),ru(I,l,u,c)}const h=C(n,"x","conv2d","float32"),d=C(t,"filter","conv2d","float32");let p=h,f=!1;3===h.rank&&(f=!0,p=F(h,[1,h.shape[0],h.shape[1],h.shape[2]])),S(4===p.rank,()=>`Error in fused conv2d: input must be rank 4, but got rank ${p.rank}.`),S(4===d.rank,()=>`Error in fused conv2d: filter must be rank 4, but got rank ${d.rank}.`),mn("fused conv2d",s,o);const g="NHWC"===r?p.shape[3]:p.shape[1];S(d.shape[2]===g,()=>`Error in conv2d: depth of input (${g}) must match input depth for filter ${d.shape[2]}.`),S(en(e,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${a}'`);const m=Kt(p.shape,d.shape,e,a,s,o);let y,x;if(null!=i&&(y=C(i,"bias","fused conv2d"),[y]=kt(y,h),"NHWC"===r?Pe(m.outShape,y.shape):(S(y.shape.length<=1,()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${y.shape.length}.`),S(0===y.shape.length||y.shape[0]===m.outChannels||1===y.shape[0],()=>`Error in fused conv2d: bias shape (${y.shape}) is not compatible with the number of output channels (${m.outChannels})`))),null!=u){const I=u.shape;if(S(I.length<=1||3===I.length,()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${I.length}.`),1===I.length)S(1===I[0]||I[0]===m.outChannels,()=>`Error in fused conv2d: PReLU activation weights (${I}) is not compatible with the number of output channels (${m.outChannels}).`);else if(3===I.length)try{Pe(I,m.outShape)}catch{throw Error(`Error in fused conv2d: PReLU activation weights (${I}) is not compatible with the output shape of the conv2d (${m.outShape}).`)}x=C(u,"prelu weights","fused conv2d")}const b=(I,N)=>{S("NHWC"===r,()=>`Error in gradient of fused conv2D: got dataFormat of ${r} but only NHWC is currently supported.`);const[k,_,$,P]=N,B=nu(I,$,l);S(nr(a),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`);const G=[ad(_.shape,B,k,e,s),Nd(_,B,k.shape,e,s)];if(null!=P){const q=su(P,B);G.push(q)}return G},w={x:p,filter:d,bias:y,preluActivationWeights:x},v={strides:e,pad:s,dataFormat:r,dilations:a,dimRoundingMode:o,activation:l,leakyreluAlpha:c};return null==i?As((N,k,_)=>{let $=R.runKernel(Ol,w,v);return _([k,N,$]),f&&($=F($,[$.shape[1],$.shape[2],$.shape[3]])),{value:$,gradFunc:b}})(p,d):As((N,k,_,$)=>{let P=R.runKernel(Ol,w,v);return $([k,N,P,_]),f&&(P=F(P,[P.shape[1],P.shape[2],P.shape[3]])),{value:P,gradFunc:b}})(p,d,y)}}),$g=D({depthwiseConv2dNativeBackpropFilter_:function IN(n,t,e,s,r,a=[1,1],o){let i=n;3===n.rank&&(i=F(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let l=t;return 3===l.rank&&(l=F(t,[1,t.shape[0],t.shape[1],t.shape[2]])),R.runKernel(Mc,{x:i,dy:l},{strides:s,pad:r,dimRoundingMode:o,dilations:a,filterShape:e})}}),Eg=D({depthwiseConv2dNativeBackpropInput_:function NN(n,t,e,s,r,a=[1,1],o){let i=t,l=!1;3===t.rank&&(l=!0,i=F(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const h=R.runKernel(zc,{dy:i,filter:e},{strides:s,pad:r,dimRoundingMode:o,dilations:a,inputShape:n});return l?F(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),Ag=D({fusedMatMul_:function kN({a:n,b:t,transposeA:e=!1,transposeB:s=!1,bias:r,activation:a="linear",preluActivationWeights:o,leakyreluAlpha:i=.2}){if(!1===au(R.state.gradientDepth,a)){let P=et(n,t,e,s);return null!=r&&(P=ne(P,r)),ru(P,a,o,i)}let l=C(n,"a","fused matMul"),u=C(t,"b","fused matMul");[l,u]=kt(l,u);const c=e?l.shape[l.rank-2]:l.shape[l.rank-1],h=s?u.shape[u.rank-1]:u.shape[u.rank-2],d=e?l.shape[l.rank-1]:l.shape[l.rank-2],p=s?u.shape[u.rank-2]:u.shape[u.rank-1],f=l.shape.slice(0,-2),g=u.shape.slice(0,-2),m=L(f),y=L(g);S(c===h,()=>`Error in fused matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${e} and transposeB=${s} must match.`);const b=Pe(l.shape.slice(0,-2),u.shape.slice(0,-2)).concat([d,p]),w=F(l,e?[m,c,d]:[m,d,c]),v=F(u,s?[y,p,h]:[y,h,p]);let I,N;null!=r&&(I=C(r,"bias","fused matMul"),[I]=kt(I,l),Pe(b,I.shape)),null!=o&&(N=C(o,"prelu weights","fused matMul"));const k=(P,B)=>{const[W,U,G,q]=B,K=nu(F(P,G.shape),G,a);let H,X;return e||s?!e&&s?(H=et(K,U,!1,!1),X=et(K,W,!0,!1)):e&&!s?(H=et(U,K,!1,!0),X=et(W,K,!1,!1)):(H=et(U,K,!0,!0),X=et(K,W,!0,!0)):(H=et(K,U,!1,!0),X=et(W,K,!0,!1)),null!=r?[H,X,su(q,K)]:[H,X]},_={a:w,b:v,bias:I,preluActivationWeights:N},$={transposeA:e,transposeB:s,activation:a,leakyreluAlpha:i};return null==r?As((B,W,U)=>{const G=R.runKernel(Fl,_,$);return U([B,W,G]),{value:F(G,b),gradFunc:k}})(w,v):As((B,W,U,G)=>{const q=R.runKernel(Fl,_,$);return G([B,W,q,U]),{value:F(q,b),gradFunc:k}})(w,v,I)}});function ou(n,t,e){if(tt(n),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const s=Bl(n,e);if(2!==s.length&&1!==s.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Wl(n,t,s,e)}const ON=D({cropAndResize_:function FN(n,t,e,s,r="bilinear",a=0){const o=C(n,"image","cropAndResize"),i=C(t,"boxes","cropAndResize","float32"),l=C(e,"boxInd","cropAndResize","int32"),u=i.shape[0];return S(4===o.rank,()=>`Error in cropAndResize: image must be rank 4,but got rank ${o.rank}.`),S(2===i.rank&&4===i.shape[1],()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${i.shape}.`),S(1===l.rank&&l.shape[0]===u,()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${i.shape}.`),S(2===s.length,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`),S(s[0]>=1&&s[1]>=1,()=>`cropSize must be atleast [1,1], but was ${s}`),S("bilinear"===r||"nearest"===r,()=>`method must be bilinear or nearest, but was ${r}`),R.runKernel(Pc,{image:o,boxes:i,boxInd:l},{method:r,extrapolationValue:a,cropSize:s})}}),LN=D({flipLeftRight_:function PN(n){const t=C(n,"image","flipLeftRight","float32");return S(4===t.rank,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`),R.runKernel(qc,{image:t},{})}}),MN=D({grayscaleToRGB_:function VN(n){const t=C(n,"image","grayscaleToRGB"),e=t.rank-1,s=t.shape[e];S(t.rank>=2,()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`),S(1===s,()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${s}.`);const r=new Array(t.rank);return r.fill(1,0,e),r[e]=3,ts(t,r)}}),si=D({einsum_:function zN(n,...t){const e=t.map((r,a)=>C(r,`tensors${a}`,"einsum"));return R.runKernel(Uc,e,{equation:n})}}),WN=D({rgbToGrayscale_:function BN(n){const t=C(n,"image","RGBToGrayscale"),s=t.shape[t.rank-1];S(t.rank>=2,()=>`Error in RGBToGrayscale: images must be at least rank 2, but got rank ${t.rank}.`),S(3===s,()=>`Error in RGBToGrayscale: last dimension of an RGB image should be size 3, but got size ${s}.`);const r=t.dtype,a=he(t,"float32"),o=In([.2989,.587,.114]);let i;switch(t.rank){case 2:i=si("ij,j->i",a,o);break;case 3:i=si("ijk,k->ij",a,o);break;case 4:i=si("ijkl,l->ijk",a,o);break;case 5:i=si("ijklm,m->ijkl",a,o);break;case 6:i=si("ijklmn,n->ijklm",a,o);break;default:throw new Error("Not a valid tensor rank.")}return i=Sn(i,-1),he(i,r)}}),GN=D({rotateWithOffset_:function UN(n,t,e=0,s=.5){const r=C(n,"image","rotateWithOffset","float32");return S(4===r.rank,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`),R.runKernel(xh,{image:r},{radians:t,fillValue:e,center:s})}});function ya(n,t,e,s,r,a){null==s&&(s=.5),null==r&&(r=Number.NEGATIVE_INFINITY),null==a&&(a=0);const o=n.shape[0];return e=Math.min(e,o),S(0<=s&&s<=1,()=>`iouThreshold must be in [0, 1], but was '${s}'`),S(2===n.rank,()=>`boxes must be a 2D tensor, but was of rank '${n.rank}'`),S(4===n.shape[1],()=>`boxes must have 4 columns, but 2nd dimension was ${n.shape[1]}`),S(1===t.rank,()=>"scores must be a 1D tensor"),S(t.shape[0]===o,()=>`scores has incompatible shape with boxes. Expected ${o}, but was ${t.shape[0]}`),S(0<=a&&a<=1,()=>`softNmsSigma must be in [0, 1], but was '${a}'`),{maxOutputSize:e,iouThreshold:s,scoreThreshold:r,softNmsSigma:a}}const jN=D({nonMaxSuppression_:function HN(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY){const a=C(n,"boxes","nonMaxSuppression","float32"),o=C(t,"scores","nonMaxSuppression","float32"),i=ya(a,o,e,s,r);return R.runKernel(Qc,{boxes:a,scores:o},{maxOutputSize:e=i.maxOutputSize,iouThreshold:s=i.iouThreshold,scoreThreshold:r=i.scoreThreshold})}});function qN(n,t,e){const s=function KN(n,t,e){return function YN(n,t,e){let s=0,r=n.length,a=0,o=!1;for(;s<r;){a=s+(r-s>>>1);const i=e(t,n[a]);i>0?s=a+1:(r=a,o=!i)}return o?s:-s-1}(n,t,e||XN)}(n,t,e);n.splice(s<0?-(s+1):s,0,t)}function XN(n,t){return n>t?1:n<t?-1:0}function Cd(n,t,e,s,r){return _d(n,t,e,s,r,0)}function kd(n,t,e,s,r,a){return _d(n,t,e,s,r,0,!1,a,!0)}function Td(n,t,e,s,r,a){return _d(n,t,e,s,r,a,!0)}function _d(n,t,e,s,r,a,o=!1,i=!1,l=!1){const u=[];for(let m=0;m<t.length;m++)t[m]>r&&u.push({score:t[m],boxIndex:m,suppressBeginIndex:0});u.sort(Og);const c=a>0?-.5/a:0,h=[],d=[];for(;h.length<e&&u.length>0;){const m=u.pop(),{score:y,boxIndex:x,suppressBeginIndex:b}=m;if(y<r)break;let w=!1;for(let v=h.length-1;v>=b;--v){const I=ZN(n,x,h[v]);if(I>=s){w=!0;break}if(m.score=m.score*JN(s,c,I),m.score<=r)break}m.suppressBeginIndex=h.length,w||(m.score===y?(h.push(x),d.push(m.score)):m.score>r&&qN(u,m,Og))}const p=h.length,f=e-p;i&&f>0&&(h.push(...new Array(f).fill(0)),d.push(...new Array(f).fill(0)));const g={selectedIndices:h};return o&&(g.selectedScores=d),l&&(g.validOutputs=p),g}function ZN(n,t,e){const s=n.subarray(4*t,4*t+4),r=n.subarray(4*e,4*e+4),a=Math.min(s[0],s[2]),o=Math.min(s[1],s[3]),i=Math.max(s[0],s[2]),l=Math.max(s[1],s[3]),u=Math.min(r[0],r[2]),c=Math.min(r[1],r[3]),h=Math.max(r[0],r[2]),d=Math.max(r[1],r[3]),p=(i-a)*(l-o),f=(h-u)*(d-c);if(p<=0||f<=0)return 0;const g=Math.max(a,u),m=Math.max(o,c),y=Math.min(i,h),x=Math.min(l,d),b=Math.max(y-g,0)*Math.max(x-m,0);return b/(p+f-b)}function JN(n,t,e){const s=Math.exp(t*e*e);return e<=n?s:0}function Og(n,t){return n.score-t.score||n.score===t.score&&t.boxIndex-n.boxIndex}function $d(){return($d=O(function*(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY){const a=C(n,"boxes","nonMaxSuppressionAsync"),o=C(t,"scores","nonMaxSuppressionAsync"),i=ya(a,o,e,s,r);e=i.maxOutputSize,s=i.iouThreshold,r=i.scoreThreshold;const l=yield Promise.all([a.data(),o.data()]),u=l[0],c=l[1],{selectedIndices:h}=Cd(u,c,e,s,r);return a!==n&&a.dispose(),o!==t&&o.dispose(),In(h,"int32")})).apply(this,arguments)}const nC=D({nonMaxSuppressionWithScore_:function tC(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const o=C(n,"boxes","nonMaxSuppression"),i=C(t,"scores","nonMaxSuppression"),l=ya(o,i,e,s,r,a),h=R.runKernel(th,{boxes:o,scores:i},{maxOutputSize:e=l.maxOutputSize,iouThreshold:s=l.iouThreshold,scoreThreshold:r=l.scoreThreshold,softNmsSigma:a=l.softNmsSigma});return{selectedIndices:h[0],selectedScores:h[1]}}});function Ed(){return(Ed=O(function*(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const o=C(n,"boxes","nonMaxSuppressionAsync"),i=C(t,"scores","nonMaxSuppressionAsync"),l=ya(o,i,e,s,r,a);e=l.maxOutputSize,s=l.iouThreshold,r=l.scoreThreshold,a=l.softNmsSigma;const u=yield Promise.all([o.data(),i.data()]),c=u[0],h=u[1],{selectedIndices:d,selectedScores:p}=Td(c,h,e,s,r,a);return o!==n&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:In(d,"int32"),selectedScores:In(p)}})).apply(this,arguments)}const oC=D({nonMaxSuppressionPadded_:function aC(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const o=C(n,"boxes","nonMaxSuppression"),i=C(t,"scores","nonMaxSuppression"),l=ya(o,i,e,s,r,null),f=R.runKernel(eh,{boxes:o,scores:i},{maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:a});return{selectedIndices:f[0],validOutputs:f[1]}}});function Ad(){return(Ad=O(function*(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const o=C(n,"boxes","nonMaxSuppressionAsync"),i=C(t,"scores","nonMaxSuppressionAsync"),l=ya(o,i,e,s,r,null),u=l.maxOutputSize,c=l.iouThreshold,h=l.scoreThreshold,[d,p]=yield Promise.all([o.data(),i.data()]),{selectedIndices:f,validOutputs:g}=kd(d,p,u,c,h,a);return o!==n&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:In(f,"int32"),validOutputs:Fe(g,"int32")}})).apply(this,arguments)}const Pg=D({resizeBilinear_:function uC(n,t,e=!1,s=!1){const r=C(n,"images","resizeBilinear");S(3===r.rank||4===r.rank,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`),S(2===t.length,()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`),S(!1===s||!1===e,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let a=r,o=!1;3===r.rank&&(o=!0,a=F(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,u=R.runKernel(Sl,{images:a},{alignCorners:e,halfPixelCenters:s,size:t});return o?F(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),Lg=D({resizeNearestNeighbor_:function cC(n,t,e=!1,s=!1){const r=C(n,"images","resizeNearestNeighbor");S(3===r.rank||4===r.rank,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`),S(2===t.length,()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`),S("float32"===r.dtype||"int32"===r.dtype,()=>"`images` must have `int32` or `float32` as dtype"),S(!1===s||!1===e,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let a=r,o=!1;3===r.rank&&(o=!0,a=F(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,u=R.runKernel(vl,{images:a},{alignCorners:e,halfPixelCenters:s,size:t});return o?F(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),dC=D({bincount_:function hC(n,t,e){const s=C(n,"x","bincount"),r=C(t,"weights","bincount");return S("int32"===s.dtype,()=>`Error in bincount: input dtype must be int32, but got ${s.dtype}`),S(e>=0,()=>`size must be non-negative, but got ${e}.`),S(r.size===s.size||0===r.size,()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${r.shape}.`),R.runKernel($c,{x:s,weights:r},{size:e})}}),xa=D({lessEqual_:function pC(n,t){let e=C(n,"a","lessEqual","string_or_numeric"),s=C(t,"b","lessEqual","string_or_numeric");return[e,s]=kt(e,s),Pe(e.shape,s.shape),R.runKernel(tl,{a:e,b:s})}}),Vg=D({round_:function fC(n){const e={x:C(n,"x","round")};return R.runKernel(Co,e)}}),yC=D({threshold_:function mC(n,t="binary",e=!1,s=.5){const r=C(n,"image","threshold"),l=r.shape[0]*r.shape[1];let c,h,d,p,u=E(In([s]),255);if(S(3===r.rank,()=>`Error in threshold: image must be rank 3,but got rank ${r.rank}.`),S(3===r.shape[2]||1===r.shape[2],()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${r.shape[2]}.`),S("int32"===r.dtype||"float32"===r.dtype,()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${r.dtype}.`),S("otsu"===t||"binary"===t,()=>`Method must be binary or otsu, but was ${t}`),3===r.shape[2]){[c,h,d]=On(r,[1,1,1],-1);const m=E(c,.2989),y=E(h,.587),x=E(d,.114);p=ne(ne(m,y),x)}else p=n;"otsu"===t&&(u=function gC(n,t){let a,o,i,l,u,c,e=In([-1]),s=In([0]),r=In([0]);for(let h=0;h<n.size-1;h++){a=ot(n,0,h+1),o=ot(n,h+1),u=Ie(be(a),t),c=Ie(be(o),t);const d=be(E(a,Qo(0,a.size)));i=Ie(d,be(a));const p=Go(o.shape,a.size),f=ne(Qo(0,o.size),p),g=E(o,f);l=Ie(be(g),be(o));const m=ge(i,l),y=ge(i,l),x=E(u,c);r=E(E(x,m),y);const b=Fn(r,s);s=gn(b,r,s),e=gn(b,In([h]),e)}return e}(dC(he(Vg(p),"int32"),Ys([]),256),l));const f=e?xa(p,u):Fn(p,u);return he(E(f,255),"int32")}}),bC=D({transform_:function xC(n,t,e="nearest",s="constant",r=0,a){const o=C(n,"image","transform","float32"),i=C(t,"transforms","transform","float32");return S(4===o.rank,()=>`Error in transform: image must be rank 4,but got rank ${o.rank}.`),S(2===i.rank&&(i.shape[0]===o.shape[0]||1===i.shape[0])&&8===i.shape[1],()=>"Error in transform: Input transform should be batch x 8 or 1 x 8"),S(null==a||2===a.length,()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`),R.runKernel(gh,{image:o,transforms:i},{interpolation:e,fillMode:s,fillValue:r,outputShape:a})}}),iu=D({less_:function wC(n,t){let e=C(n,"a","less","string_or_numeric"),s=C(t,"b","less","string_or_numeric");return[e,s]=kt(e,s),Pe(e.shape,s.shape),R.runKernel(el,{a:e,b:s})}}),SC=D({bandPart_:function vC(n,t,e){const s=C(n,"a","bandPart");S(s.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`);const r=s.shape,[a,o]=s.shape.slice(-2);let i,l;"number"==typeof t?(S(t%1==0,()=>`bandPart(): numLower must be an integer, got ${t}.`),S(t<=a,()=>`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`),i=C(t<0?a:t,"numLower","bandPart")):(S("int32"===t.dtype,()=>"bandPart(): numLower's dtype must be an int32."),i=gn(iu(t,0),a,ma(t,a))),"number"==typeof e?(S(e%1==0,()=>`bandPart(): numUpper must be an integer, got ${e}.`),S(e<=o,()=>`bandPart(): numUpper (${e}) must not be greater than the number of columns (${o}).`),l=C(e<0?o:e,"numUpper","bandPart")):(S("int32"===e.dtype,()=>"bandPart(): numUpper's dtype must be an int32."),l=gn(iu(e,0),o,ma(e,o)));const u=F(Qo(0,a,1,"int32"),[-1,1]),c=Qo(0,o,1,"int32"),h=ge(u,c),d=Fs(xa(h,i),Dr(h,yt(l))),p=Yt([a,o],s.dtype);return F(Ls(Or(F(s,[-1,a,o])).map(f=>gn(d,f,p))),r)}});function Mg(n,t,e=null){if(0===n.rank)return qt(n);if(1!==n.rank&&null===e)return Mg(F(n,[-1]),t,e);if(1===n.rank||"number"==typeof e||Array.isArray(e)&&1===e.length){if(1===t)return be(qt(n),e);if(t===1/0)return ns(qt(n),e);if(t===-1/0)return Jl(qt(n),e);if("euclidean"===t||2===t)return fn(be(da(qt(n),Fe(2,"int32")),e));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(e)&&2===e.length){if(1===t)return ns(be(qt(n),e[0]),e[1]-1);if(t===1/0)return ns(be(qt(n),e[1]),e[0]);if(t===-1/0)return Jl(be(qt(n),e[1]),e[0]);if("fro"===t||"euclidean"===t)return fn(be(dt(n),e));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${e}`)}const lu=D({norm_:function IC(n,t="euclidean",e=null,s=!1){const r=Mg(n=C(n,"x","norm"),t,e);let a=r.shape;if(s){const o=Ue(e,n.shape);a=$t(r.shape,o)}return F(r,a)}}),CC=D({gramSchmidt_:function NC(n){let t;if(Array.isArray(n)){t=!1,S(null!=n&&n.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const r=n[0].shape[0];for(let a=1;a<n.length;++a)S(n[a].shape[0]===r,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${n[a].shape[0]} vs. ${r})`)}else t=!0,n=On(n,n.shape[0],0).map(r=>ti(r,[0]));S(n.length<=n[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${n.length}) exceeds number of dimensions (${n[0].shape[0]}).`);const e=[],s=n;for(let r=0;r<n.length;++r)e.push(R.tidy(()=>{let a=s[r];if(r>0)for(let o=0;o<r;++o){const i=E(be(E(e[o],a)),e[o]);a=ge(a,i)}return Ie(a,lu(a,"euclidean"))}));return t?Ls(e,0):e}});function zg(n,t=!1){return R.tidy(()=>{S(2===n.shape.length,()=>`qr2d() requires a 2D Tensor, but got a ${n.shape.length}D Tensor.`);const e=n.shape[0],s=n.shape[1];let r=bg(e),a=Er(n);const o=ou([[1]],[1,1]);let i=Er(o);const l=e>=s?s:e;for(let u=0;u<l;++u){const c=a,h=i,d=r;[i,a,r]=R.tidy(()=>{const p=ot(a,[u,u],[e-u,1]),f=lu(p),g=ot(a,[u,u],[1,1]),m=gn(Fn(g,0),ou([[-1]]),ou([[1]])),y=ge(g,E(m,f)),x=Ie(p,y);i=1===x.shape[0]?Er(o):un([o,ot(x,[1,0],[x.shape[0]-1,x.shape[1]])],0);const b=yt(Ie(et(m,y),f)),w=ot(a,[u,0],[e-u,s]),v=E(b,i),I=Ye(i);if(0===u)a=ge(w,et(v,et(I,w)));else{const _=ge(w,et(v,et(I,w)));a=un([ot(a,[0,0],[u,s]),_],0)}const N=Ye(v),k=ot(r,[0,u],[e,r.shape[1]-u]);if(0===u)r=ge(k,et(et(k,i),N));else{const _=ge(k,et(et(k,i),N));r=un([ot(r,[0,0],[e,u]),_],1)}return[i,a,r]}),Be([c,h,d])}return!t&&e>s&&(r=ot(r,[0,0],[e,s]),a=ot(a,[0,0],[s,s])),[r,a]})}const TC=D({qr_:function kC(n,t=!1){if(S(n.rank>=2,()=>`qr() requires input tensor to have a rank >= 2, but got rank ${n.rank}`),2===n.rank)return zg(n,t);{const e=n.shape.slice(0,n.shape.length-2).reduce((l,u)=>l*u),s=Or(F(n,[e,n.shape[n.shape.length-2],n.shape[n.shape.length-1]]),0),r=[],a=[];return s.forEach(l=>{const[u,c]=zg(l,t);r.push(u),a.push(c)}),[F(Ls(r,0),n.shape),F(Ls(a,0),n.shape)]}}}),Bg=D({squaredDifference_:function MC(n,t){let e=C(n,"a","squaredDifference"),s=C(t,"b","squaredDifference");return[e,s]=kt(e,s),Pe(e.shape,s.shape),R.runKernel(Fo,{a:e,b:s},{})}}),ys={flipLeftRight:LN,grayscaleToRGB:MN,resizeNearestNeighbor:Lg,resizeBilinear:Pg,rgbToGrayscale:WN,rotateWithOffset:GN,cropAndResize:ON,nonMaxSuppression:jN,nonMaxSuppressionAsync:function QN(n,t,e){return $d.apply(this,arguments)},nonMaxSuppressionWithScore:nC,nonMaxSuppressionWithScoreAsync:function sC(n,t,e){return Ed.apply(this,arguments)},nonMaxSuppressionPadded:oC,nonMaxSuppressionPaddedAsync:function iC(n,t,e){return Ad.apply(this,arguments)},threshold:yC,transform:bC},ck={bandPart:SC,gramSchmidt:CC,qr:TC},ba=class hk{static sgd(t){return new Gh(t)}static momentum(t,e,s=!1){return new Xm(t,e,s)}static rmsprop(t,e=.9,s=0,r=null,a=!1){return new Ym(t,e,s,r,a)}static adam(t=.001,e=.9,s=.999,r=null){return new qm(t,e,s,r)}static adadelta(t=.001,e=.95,s=null){return new Hm(t,e,s)}static adamax(t=.002,e=.9,s=.999,r=null,a=0){return new Km(t,e,s,r,a)}static adagrad(t,e=.1){return new jm(t,e)}},dk=typeof requestAnimationFrame<"u"?requestAnimationFrame:typeof setImmediate<"u"?setImmediate:n=>n();function Wg(){return new Promise(n=>dk(()=>n()))}function Rd(n,t){const e=n[0].length;n.forEach((r,a)=>{S(r.length===e,()=>`Error in concat${e}D: rank of tensors[${a}] must be the same as the rank of the rest (${e})`)}),S(t>=0&&t<e,()=>`Error in concat${e}D: axis must be between 0 and ${e-1}.`);const s=n[0];n.forEach((r,a)=>{for(let o=0;o<e;o++)S(o===t||r[o]===s[o],()=>`Error in concat${e}D: Shape of tensors[${a}] (${r}) does not match the shape of the rest (${s}) along the non-concatenated axis ${a}.`)})}function xs(n,t){const e=n[0].slice();for(let s=1;s<n.length;s++)e[t]+=n[s][t];return e}var bs=function(n){return n[n.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",n[n.VALUE_ROWIDS=1]="VALUE_ROWIDS",n[n.ROW_LENGTHS=2]="ROW_LENGTHS",n[n.ROW_SPLITS=3]="ROW_SPLITS",n[n.ROW_LIMITS=4]="ROW_LIMITS",n[n.ROW_STARTS=5]="ROW_STARTS",n}(bs||{});function Ug(n,t,e){let s=new Array;if(null==e&&null==t)return s;if(null==t)for(;s.length<n+e.length;)s.push(-1);else s=t.slice();if(null==e)return s;if(n+e.length!==s.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${n+e.length}, but shape.rank = ${s.length}`);for(let r=1;r<e.length;++r){const a=e[r],o=s[s.length-e.length+r],i=s[o];if(a>=0)if(i>=0){if(i!==a)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${r+n}] = ${a} but shape[${r+n}] = ${i}`)}else s[o]=a}return s}function Gg(n){const t={FIRST_DIM_SIZE:bs.FIRST_DIM_SIZE,VALUE_ROWIDS:bs.VALUE_ROWIDS,ROW_LENGTHS:bs.ROW_LENGTHS,ROW_SPLITS:bs.ROW_SPLITS,ROW_LIMITS:bs.ROW_LIMITS,ROW_STARTS:bs.ROW_STARTS},e=[];for(const s of n){if(!(s in t))break;e.push(t[s])}return e}function Hg(n){return 0===n.length?0:n[0]===bs.FIRST_DIM_SIZE?n.length-1:n.length}function jg(n,t){if(null==n||null==t)return;const e=n.length,s=t.length;if(e>=s)throw new Error(`defaultValue.shape=${n} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${e} must be less than ragged tensor input flatValues.rank = ${s})`);for(let r=0;r<Math.min(e,s-1);++r){const a=n[r],o=t[r+1];if(a>=0&&o>=0&&1!==a&&a!==o)throw new Error(`defaultValue.shape=${n}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${r-n.length}] = ${a} but ragged tensor input.flatValues.shape[${r-n.length}] = ${o}`)}}const Dd=30;function uu(n){return n<=Dd?n:bc(n,Math.floor(Math.sqrt(n)))}function Fd(n,t,e){return[e*("number"==typeof n?n:n[0]),t*("number"==typeof n?n:n[1])]}function ri(n,t,e,s=!0){let r=[];if(s)r=r.concat(t.slice(0)),r.push(n[0]/e),r=r.concat(n.slice(1));else{r=r.concat(n[0]);const a=t.length;for(let o=0;o<a;++o)r=r.concat([n[o+1]/t[o],t[o]]);r=r.concat(n.slice(a+1))}return r}function ai(n,t,e=!0){const s=[];if(e){s.push(t);for(let r=t+1;r<n;++r)r<=2*t?(s.push(r),s.push(r-(t+1))):s.push(r)}else{const r=[],a=[];for(let o=1;o<n;++o)o>=2*t+1||o%2==1?a.push(o):r.push(o);s.push(...r),s.push(0),s.push(...a)}return s}function oi(n,t,e,s=!0){const r=[];r.push(s?n[0]/e:n[0]*e);for(let a=1;a<n.length;++a)r.push(a<=t.length?s?t[a-1]*n[a]:n[a]/t[a-1]:n[a]);return r}function Od(n,t){const e=[0];for(let s=0;s<t;++s)e.push(n[s][0]);return e}function Pd(n,t,e){const s=n.slice(0,1);for(let r=0;r<e;++r)s.push(n[r+1]-t[r][0]-t[r][1]);return s}function Ld(n,t){const e=n.shape.length,s=t.shape.length;if(e<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${e}.`);if(s<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[s-1]>e)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s-1]} vs. ${e}`);if(0===L(n.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${n.shape}.`);const r=t.shape,a=r[r.length-1];let o=1;for(let h=0;h<r.length-1;++h)o*=r[h];const i=n.shape,l=r.slice();l.pop();let u=1;for(let h=a;h<e;++h)u*=i[h],l.push(i[h]);const c=[...Ne(n.shape).map(h=>h/u),1].slice(0,a);return[l,o,u,c]}function qg(n,t,e){const s=t.rank>1?t.shape[t.rank-1]:1,r=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${e.shape}, indices.shape: ${t.shape}, shape: ${n}, sliceDim: ${s}, and batchDim: ${r}.`;if(e.rank<r)throw new Error(a+` update.rank < ${r}. `);if(n.length<s+(e.rank-r))throw new Error(a+` Output shape length < ${s+(e.rank-r)}`);if(e.rank!==r+n.length-s)throw new Error(a+" update.rank != "+(r+n.length-s));for(let o=0;o<r;++o)if(e.shape[o]!==t.shape[o])throw new Error(a+` updates.shape[${o}] (${e.shape[o]}) != indices.shape[${o}] (${t.shape[o]}).`);for(let o=0;o<e.rank-r;++o)if(e.shape[o+r]!==n[o+s])throw new Error(a+` updates.shape[${o+r}] (${e.shape[o+r]}) != shape[${o+r}] (${n[o+r]})`)}function pk(n,t,e){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(n.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${n.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(e.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${e}`);if(0===e.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===n.size)throw new Error(`Updates specified for empty output. updates shape: ${n.shape}`)}qg(e,t,n)}function Pr(n,t,e){const s=t.shape.length,r=s>1?t.shape[s-1]:1,a=e.length;let o=1;for(let h=r;h<a;++h)o*=e[h];const i=r<1?1:r;return{sliceRank:r,numUpdates:L(t.shape)/i,sliceSize:o,strides:[...Ne(e.slice(0,r)),1],outputSize:L(e)}}const cu=1.7580993408473768,hu=1.0507009873554805,Vd=.3275911,Md=.254829592,zd=-.284496736,Bd=1.421413741,Wd=-1.453152027,Ud=1.061405429;function Ms(n,t){if(n.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${n.length}, imag: ${t.length}.`);const e=new Float32Array(2*n.length);for(let s=0;s<e.length;s+=2)e[s]=n[s/2],e[s+1]=t[s/2];return e}function Kg(n){const t=new Float32Array(n.length/2),e=new Float32Array(n.length/2);for(let s=0;s<n.length;s+=2)t[s/2]=n[s],e[s/2]=n[s+1];return{real:t,imag:e}}function Xg(n){const t=Math.ceil(n.length/4),e=new Float32Array(t),s=new Float32Array(t);for(let r=0;r<n.length;r+=4)e[Math.floor(r/4)]=n[r],s[Math.floor(r/4)]=n[r+1];return{real:e,imag:s}}function Yg(n){const t=Math.floor(n.length/4),e=new Float32Array(t),s=new Float32Array(t);for(let r=2;r<n.length;r+=4)e[Math.floor(r/4)]=n[r],s[Math.floor(r/4)]=n[r+1];return{real:e,imag:s}}function Gd(n,t){return{real:n[2*t],imag:n[2*t+1]}}function Zg(n,t,e,s){n[2*s]=t,n[2*s+1]=e}function Jg(n,t){const e=new Float32Array(n/2),s=new Float32Array(n/2);for(let r=0;r<Math.ceil(n/2);r++){const a=(t?2:-2)*Math.PI*(r/n);e[r]=Math.cos(a),s[r]=Math.sin(a)}return{real:e,imag:s}}function Qg(n,t,e){const s=(e?2:-2)*Math.PI*(n/t);return{real:Math.cos(s),imag:Math.sin(s)}}const Hd="->",fk=/->/g,ey=",",ty="...";function jd(n,t){const e=((n=n.replace(/\s/g,"")).length-n.replace(fk,"").length)/Hd.length;if(e<1)throw new Error("Equations without an arrow are not supported.");if(e>1)throw new Error(`Equation must contain exactly one arrow ("${Hd}").`);const[s,r]=n.split(Hd);S(-1===s.indexOf(ty),()=>`The ellipsis notation ("${ty}") is not supported yet.`);const a=s.split(ey),o=a.length;if(t!==o)throw new Error(`Expected ${o} input tensors, received ${t}`);if(o>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const i=[];for(let d=0;d<r.length;++d){const p=r[d];if(!a.some(f=>-1!==f.indexOf(p)))throw new Error(`Output subscripts contain the label ${p} not present in the input subscripts.`);-1===i.indexOf(p)&&i.push(p)}for(let d=0;d<s.length;++d){const p=s[d];-1===i.indexOf(p)&&p!==ey&&i.push(p)}const l=new Array(a.length);for(let d=0;d<o;++d){if(new Set(a[d].split("")).size!==a[d].length)throw new Error(`Found duplicate axes in input component ${a[d]}. Support for duplicate axes in input is not implemented yet.`);l[d]=[];for(let p=0;p<a[d].length;++p)l[d].push(i.indexOf(a[d][p]))}const u=i.length,h=[];for(let d=r.length;d<u;++d)h.push(d);return{allDims:i,summedDims:h,idDims:l}}function qd(n,t){let e=new Array(n);e.fill(-1);for(let r=0;r<t.length;++r)e[t[r]]=r;const s=[];for(let r=0;r<n;++r)-1===e[r]&&s.push(r);return e=e.filter(r=>-1!==r),{permutationIndices:e,expandDims:s}}function Kd(n,t,e){const s=new Array(n);for(let r=0;r<e.length;++r){const a=e[r].shape;for(let o=0;o<t[r].length;++o)void 0===s[t[r][o]]?s[t[r][o]]=a[o]:S(s[t[r][o]]===a[o],()=>`Expected dimension ${s[t[r][o]]} at axis ${o} of input shaped ${JSON.stringify(a)}, but got dimension ${a[o]}`)}}function Xd(n,t){const e=n,s=[];let r=0;0===n.length&&e.push(-1),r=n.length+1;for(let o=0;o<r;++o)s.push([]);const a=[];for(let o=0;o<e.length;++o){const l=mk(t,e[o]);for(const u of l)-1===a.indexOf(u)&&(s[o].push(u),a.push(u))}return{path:e,steps:s}}function Yd(n){return n.every((t,e)=>t===e)}function mk(n,t){const e=[];for(let s=0;s<n.length;++s)(0===n[s].length||-1!==n[s].indexOf(t)||-1===t)&&e.push(s);return e}function Zd(n,t,e=0){let s=[];if("number"==typeof t)S(n.shape[e]%t==0,()=>"Number of splits must evenly divide the axis."),s=new Array(t).fill(n.shape[e]/t);else{S(t.reduce((o,i)=>(-1===i&&(o+=1),o),0)<=1,()=>"There should be only one negative value in split array.");const a=t.indexOf(-1);if(-1!==a){const o=t.reduce((i,l)=>l>0?i+l:i);t[a]=n.shape[e]-o}S(n.shape[e]===t.reduce((o,i)=>o+i),()=>"The sum of sizes must match the size of the axis dimension."),s=t}return s}function ny(n){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${n}`}function sy(n,t){return`indices(${n}, 0) is invalid: ${t} < 0`}function ry(n,t,e){return`indices(${n}, 0) is invalid: ${t} >= ${e}`}function ay(n,t){return`only one output dimension may be -1, not both ${n} and ${t}`}function oy(n,t){return`size ${n} must be non-negative, not ${t}`}function iy(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function ly(n,t){return`Input to reshape is a SparseTensor with ${L(n)}\n  dense values, but the requested shape requires a multiple of ${L(t)}. inputShape=${n} outputShape= ${t}`}function uy(n,t){return`Input to reshape is a tensor with ${L(n)} dense values, but the requested shape has ${L(t)}. inputShape=${n} outputShape=${t}`}function Jd(){return"segment ids must be >= 0"}function cy(){return"segment ids are not increasing"}function hy(n,t){return`Segment id ${n} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function dy(n,t,e){return`Bad: indices[${n}] == ${t} out of range [0, ${e})`}function py(n,t){let s,e=!1;for(n<=Dd?(s=n,e=!0):s=bc(n,Math.floor(Math.sqrt(n)));!e;)s>t||s===n?e=!0:s=bc(n,s+1);return s}function fy(n,t,e){const s=[],r=n.length;for(let a=0;a<r;a++)s.push(a!==t?n[a]:e);return s}function Qd(n,t,e,s){const r=t.shape.length,a=n.shape.length;if(0!==s&&(s<-r||s>r))throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${s}`);if(s<0&&(s+=r),s>a)throw new Error(`batchDims (${s}) must be less than rank(x) (\n    ${a}).`);if(e<s)throw new Error(`batchDims (${s}) must be less than or equal to axis (${e}).`);for(let h=0;h<s;++h)if(n.shape[h]!==t.shape[h])throw new Error(`x.shape[${h}]: ${n.shape[h]} should be equal to indices.shape[${h}]: ${t.shape[h]}.`);const o=n.shape[e],i=[];let l=1,u=1,c=1;for(let h=0;h<s;++h)i.push(n.shape[h]),l*=n.shape[h];for(let h=s;h<e;h++)i.push(n.shape[h]),u*=n.shape[h];for(let h=s;h<r;h++)i.push(t.shape[h]);for(let h=e+1;h<a;h++)i.push(n.shape[h]),c*=n.shape[h];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:o,outputShape:i}}function zs(n){try{return n.map(t=>Xs(t))}catch(t){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${t}`)}}function my(n){return n.map(t=>Ks(t))}function gy(n,t){const e=[];for(let a=0;a<t.length;a++)t[a]&&e.push(a);const s=Ge(n,"int32"),r=Ge([e.length,n.length],"int32");for(let a=0;a<e.length;a++){const o=s.indexToLoc(e[a]);r.values.set(o,a*n.length)}return r.toTensor()}!function Yv(){for(const n of Xv)J(n)}();const yy={kernelName:Di,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>E(n,ni(he(e,"float32"),-1))}}},gk={kernelName:Ua,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>{const s=dt(he(e,"float32")),r=fn(ge(Fe(1),s));return yt(Ie(n,r))}}}},yk={kernelName:Ga,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>{const s=fn(ge(dt(he(e,"float32")),1));return Ie(n,s)}}}},xk={kernelName:sa,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Pe(e.shape,s.shape);return{a:()=>{let i=n;const l=Lt(e.shape,r);return l.length>0&&(i=be(i,l)),F(i,e.shape)},b:()=>{let i=n;const l=Lt(s.shape,r);return l.length>0&&(i=be(i,l)),F(i,s.shape)}}}},bk={kernelName:Nc,saveAllInputs:!0,gradFunc:(n,t)=>{const e={};return t.forEach((s,r)=>{e[r]=()=>n.clone()}),e}},wk={kernelName:Fi,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Xe(e)}}},vk={kernelName:Oi,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Xe(e)}}},Sk={kernelName:Ha,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Ie(n,fn(ge(Fe(1),dt(he(e,"float32")))))}}},Ik={kernelName:ja,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>{const s=fn(ne(Fe(1),dt(he(e,"float32"))));return Ie(n,s)}}}},Nk={kernelName:Xa,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Pe(e.shape,s.shape);return{a:()=>{const i=ne(dt(e),dt(s));let l=E(n,Ie(s,i));const u=Lt(e.shape,r);return u.length>0&&(l=be(l,u)),F(l,e.shape)},b:()=>{const i=ne(dt(e),dt(s));let l=yt(E(n,Ie(e,i)));const u=Lt(s.shape,r);return u.length>0&&(l=be(l,u)),F(l,s.shape)}}}},Ck={kernelName:qa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Ie(n,ne(dt(he(e,"float32")),1))}}},kk={kernelName:Ka,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Ie(n,ge(Fe(1),dt(he(e,"float32"))))}}},_k=D({avgPool3dGrad_:function Tk(n,t,e,s,r,a){const o=C(n,"dy","avgPool3dGrad"),i=C(t,"input","avgPool3dGrad");let l=o,u=i,c=!1;4===i.rank&&(c=!0,l=F(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),u=F(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),S(5===l.rank,()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`),S(5===u.rank,()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`),mn("avgPool3dGrad",r,a);const p=R.runKernel(_c,{dy:l,input:u},{filterSize:e,strides:s,pad:r,dimRoundingMode:a});return c?F(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),$k={kernelName:Li,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{filterSize:r,strides:a,pad:o,dimRoundingMode:i}=e;return{x:()=>_k(n,s,r,a,o,i)}}},Ak=D({avgPoolGrad_:function Ek(n,t,e,s,r){const a=C(n,"dy","avgPoolGrad"),o=C(t,"input","avgPoolGrad");S(o.rank===a.rank,()=>`Rank of input (${o.rank}) does not match rank of dy (${a.rank})`);let i=o,l=a,u=!1;3===o.rank&&(u=!0,i=F(o,[1,o.shape[0],o.shape[1],o.shape[2]]),l=F(a,[1,a.shape[0],a.shape[1],a.shape[2]])),S(4===l.rank,()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`),S(4===i.rank,()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${i.rank}.`);const d=R.runKernel(Tc,{dy:l,input:i},{filterSize:e,strides:s,pad:r});return u?F(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),Rk={kernelName:Pi,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{filterSize:r,strides:a,pad:o}=e;return{x:()=>Ak(n,s,r,a,o)}}},Dk={kernelName:Vi,inputsToSave:["a","b"],gradFunc:(n,t,e)=>{const[s,r]=t,{transposeA:a,transposeB:o}=e;return a||o?!a&&o?{a:()=>et(n,r,!1,!1),b:()=>et(n,s,!0,!1)}:a&&!o?{a:()=>et(r,n,!1,!0),b:()=>et(s,n,!1,!1)}:{a:()=>et(r,n,!0,!0),b:()=>et(n,s,!0,!0)}:{a:()=>et(n,r,!1,!0),b:()=>et(s,n,!0,!1)}}},ep=D({spaceToBatchND_:function Fk(n,t,e){const s=C(n,"x","spaceToBatchND");return S(s.rank>=1+t.length,()=>`input rank ${s.rank} should be > than [blockShape] ${t.length}`),S(e.length===t.length,()=>`paddings.shape[0] ${e.length} must be equal to [blockShape] ${t.length}`),S(s.shape.reduce((o,i,l)=>l>0&&l<=t.length?o&&(i+e[l-1][0]+e[l-1][1])%t[l-1]==0:o,!0),()=>`input spatial dimensions ${s.shape.slice(1)} with paddings ${e.toString()} must be divisible by blockShapes ${t.toString()}`),R.runKernel(Tl,{x:s},{blockShape:t,paddings:e})}}),Ok={kernelName:Mi,gradFunc:(n,t,e)=>{const{blockShape:s,crops:r}=e;return{x:()=>ep(n,s,r)}}},Pk={kernelName:"BroadcastTo",gradFunc:(n,t,e)=>{const r=e.inputShape,a=e.shape,o=Array.from(a);for(let l=r.length-1;l>=0;l--)if(r[l]===a[l])o[l]=1;else if(1!==r[l])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${a}].`);const i=[];for(let l=0;l<o.length;l++)o[l]>1&&i.push(l);return{x:()=>be(n,i,!0)}}},Lk={kernelName:Ya,gradFunc:n=>({x:()=>n.clone()})},Vk={kernelName:Za,gradFunc:n=>({x:()=>Xe(n)})},Mk={kernelName:Ja,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{clipValueMin:r,clipValueMax:a}=e;return{x:()=>gn(Fs(Dr(s,r),xa(s,a)),n,Xe(n))}}},zk={kernelName:zi,inputsToSave:["x"],gradFunc:yy.gradFunc},Bk={kernelName:Bi,saveAllInputs:!0,gradFunc:(n,t,e)=>{const s=t.map(l=>l.shape),{axis:r}=e,a=Ue(r,t[0].shape)[0],o=s.map(l=>l[a]);return On(n,o,a).map(l=>()=>l)}},Wk={kernelName:Wi,inputsToSave:["x","filter"],gradFunc:(n,t,e)=>{const[s,r]=t,{dilations:a,strides:o,pad:i,dataFormat:l}=e;return S(nr(a),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`),{x:()=>ad(s.shape,n,r,o,i,l),filter:()=>Nd(s,n,r.shape,o,i,l)}}},Uk={kernelName:Ui,inputsToSave:["dy","filter"],gradFunc:(n,t,e)=>{const[s,r]=t,{strides:a,pad:o,dataFormat:i,dimRoundingMode:l}=e;return{dy:()=>Rr(n,r,a,o,i,1,l),filter:()=>Nd(n,s,r.shape,a,o,i,l)}}},Hk=D({conv3DBackpropFilter_:function Gk(n,t,e,s,r){let a=n;4===n.rank&&(a=F(n,[1,n.shape[0],n.shape[1],n.shape[2],n.shape[3]]));let o=t;return 4===o.rank&&(o=F(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),S(5===a.rank,()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${a.shape}.`),S(5===o.rank,()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${o.shape}.`),S(5===e.length,()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${e}.`),S(a.shape[4]===e[3],()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${e[3]}.`),S(o.shape[4]===e[4],()=>`Error in conv3dDerFilter: depth of dy (${o.shape[4]}) must match output depth for filter (${e[4]}).`),R.runKernel(Dc,{x:a,dy:o},{strides:s,pad:r,filterShape:e})}}),jk={kernelName:Gi,inputsToSave:["x","filter"],gradFunc:(n,t,e)=>{const{dilations:s,strides:r,pad:a}=e;S(nr(s),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);const[o,i]=t;return{x:()=>yg(o.shape,n,i,r,a),filter:()=>Hk(o,n,i.shape,r,a)}}},xy=D({sin_:function qk(n){const e={x:C(n,"x","sin","float32")};return R.runKernel(_o,e)}}),Kk={kernelName:Qa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>E(yt(xy(he(e,"float32"))),n)}}},by=D({sinh_:function Xk(n){const e={x:C(n,"x","sinh")};return R.runKernel($o,e)}}),Yk={kernelName:eo,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>E(by(he(e,"float32")),n)}}},wy=D({cumsum_:function Zk(n,t=0,e=!1,s=!1){const a={x:C(n,"x","cumsum")};return R.runKernel(Hi,a,{axis:t,exclusive:e,reverse:s})}}),Jk={kernelName:Hi,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{axis:r,exclusive:a,reverse:o}=e;return{x:()=>{const i=It([r],s.rank);let l=wy(n,r,a,!o);return null!=i&&(l=Ye(l,i)),l}}}},Qk={kernelName:ji,inputsToSave:["x","filter"],gradFunc:(n,t,e)=>{const{dilations:s,strides:r,pad:a,dimRoundingMode:o}=e,i=s??[1,1];S(nr(i),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${i}'`);const[l,u]=t;return S(4===l.rank,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`),S(4===u.rank,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`),S(l.shape[3]===u.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`),S(en(r,i),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${i}'.`),mn("depthwiseConv2d",a,o),{x:()=>Eg(l.shape,n,u,r,a,i,o),filter:()=>$g(l,n,u.shape,r,a,i,o)}}},eT={kernelName:qi,inputsToSave:["x","filter"],gradFunc:(n,t,e)=>{const[s,r]=t,a={x:s,filter:r,dy:n},o={x:s,filter:r,dy:n};return{x:()=>R.runKernel(Bc,a,e),filter:()=>R.runKernel(Wc,o,e)}}},tT={kernelName:no,outputsToSave:[!0],gradFunc:(n,t)=>{const[e]=t,s={dy:n,y:e};return{x:()=>R.runKernel(Gc,s)}}},nT={kernelName:so,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t,s=E(Dn(yt(dt(e))),2/Math.sqrt(Math.PI));return{x:()=>E(n,s)}}},sT={kernelName:ro,outputsToSave:[!0],gradFunc:(n,t)=>{const[e]=t;return{x:()=>E(n,e)}}},rT={kernelName:Xi,inputsToSave:["input"],gradFunc:(n,t)=>{const[e]=t;return{input:()=>F(n,e.shape)}}},aT={kernelName:ao,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>E(n,Dn(e))}}},oT={kernelName:oo,gradFunc:n=>({x:()=>Xe(n)})},iT={kernelName:lo,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Pe(e.shape,s.shape);return{a:()=>{const i=Ie(n,he(s,"float32")),l=Lt(e.shape,r);return l.length>0?F(be(i,l),e.shape):i},b:()=>{let i=E(n,he(e,"float32"));const l=Lt(s.shape,r);l.length>0&&(i=F(be(i,l),s.shape));const u=dt(s);return yt(Ie(i,he(u,"float32")))}}}},vy=D({rsqrt_:function lT(n){const e={x:C(n,"x","rsqrt","float32")};return R.runKernel(ko,e)}}),uT={kernelName:Yi,inputsToSave:["x","mean","variance","scale"],gradFunc:(n,t,e)=>{const{varianceEpsilon:s}=e,[r,a,o,i]=t,l=i??Fe(1),u=Lt(a.shape,r.shape),c=[];if(1===a.rank){for(let w=0;w<r.shape.length-1;++w)c.push(r.shape[w]);c.push(1)}const h=ge(r,a),d=E(n,l),p=vy(ne(o,Fe(s))),f=E(E(E(p,p),p),Fe(-.5));return{x:()=>F(E(E(n,1===a.rank?ts(F(p,[1,1,1,a.shape[0]]),c):p),l),r.shape),mean:()=>{let w=E(E(p,Fe(-1)),d);return 1===a.rank&&(w=be(w,u)),F(w,a.shape)},variance:()=>{let w=E(E(f,h),d);return 1===a.rank&&(w=be(w,u)),F(w,a.shape)},scale:()=>{const w=E(h,p);let v=E(n,w);return 1===a.rank&&(v=be(v,u)),F(v,a.shape)},offset:()=>{let w=n;return 1===a.rank&&(w=be(w,u)),F(w,a.shape)}}}},Sy=D({unsortedSegmentSum_:function cT(n,t,e){const s=C(n,"x","unsortedSegmentSum"),r=C(t,"segmentIds","unsortedSegmentSum","int32");return S(Gt(e),()=>"numSegments must be of dtype int"),R.runKernel(Rl,{x:s,segmentIds:r},{numSegments:e})}}),hT={kernelName:Zi,inputsToSave:["x","indices"],gradFunc:(n,t,e)=>{const[s,r]=t,{axis:a,batchDims:o}=e,i=Ue(a,s.shape)[0],l=(u,c,h)=>()=>{const d=u.shape,p=c.size,f=d.slice(0,i),g=f.length,m=d.slice(a,d.length).slice(1),y=m.length,x=Iy(0,g),b=Iy(g+1,g+1+y),w=Ny([f,[p],m]),v=F(h,w),I=F(c,[p]),N=Ny([[g],x,b]),k=Ye(v,N);let _=Sy(k,I,u.shape[i]);const $=sr(N);return _=Ye(_,$),_};if(1===o){const c=s.split(s.shape[0],0);return{x:()=>Ls(c.map((p,f)=>l(p,r.slice(f,1),n.slice(f,1))())).reshape(s.shape),indices:()=>r}}return{x:l(s,r,n),indices:()=>r}}};function Iy(n,t){const e=[];for(let s=n;s<t;++s)e.push(s);return e}function Ny(n){const t=[];for(let e=0;e<n.length;++e)for(let s=0;s<n[e].length;++s)t.push(n[e][s]);return t}const dT={kernelName:uo,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t;return{a:()=>Xe(e),b:()=>Xe(s)}}},pT={kernelName:co,gradFunc:n=>({x:()=>he(n,"float32")})},fT={kernelName:ho,gradFunc:n=>({x:()=>Xe(n)})},mT={kernelName:po,gradFunc:n=>({x:()=>Xe(n)})},gT={kernelName:fo,gradFunc:n=>({x:()=>Xe(n)})},yT={kernelName:Qi,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{alpha:r}=e,a=Fn(s,0);return{x:()=>gn(a,n,E(n,r))}}},xT={kernelName:go,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Ie(n,ne(e,1))}}},bT={kernelName:mo,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Ie(n,he(e,"float32"))}}},wT={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s]=t,{axis:r}=e;return{logits:()=>{const o=Dn(s);return ge(n,E(be(n,r,!0),o))}}}},ST=D({localResponseNormalizationBackprop_:function vT(n,t,e,s=5,r=1,a=1,o=.5){return R.runKernel(Yc,{x:n,y:t,dy:e},{depthRadius:s,bias:r,alpha:a,beta:o})}}),IT={kernelName:al,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s,r]=t,{depthRadius:a,bias:o,alpha:i,beta:l}=e;return{x:()=>ST(s,r,n,a,o,i,l)}}};function Cy(n,t,e,s){return t.rank<e.rank&&(t=F(t,$t(t.shape,s))),n.rank<e.rank&&(n=F(n,$t(n.shape,s))),{x:()=>E(n,he(gs(e,t),n.dtype))}}const ky={kernelName:ol,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const s=e,{reductionIndices:r}=s,a=t[0],l=Cy(n,t[1],a,Ue(r,a.shape));return{x:()=>l.x()}}},NT={kernelName:yo,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t;return{a:()=>E(n,he(Dr(e,s),"float32")),b:()=>E(n,he(iu(e,s),"float32"))}}},kT=D({maxPool3dGrad_:function CT(n,t,e,s,r,a,o){const i=C(n,"dy","maxPool3dGrad"),l=C(t,"input","maxPool3dGrad"),u=C(e,"output","maxPool3dGrad");let c=i,h=l,d=u,p=!1;4===l.rank&&(p=!0,c=F(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),h=F(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),d=F(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),S(5===c.rank,()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`),S(5===h.rank,()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${h.rank}.`),S(5===d.rank,()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${d.rank}.`),mn("maxPool3dGrad",a,o);const m=R.runKernel(Jc,{dy:c,input:h,output:d},{filterSize:s,strides:r,pad:a,dimRoundingMode:o});return p?F(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}}),TT={kernelName:ll,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s,r]=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:l}=e;return{x:()=>kT(n,s,r,a,o,i,l)}}},$T=D({maxPoolGrad_:function _T(n,t,e,s,r,a,o){const i=C(n,"dy","maxPoolGrad"),l=C(t,"input","maxPoolGrad"),u=C(e,"output","maxPoolGrad");return S(l.rank===i.rank,()=>`Rank of input (${l.rank}) does not match rank of dy (${i.rank})`),S(4===i.rank,()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${i.rank}.`),S(4===l.rank,()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`),mn("maxPoolGrad",a,o),R.runKernel(Zc,{dy:i,input:l,output:u},{filterSize:s,strides:r,pad:a,dimRoundingMode:o})}}),ET={kernelName:il,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s,r]=t,{filterSize:a,strides:o,pad:i}=e;return{x:()=>$T(n,s,r,a,o,i)}}},AT={kernelName:ul,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{axis:r}=e,a=Ue(r,s.shape),l=L(Xt(s.shape,a)[1]);return{x:()=>{const c=s.shape.slice();a.forEach(p=>{c[p]=1});const h=F(n,c);return Ie(E(h,Os(s.shape,"float32")),l)}}}},RT={kernelName:cl,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const s=e,{axis:r}=s,[a,o]=t,l=Cy(n,o,a,Ue(r,a.shape));return{x:()=>l.x()}}},DT={kernelName:xo,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t;return{a:()=>E(n,he(xa(e,s),"float32")),b:()=>E(n,he(Fn(e,s),"float32"))}}},FT={kernelName:hl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const s=t[0],{paddings:r}=e,a=r.map(o=>o[0]);return{x:()=>ot(n,a,s.shape)}}},OT={kernelName:bo,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Pe(e.shape,s.shape);return{a:()=>{const i=Lt(e.shape,r);return i.length>0?F(be(n,i),e.shape):n},b:()=>{const i=E(n,yt(Zl(Ie(e,s)))),l=Lt(s.shape,r);return l.length>0?F(be(i,l),s.shape):i}}}},PT={kernelName:wo,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Pe(e.shape,s.shape);return{a:()=>{const i=E(n,he(s,"float32")),l=Lt(e.shape,r);return l.length>0?F(be(i,l),e.shape):i},b:()=>{const i=E(n,he(e,"float32")),l=Lt(s.shape,r);return l.length>0?F(be(i,l),s.shape):i}}}},LT={kernelName:dl,gradFunc:n=>({x:()=>yt(n)})},VT={kernelName:ml,inputsToSave:["indices"],gradFunc:(n,t)=>{const e=t[0];return{indices:()=>Yt(e.shape,"float32")}}},MT={kernelName:fl,gradFunc:n=>({x:()=>Xe(n)})},zT={kernelName:gl,saveAllInputs:!0,gradFunc:(n,t,e)=>{const{axis:s}=e;return Or(n,s).map(a=>()=>a)}},Ty={kernelName:yl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const s=t[0],{paddings:r}=e,a=r.map(o=>o[0]);return{x:()=>ot(n,a,s.shape)}}},BT={kernelName:vo,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(n,t)=>{const[e,s,r]=t,a=e,o=s,i=Pe(a.shape,o.shape);return{a:()=>{const c=he(o,"float32");let h=E(n,E(c,da(a,ge(c,Fe(1)))));const d=Lt(a.shape,i);return d.length>0&&(h=be(h,d)),F(h,a.shape)},b:()=>{const c=Fn(a,0),h=gn(c,Hn(a),Xe(a));let d=E(n,E(r,h));const p=Lt(o.shape,i);return p.length>0&&(d=be(d,p)),F(d,o.shape)}}}},WT={kernelName:xl,inputsToSave:["x","alpha"],gradFunc:(n,t)=>{const[e,s]=t,r=Fn(e,0);return{x:()=>gn(r,n,E(n,s)),alpha:()=>{let a=gn(r,Xe(n),E(n,e));const o=Lt(s.shape,n.shape);return o.length>0&&(a=be(a,o)),F(a,s.shape)}}}},tp=D({cumprod_:function UT(n,t=0,e=!1,s=!1){const a={x:C(n,"x","cumprod")};return R.runKernel(Oc,a,{axis:t,exclusive:e,reverse:s})}});const jT={kernelName:bl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{axis:r}=e;let a=[];return a=null==r?s.shape.map((o,i)=>i):"number"==typeof r?[r]:r,{x:()=>function HT(n,t,e){const s=n.shape.length,r=s-e.length,a=It(e,s);let o=n;null!=a&&(o=Ye(n,a));const i=o.shape.slice(),u=i.splice(s-e.length,e.length).reduce((d,p)=>d*p,1);i.push(u);let h=function GT(n,t,e){const s=n.shape.slice();s[e]=1;const r=F(t,s),a=tp(n,e,!0,!1),o=tp(n,e,!0,!0),i=E(a,o);return E(r,i)}(o.reshape(i),t,r);if(h=h.reshape(o.shape),null!=a){const d=sr(a);h=Ye(h,d)}return h}(s,n,a)}}},qT={kernelName:to,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Pe(e.shape,s.shape);return{a:()=>{const i=Ie(n,he(s,"float32")),l=Lt(e.shape,r);return l.length>0?F(be(i,l),e.shape):i},b:()=>{let i=E(n,he(e,"float32"));const l=Lt(s.shape,r);l.length>0&&(i=F(be(i,l),s.shape));const u=dt(s);return yt(Ie(i,he(u,"float32")))}}}},KT={kernelName:So,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Ie(n,yt(dt(e)))}}},XT={kernelName:No,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t,s=E(xa(e,6),ni(e));return{x:()=>E(n,he(s,"float32"))}}},YT={kernelName:Io,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>E(n,he(ni(e),"float32"))}}},ZT={kernelName:wl,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>F(n,e.shape)}}},JT={kernelName:Sl,inputsToSave:["images"],gradFunc:(n,t,e)=>{const[s]=t,r={dy:n,images:s};return{images:()=>R.runKernel(ah,r,e)}}},QT={kernelName:vl,inputsToSave:["images"],gradFunc:(n,t,e)=>{const[s]=t,r={dy:n,images:s};return{images:()=>R.runKernel(rh,r,e)}}},e_={kernelName:Il,gradFunc:(n,t,e)=>{const{dims:s}=e,r=Ue(s,n.shape);return{x:()=>Fr(n,r)}}},t_={kernelName:Co,gradFunc:n=>({x:()=>Xe(n)})},n_={kernelName:ko,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>yt(Ie(n,E(da(e,1.5),2)))}}},np=D({logicalNot_:function s_(n){const e={x:C(n,"x","logicalNot","bool")};return R.runKernel(sl,e)}}),r_={kernelName:Nl,inputsToSave:["condition"],gradFunc:(n,t)=>{const[e]=t;return{condition:()=>he(Xe(e),"float32"),t:()=>E(n,he(e,n.dtype)),e:()=>E(n,he(np(e),n.dtype))}}},a_={kernelName:To,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>{const s=Fn(e,Fe(0)),r=Fe(cu),a=Fe(hu),o=E(n,a),i=E(E(n,r),Dn(he(e,"float32")));return gn(s,o,i)}}}},o_={kernelName:Ao,outputsToSave:[!0],gradFunc:(n,t)=>{const[e]=t;return{x:()=>E(n,E(e,ge(Fe(1),e)))}}},i_={kernelName:Eo,gradFunc:n=>({x:()=>Xe(n)})},sp=D({cos_:function l_(n){const e={x:C(n,"x","cos","float32")};return R.runKernel(Qa,e)}}),u_={kernelName:_o,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>E(sp(he(e,"float32")),n)}}},_y=D({cosh_:function c_(n){const e={x:C(n,"x","cosh","float32")};return R.runKernel(eo,e)}}),h_={kernelName:$o,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>E(_y(he(e,"float32")),n)}}},d_={kernelName:Cl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{begin:r,size:a}=e,o=s.shape,[i,l]=ql(s,r,a),u=[];for(let c=0;c<n.rank;c++)u.push([i[c],o[c]-i[c]-l[c]]);return{x:()=>dd(n,u)}}},p_={kernelName:$l,outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s]=t,{dim:r}=e,o=E(n,s);return{logits:()=>ge(o,E(be(o,[r],!0),s))}}},f_={kernelName:Ro,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>E(n,ga(e))}}},rp=D({batchToSpaceND_:function m_(n,t,e){const s=C(n,"x","batchToSpaceND"),r=t.reduce((i,l)=>i*l);return S(s.rank>=1+t.length,()=>`input rank is ${s.rank} but should be > than blockShape.length ${t.length}`),S(e.length===t.length,()=>`crops.length is ${e.length} but should be equal to blockShape.length  ${t.length}`),S(s.shape[0]%r==0,()=>`input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${r}`),R.runKernel(Mi,{x:s},{blockShape:t,crops:e})}}),$y={kernelName:Tl,gradFunc:(n,t,e)=>{const{blockShape:s,paddings:r}=e;return{x:()=>rp(n,s,r)}}},Ey={kernelName:_l,gradFunc:(n,t,e)=>{const{axis:s}=e;return{x:()=>un(n,s)}}},E_=[yy,gk,yk,xk,bk,wk,vk,Sk,Ik,Nk,Ck,kk,$k,Rk,Dk,Ok,Pk,Lk,Vk,Mk,zk,Bk,Uk,Wk,jk,Kk,Yk,Jk,Qk,eT,qT,tT,nT,sT,rT,aT,iT,oT,uT,hT,dT,pT,fT,mT,gT,yT,xT,bT,wT,IT,ky,ky,NT,TT,ET,AT,RT,DT,FT,OT,PT,LT,VT,MT,zT,Ty,Ty,BT,WT,jT,KT,XT,YT,ZT,JT,QT,e_,t_,n_,r_,a_,o_,i_,u_,h_,d_,p_,f_,$y,$y,Ey,Ey,{kernelName:Do,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Ie(n,E(fn(he(e,"float32")),2))}}},{kernelName:Fo,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Fe(2);return{a:()=>E(n,E(r,ge(e,s))),b:()=>E(n,E(r,ge(s,e)))}}},{kernelName:ch,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>E(n,E(he(e,"float32"),2))}}},{kernelName:Mo,gradFunc:n=>({x:()=>Xe(n)})},{kernelName:Oo,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Pe(e.shape,s.shape);return{a:()=>{let i=n;const l=Lt(e.shape,r);return l.length>0&&(i=be(i,l)),F(i,e.shape)},b:()=>{let i=n;const l=Lt(s.shape,r);return l.length>0&&(i=be(i,l)),F(yt(i),s.shape)}}}},{kernelName:kl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,r=s.shape.slice(),{axis:a}=e;Ue(a,s.shape).forEach(u=>{r[u]=1});const i=F(n,r),l=E(i,Os(s.shape,"float32"));return{x:()=>l}}},{kernelName:Po,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Ie(n,dt(sp(e)))}}},{kernelName:Lo,outputsToSave:[!0],gradFunc:(n,t)=>{const[e]=t;return{x:()=>E(ge(Fe(1),dt(e)),n)}}},{kernelName:Vo,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{reps:r}=e;return{x:()=>{let o=Xe(s);if(1===s.rank)for(let i=0;i<r[0];++i)o=ne(o,ot(n,[i*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let i=0;i<r[0];++i)for(let l=0;l<r[1];++l)o=ne(o,ot(n,[i*s.shape[0],l*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let i=0;i<r[0];++i)for(let l=0;l<r[1];++l)for(let u=0;u<r[2];++u)o=ne(o,ot(n,[i*s.shape[0],l*s.shape[1],u*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);for(let i=0;i<r[0];++i)for(let l=0;l<r[1];++l)for(let u=0;u<r[2];++u)for(let c=0;c<r[3];++c)o=ne(o,ot(n,[i*s.shape[0],l*s.shape[1],u*s.shape[2],c*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return o}}}},{kernelName:ra,gradFunc:(n,t,e)=>{const s=e,{perm:r}=s,a=sr(r);return{x:()=>Ye(n,a)}}},{kernelName:Al,gradFunc:(n,t,e)=>{const s=e,{axis:r}=s;return{value:()=>Ls(n,r)}}},{kernelName:Rl,inputsToSave:["segmentIds"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>function __(n,t){const e=er(t,Xe(t)),s=Yo(n,e);let r=Dr(t,Fe(0,"int32"));const a=s.rank-r.rank;for(let i=0;i<a;++i)r=Sn(r,i+1);r=Fs(r,Os(s.shape,"bool"));const o=Xe(s);return gn(r,s,o)}(n,e)}}},{kernelName:Dl,gradFunc:n=>({x:()=>Xe(n)})}];for(const n of E_)A1(n);j().prototype.abs=function(){return this.throwIfDisposed(),qt(this)};const R_=D({acos_:function A_(n){const e={x:C(n,"x","acos")};return R.runKernel(Ua,e)}});j().prototype.acos=function(){return this.throwIfDisposed(),R_(this)};const F_=D({acosh_:function D_(n){const e={x:C(n,"x","acosh")};return R.runKernel(Ga,e)}});j().prototype.acosh=function(){return this.throwIfDisposed(),F_(this)},j().prototype.add=function(n){return this.throwIfDisposed(),ne(this,n)},j().prototype.all=function(n,t){return this.throwIfDisposed(),fg(this,n,t)},j().prototype.any=function(n,t){return this.throwIfDisposed(),td(this,n,t)},j().prototype.argMax=function(n){return this.throwIfDisposed(),Ho(this,n)};const P_=D({argMin_:function O_(n,t=0){const s={x:C(n,"x","argMin")};return R.runKernel(Oi,s,{axis:t})}});j().prototype.argMin=function(n){return this.throwIfDisposed(),P_(this,n)},j().prototype.asScalar=function(){return this.throwIfDisposed(),S(1===this.size,()=>"The array must have only 1 element."),F(this,[])},j().prototype.asType=function(n){return this.throwIfDisposed(),he(this,n)},j().prototype.as1D=function(){return this.throwIfDisposed(),F(this,[this.size])},j().prototype.as2D=function(n,t){return this.throwIfDisposed(),F(this,[n,t])},j().prototype.as3D=function(n,t,e){return this.throwIfDisposed(),F(this,[n,t,e])},j().prototype.as4D=function(n,t,e,s){return this.throwIfDisposed(),F(this,[n,t,e,s])},j().prototype.as5D=function(n,t,e,s,r){return this.throwIfDisposed(),F(this,[n,t,e,s,r])};const V_=D({asin_:function L_(n){const e={x:C(n,"x","asin")};return R.runKernel(Ha,e)}});j().prototype.asin=function(){return this.throwIfDisposed(),V_(this)};const z_=D({asinh_:function M_(n){const e={x:C(n,"x","asinh")};return R.runKernel(ja,e)}});j().prototype.asinh=function(){return this.throwIfDisposed(),z_(this)};const W_=D({atan_:function B_(n){const e={x:C(n,"x","atan")};return R.runKernel(qa,e)}});j().prototype.atan=function(){return this.throwIfDisposed(),W_(this)};const G_=D({atan2_:function U_(n,t){let e=C(n,"a","atan2"),s=C(t,"b","atan2");return[e,s]=kt(e,s),R.runKernel(Xa,{a:e,b:s})}});j().prototype.atan2=function(n){return this.throwIfDisposed(),G_(this,n)};const j_=D({atanh_:function H_(n){const e={x:C(n,"x","atanh")};return R.runKernel(Ka,e)}});j().prototype.atanh=function(){return this.throwIfDisposed(),j_(this)},j().prototype.avgPool=function(n,t,e,s){return this.throwIfDisposed(),rd(this,n,t,e,s)},j().prototype.batchToSpaceND=function(n,t){return this.throwIfDisposed(),rp(this,n,t)},j().prototype.batchNorm=function(n,t,e,s,r){return this.throwIfDisposed(),Kl(this,n,t,e,s,r)},j().prototype.broadcastTo=function(n){return this.throwIfDisposed(),Xo(this,n)},j().prototype.cast=function(n){return this.throwIfDisposed(),he(this,n)};const K_=D({ceil_:function q_(n){const e={x:C(n,"x","ceil","float32")};return R.runKernel(Za,e)}});j().prototype.ceil=function(){return this.throwIfDisposed(),K_(this)},j().prototype.clipByValue=function(n,t){return this.throwIfDisposed(),Rn(this,n,t)},j().prototype.concat=function(n,t){return this.throwIfDisposed(),n instanceof Pt&&(n=[n]),un([this,...n],t)},j().prototype.conv1d=function(n,t,e,s,r,a){return this.throwIfDisposed(),mg(this,n,t,e,s,r,a)},j().prototype.conv2dTranspose=function(n,t,e,s,r){return this.throwIfDisposed(),gg(this,n,t,e,s,r)},j().prototype.conv2d=function(n,t,e,s,r,a){return this.throwIfDisposed(),Rr(this,n,t,e,s,r,a)},j().prototype.cos=function(){return this.throwIfDisposed(),sp(this)},j().prototype.cosh=function(){return this.throwIfDisposed(),_y(this)},j().prototype.cumprod=function(n,t,e){return this.throwIfDisposed(),tp(this,n,t,e)},j().prototype.cumsum=function(n,t,e){return this.throwIfDisposed(),wy(this,n,t,e)};const Y_=D({depthToSpace_:function X_(n,t,e="NHWC"){const s=C(n,"x","depthToSpace","float32"),r="NHWC"===e?s.shape[1]:s.shape[2],a="NHWC"===e?s.shape[2]:s.shape[3],o="NHWC"===e?s.shape[3]:s.shape[1];return S(t>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`),S(r*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${r} and ${t}  for depthToSpace with input shape\n    ${s.shape}`),S(a*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${s.shape}`),S(o%(t*t)==0,()=>`Dimension size must be evenly divisible by ${t*t} but is ${o} for depthToSpace with input shape ${s.shape}`),R.runKernel(Vc,{x:s},{blockSize:t,dataFormat:e})}});j().prototype.depthToSpace=function(n,t){return this.throwIfDisposed(),Y_(this,n,t)},j().prototype.depthwiseConv2d=function(n,t,e,s,r,a){return this.throwIfDisposed(),Xl(this,n,t,e,s,r,a)};const J_=D({dilation2d_:function Z_(n,t,e,s,r=[1,1],a="NHWC"){const o=C(n,"x","dilation2d"),i=C(t,"filter","dilation2d");S(3===o.rank||4===o.rank,()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${o.rank}.`),S(3===i.rank,()=>`Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`),S("NHWC"===a,()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`);let l=o,u=!1;3===o.rank&&(l=F(o,[1,o.shape[0],o.shape[1],o.shape[2]]),u=!0),S(l.shape[3]===i.shape[2],()=>`Error in dilation2d:  input and filter must have the same depth: ${l.shape[3]} vs ${i.shape[2]}`);const d=R.runKernel(qi,{x:l,filter:i},{strides:e,pad:s,dilations:r});return u?F(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});j().prototype.dilation2d=function(n,t,e,s,r){return this.throwIfDisposed(),J_(this,n,t,e,s,r)};const e$=D({divNoNan_:function Q_(n,t){let e=C(n,"a","div"),s=C(t,"b","div");[e,s]=kt(e,s);const r=Ie(e,s),a=Xe(r),o=gs(s,a);return gn(o,a,r)}});j().prototype.divNoNan=function(n){return this.throwIfDisposed(),e$(this,n)},j().prototype.div=function(n){return this.throwIfDisposed(),Ie(this,n)};const n$=D({dot_:function t$(n,t){const e=C(n,"t1","dot"),s=C(t,"t2","dot");S(!(1!==e.rank&&2!==e.rank||1!==s.rank&&2!==s.rank),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${e.rank} and ${s.rank}.`);const r=1===e.rank?e.size:e.shape[1],a=1===s.rank?s.size:s.shape[0];if(S(r===a,()=>`Error in dot: inner dimensions of inputs must match, but got ${r} and ${a}.`),1===e.rank&&1===s.rank){const o=F(e,[1,-1]),i=F(s,[-1,1]),l=et(o,i);return F(l,[])}if(1===e.rank&&2===s.rank){const o=F(e,[1,-1]),i=F(s,[s.shape[0],s.shape[1]]),l=et(o,i);return F(l,[l.size])}if(2===e.rank&&1===s.rank){const o=F(s,[-1,1]),i=et(e,o);return F(i,[i.size])}{const o=F(s,[s.shape[0],s.shape[1]]);return et(e,o)}}});j().prototype.dot=function(n){return this.throwIfDisposed(),n$(this,n)},j().prototype.elu=function(){return this.throwIfDisposed(),Yl(this)},j().prototype.equal=function(n){return this.throwIfDisposed(),gs(this,n)};const r$=D({erf_:function s$(n){let t=C(n,"x","erf");return S("int32"===t.dtype||"float32"===t.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===t.dtype&&(t=he(t,"float32")),R.runKernel(so,{x:t})}});j().prototype.erf=function(){return this.throwIfDisposed(),r$(this)};const o$=D({euclideanNorm_:function a$(n,t=null,e=!1){return lu(n,"euclidean",t,e)}});j().prototype.euclideanNorm=function(n,t){return this.throwIfDisposed(),o$(this,n,t)},j().prototype.exp=function(){return this.throwIfDisposed(),Dn(this)},j().prototype.expandDims=function(n){return this.throwIfDisposed(),Sn(this,n)};const l$=D({expm1_:function i$(n){const e={x:C(n,"x","expm1")};return R.runKernel(ao,e)}});j().prototype.expm1=function(){return this.throwIfDisposed(),l$(this)},j().prototype.fft=function(){return this.throwIfDisposed(),Sd(this)},j().prototype.flatten=function(){return this.throwIfDisposed(),F(this,[this.size])},j().prototype.floor=function(){return this.throwIfDisposed(),Zl(this)},j().prototype.floorDiv=function(n){return this.throwIfDisposed(),Gm(this,n)},j().prototype.gather=function(n,t,e){return this.throwIfDisposed(),Yo(this,n,t,e)},j().prototype.greaterEqual=function(n){return this.throwIfDisposed(),Dr(this,n)},j().prototype.greater=function(n){return this.throwIfDisposed(),Fn(this,n)},j().prototype.ifft=function(){return this.throwIfDisposed(),tu(this)},j().prototype.irfft=function(){return this.throwIfDisposed(),Tg(this)};const c$=D({isFinite_:function u$(n){const e={x:C(n,"x","isFinite")};return R.runKernel(ho,e)}});j().prototype.isFinite=function(){return this.throwIfDisposed(),c$(this)};const d$=D({isInf_:function h$(n){const e={x:C(n,"x","isInf")};return R.runKernel(po,e)}});j().prototype.isInf=function(){return this.throwIfDisposed(),d$(this)};const f$=D({isNaN_:function p$(n){const e={x:C(n,"x","isNaN")};return R.runKernel(fo,e)}});j().prototype.isNaN=function(){return this.throwIfDisposed(),f$(this)},j().prototype.leakyRelu=function(n){return this.throwIfDisposed(),od(this,n)},j().prototype.lessEqual=function(n){return this.throwIfDisposed(),xa(this,n)},j().prototype.less=function(n){return this.throwIfDisposed(),iu(this,n)};const g$=D({localResponseNormalization_:function m$(n,t=5,e=1,s=1,r=.5){const a=C(n,"x","localResponseNormalization");S(4===a.rank||3===a.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`),S(Gt(t),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);let o=a,i=!1;3===a.rank&&(i=!0,o=F(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const c=R.runKernel(al,{x:o},{depthRadius:t,bias:e,alpha:s,beta:r});return i?F(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});j().prototype.localResponseNormalization=function(n,t,e,s){return this.throwIfDisposed(),g$(this,n,t,e,s)};const x$=D({logSigmoid_:function y$(n){const t=C(n,"x","logSigmoid");return As(s=>({value:yt(ei(yt(s))),gradFunc:o=>E(o,ga(yt(s)))}))(t)}});j().prototype.logSigmoid=function(){return this.throwIfDisposed(),x$(this)},j().prototype.logSoftmax=function(n){return this.throwIfDisposed(),wg(this,n)},j().prototype.logSumExp=function(n,t){return this.throwIfDisposed(),ud(this,n,t)},j().prototype.log=function(){return this.throwIfDisposed(),Hn(this)},j().prototype.log1p=function(){return this.throwIfDisposed(),id(this)},j().prototype.logicalAnd=function(n){return this.throwIfDisposed(),Fs(this,n)},j().prototype.logicalNot=function(){return this.throwIfDisposed(),np(this)};const Ay=D({logicalOr_:function b$(n,t){const e=C(n,"a","logicalOr","bool"),s=C(t,"b","logicalOr","bool");return Pe(e.shape,s.shape),R.runKernel(rl,{a:e,b:s})}});j().prototype.logicalOr=function(n){return this.throwIfDisposed(),Ay(this,n)};const v$=D({logicalXor_:function w$(n,t){const e=C(n,"a","logicalXor","bool"),s=C(t,"b","logicalXor","bool");return Pe(e.shape,s.shape),Fs(Ay(n,t),np(Fs(n,t)))}});j().prototype.logicalXor=function(n){return this.throwIfDisposed(),v$(this,n)},j().prototype.matMul=function(n,t,e){return this.throwIfDisposed(),et(this,n,t,e)},j().prototype.maxPool=function(n,t,e,s){return this.throwIfDisposed(),cd(this,n,t,e,s)},j().prototype.max=function(n,t){return this.throwIfDisposed(),ns(this,n,t)},j().prototype.maximum=function(n){return this.throwIfDisposed(),er(this,n)},j().prototype.mean=function(n,t){return this.throwIfDisposed(),At(this,n,t)},j().prototype.min=function(n,t){return this.throwIfDisposed(),Jl(this,n,t)},j().prototype.minimum=function(n){return this.throwIfDisposed(),ma(this,n)};const I$=D({mirrorPad_:function S$(n,t,e){S("reflect"===e||"symmetric"===e,()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${e}.`);const s=C(n,"x","mirrorPad");if(0===s.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");S(t.length===s.rank,()=>`Padding doesn't match input. Must be ${s.rank}. Got ${t.length}.`);const r="reflect"===e?1:0;for(let i=0;i<s.rank;i++)S(2===t[i].length,()=>"Invalid number of paddings. Must be length of 2 each."),S(t[i][0]>=0&&t[i][0]<=s.shape[i]-r&&t[i][1]>=0&&t[i][1]<=s.shape[i]-r,()=>`Padding in dimension ${i} cannot be greater than or equal to ${s.shape[i]-r} or less than 0 for input of shape ${s.shape}`);return R.runKernel(hl,{x:s},{paddings:t,mode:e})}});j().prototype.mirrorPad=function(n,t){return this.throwIfDisposed(),I$(this,n,t)};const C$=D({mod_:function N$(n,t){let e=C(n,"a","mod"),s=C(t,"b","mod");return[e,s]=kt(e,s),R.runKernel(bo,{a:e,b:s})}});j().prototype.mod=function(n){return this.throwIfDisposed(),C$(this,n)},j().prototype.mul=function(n){return this.throwIfDisposed(),E(this,n)},j().prototype.neg=function(){return this.throwIfDisposed(),yt(this)},j().prototype.norm=function(n,t,e){return this.throwIfDisposed(),lu(this,n,t,e)},j().prototype.notEqual=function(n){return this.throwIfDisposed(),Zo(this,n)},j().prototype.oneHot=function(n,t=1,e=0){return this.throwIfDisposed(),Sg(this,n,t,e)},j().prototype.onesLike=function(){return this.throwIfDisposed(),jn(this)},j().prototype.pad=function(n,t){return this.throwIfDisposed(),dd(this,n,t)};const $$=D({pool_:function k$(n,t,e,s,r,a,o){null==r&&(r=[1,1]),null==a&&(a=1),0===s&&(s="valid");const i=C(n,"x","maxPool");let l=i,u=!1;3===i.rank&&(u=!0,l=F(i,[1,i.shape[0],i.shape[1],i.shape[2]])),S(en(a,r),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${r}'`);const c=Gn(l.shape,t,a,r,s),h=[c.dilationHeight,c.dilationWidth];let d;d="same"===s?function _$(n,t){const s=n.map((o,i)=>o+(o-1)*(t[i]-1)).map(o=>o-1),r=s.map(o=>Math.floor(o/2)),a=s.map((o,i)=>o-r[i]);return s.map((o,i)=>[r[i],a[i]])}([c.filterHeight,c.filterWidth],h):[[0,0],[0,0]];const p=1===h[0]&&1===h[1],[f,g]=function T$(n,t,e){const s=e.map(c=>c[0]),r=e.map(c=>c[1]),a=n.concat(s,r),o=t.map((c,h)=>(c-a[h]%c)%c),i=r.map((c,h)=>c+o[h]),l=t.map((c,h)=>[s[h],i[h]]),u=t.map((c,h)=>[0,o[h]]);return[l,u]}([c.inHeight,c.inWidth],h,d),m=p?s:"valid",y=p?l:ep(l,h,f),b=("avg"===e?()=>rd(y,t,a,m,o):()=>cd(y,t,a,m,o))(),w=p?b:rp(b,h,g);return u?F(w,[w.shape[1],w.shape[2],w.shape[3]]):w}});j().prototype.pool=function(n,t,e,s,r,a){return this.throwIfDisposed(),$$(this,n,t,e,s,r,a)},j().prototype.pow=function(n){return this.throwIfDisposed(),da(this,n)},j().prototype.prelu=function(n){return this.throwIfDisposed(),pd(this,n)};const A$=D({prod_:function E$(n,t=null,e=!1){let s=C(n,"x","prod");return"bool"===s.dtype&&(s=he(s,"int32")),R.runKernel(bl,{x:s},{axis:t,keepDims:e})}});j().prototype.prod=function(n,t){return this.throwIfDisposed(),A$(this,n,t)};const D$=D({reciprocal_:function R$(n){const e={x:C(n,"x","reciprocal")};return R.runKernel(So,e)}});j().prototype.reciprocal=function(){return this.throwIfDisposed(),D$(this)},j().prototype.relu=function(){return this.throwIfDisposed(),Ps(this)},j().prototype.relu6=function(){return this.throwIfDisposed(),_g(this)},j().prototype.reshapeAs=function(n){return this.throwIfDisposed(),F(this,n.shape)},j().prototype.reshape=function(n){return this.throwIfDisposed(),F(this,n)},j().prototype.resizeBilinear=function(n,t,e){return this.throwIfDisposed(),Pg(this,n,t,e)},j().prototype.resizeNearestNeighbor=function(n,t,e){return this.throwIfDisposed(),Lg(this,n,t,e)},j().prototype.reverse=function(n){return this.throwIfDisposed(),Fr(this,n)},j().prototype.rfft=function(){return this.throwIfDisposed(),Id(this)},j().prototype.round=function(){return this.throwIfDisposed(),Vg(this)},j().prototype.rsqrt=function(){return this.throwIfDisposed(),vy(this)},j().prototype.selu=function(){return this.throwIfDisposed(),Ig(this)},j().prototype.separableConv2d=function(n,t,e,s,r,a){return this.throwIfDisposed(),Ng(this,n,t,e,s,r,a)},j().prototype.sigmoid=function(){return this.throwIfDisposed(),ga(this)};const O$=D({sign_:function F$(n){const e={x:C(n,"x","sign")};return R.runKernel(Eo,e)}});j().prototype.sign=function(){return this.throwIfDisposed(),O$(this)},j().prototype.sin=function(){return this.throwIfDisposed(),xy(this)},j().prototype.sinh=function(){return this.throwIfDisposed(),by(this)},j().prototype.slice=function(n,t){return this.throwIfDisposed(),ot(this,n,t)},j().prototype.softmax=function(n){return this.throwIfDisposed(),bd(this,n)},j().prototype.softplus=function(){return this.throwIfDisposed(),ei(this)},j().prototype.spaceToBatchND=function(n,t){return this.throwIfDisposed(),ep(this,n,t)},j().prototype.split=function(n,t){return this.throwIfDisposed(),On(this,n,t)},j().prototype.sqrt=function(){return this.throwIfDisposed(),fn(this)},j().prototype.square=function(){return this.throwIfDisposed(),dt(this)},j().prototype.squaredDifference=function(n){return this.throwIfDisposed(),Bg(this,n)},j().prototype.squeeze=function(n){return this.throwIfDisposed(),ti(this,n)},j().prototype.stack=function(n,t){this.throwIfDisposed();const e=n instanceof Pt?[this,n]:[this,...n];return Ls(e,t)},j().prototype.step=function(n){return this.throwIfDisposed(),ni(this,n)};const L$=D({stridedSlice_:function P$(n,t,e,s,r=0,a=0,o=0,i=0,l=0){const c={x:C(n,"x","stridedSlice","string_or_numeric")};return R.runKernel(hh,c,{begin:t,end:e,strides:s,beginMask:r,endMask:a,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:l})}});j().prototype.stridedSlice=function(n,t,e,s,r,a,o,i){return this.throwIfDisposed(),L$(this,n,t,e,s,r,a,o,i)},j().prototype.sub=function(n){return this.throwIfDisposed(),ge(this,n)},j().prototype.sum=function(n,t){return this.throwIfDisposed(),be(this,n,t)};const M$=D({tan_:function V$(n){const e={x:C(n,"x","tan","float32")};return R.runKernel(Po,e)}});j().prototype.tan=function(){return this.throwIfDisposed(),M$(this)},j().prototype.tanh=function(){return this.throwIfDisposed(),wd(this)},j().prototype.tile=function(n){return this.throwIfDisposed(),ts(this,n)},j().prototype.toBool=function(){return this.throwIfDisposed(),he(this,"bool")},j().prototype.toFloat=function(){return this.throwIfDisposed(),he(this,"float32")},j().prototype.toInt=function(){return this.throwIfDisposed(),he(this,"int32")};const B$=D({topk_:function z$(n,t=1,e=!0){const s=C(n,"x","topk");if(0===s.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const r=s.shape[s.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>r)throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got ${t}`);const a={x:s},o={k:t,sorted:e},[i,l]=R.runKernel(mh,a,o);return{values:i,indices:l}}});j().prototype.topk=function(n,t){return this.throwIfDisposed(),B$(this,n,t)},j().prototype.transpose=function(n){return this.throwIfDisposed(),Ye(this,n)};const U$=D({unique_:function W$(n,t=0){const e=C(n,"x","unique","string_or_numeric");S(e.rank>0,()=>"The input tensor must be at least 1D");const s={x:e},r={axis:t},[a,o]=R.runKernel(yh,s,r);return{values:a,indices:o}}});j().prototype.unique=function(n){return this.throwIfDisposed(),U$(this,n)},j().prototype.unsortedSegmentSum=function(n,t){return this.throwIfDisposed(),Sy(this,n,t)},j().prototype.unstack=function(n){return this.throwIfDisposed(),Or(this,n)},j().prototype.where=function(n,t){return this.throwIfDisposed(),gn(n,this,t)},j().prototype.zerosLike=function(){return this.throwIfDisposed(),Xe(this)};class ws extends Error{constructor(t){super(t),Object.setPrototypeOf(this,ws.prototype)}}class qn extends Error{constructor(t){super(t),Object.setPrototypeOf(this,qn.prototype)}}class A extends Error{constructor(t){super(t),Object.setPrototypeOf(this,A.prototype)}}class Le extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Le.prototype)}}class ap extends Error{constructor(t){super(t),Object.setPrototypeOf(this,ap.prototype)}}class Dy{constructor(t){this.maxEntries=t||100,this.cache=new Map}get(t){let e;return this.cache.has(t)&&(e=this.cache.get(t),this.cache.delete(t),this.cache.set(t,e)),e}put(t,e){if(this.cache.has(t))this.cache.delete(t);else if(this.cache.size>=this.maxEntries){const s=this.cache.keys().next().value;this.cache.delete(s)}this.cache.set(t,e)}getMaxEntries(){return this.maxEntries}setMaxEntries(t){if(t<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${t}.`);if(this.maxEntries>t)for(let e=0;e<this.maxEntries-t;e++){const s=this.cache.keys().next().value;this.cache.delete(s)}this.maxEntries=t}}function Lr(n,t){if(Array.isArray(n)){let e=[];for(let s=0;s<t;s++)e=e.concat(n);return e}{const e=new Array(t);return e.fill(n),e}}function Pn(n,t){if(!n)throw new ap(t)}function Fy(n,t){let e=0;for(const s of n)s===t&&e++;return e}function Nn(n){return 1===n.length?n[0]:n}function nt(n){return Array.isArray(n)?n:[n]}function Bs(n){const e=n.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==e[0]?e:"private"+e}function Vr(n){return n.length<=1||-1===n.indexOf("_")?n:n.replace(/[_]+(\w|$)/g,(t,e)=>e.toUpperCase())}let Kn={};function op(n){if(null==n)return null;const t={};return t.className=n.getClassName(),t.config=n.getConfig(),t}function ip(n){if(null!=n&&"object"==typeof n)if(Array.isArray(n))n.forEach(t=>ip(t));else{const t=Object.keys(n);for(const e of t){const s=n[e];null!=s&&"object"==typeof s&&(Array.isArray(s)||"ndarray"!==s.type||"number"!=typeof s.value?ip(s):n[e]=s.value)}}}function ii(n,t={},e={},s="object",r=!1){if("string"==typeof n){let o;if(n in e)o=e[n];else if(n in Kn)o=Kn[n];else if(o=t[n],null==o)throw new A(`Unknown ${s}: ${n}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return o}{const a=n;if(null==a.className||null==a.config)throw new A(`${s}: Improper config format: ${JSON.stringify(a)}.\n'className' and 'config' must set.`);const o=a.className;let i,l;if(o in e?[i,l]=e[o]:o in Kn?[i,l]=Kn.className:o in t&&([i,l]=t[o]),null==i)throw new A(`Unknown ${s}: ${o}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const u={};for(const p of Object.keys(Kn))u[p]=Kn[p];for(const p of Object.keys(e))u[p]=e[p];a.config.customObjects=u;const h=Object.assign({},Kn);for(const p of Object.keys(e))Kn[p]=e[p];ip(a.config);const d=l(i,a.config,e,r);return Kn=Object.assign({},h),d}{const u=Object.assign({},Kn);for(const h of Object.keys(e))Kn[h]=e[h];const c=new i(a.config);return Kn=Object.assign({},u),c}}}function du(n,t){return-1*function G$(n,t){return n<t?-1:n>t?1:0}(n,t)}function rr(n){if(null==n)return n;const t=[];for(const e of n)-1===t.indexOf(e)&&t.push(e);return t}function H$(n){if(null==n)throw new A(`Invalid value in obj: ${JSON.stringify(n)}`);for(const t in n)if(n.hasOwnProperty(t))return!1;return!0}function Mr(n,t,e){if(null!=e&&n.indexOf(e)<0)throw new A(`${e} is not a valid ${t}.  Valid values are ${n} or null/undefined.`)}function lp(n,t,e=0,s=1/0){return Pn(e>=0),Pn(s>=e),Array.isArray(n)&&n.length>=e&&n.length<=s&&n.every(r=>typeof r===t)}function Zt(n,t){Array.isArray(n)?(S(n.length>0,()=>`${t} is unexpectedly an empty array.`),n.forEach((e,s)=>Zt(e,`element ${s+1} of ${t}`))):S(Number.isInteger(n)&&n>0,()=>`Expected ${t} to be a positive integer, but got ${Oy(n)}.`)}function Oy(n){return null===n?"null":Array.isArray(n)?"["+n.map(t=>Oy(t)).join(",")+"]":"string"==typeof n?`"${n}"`:`${n}`}function Py(n){return"relu"===n?"relu":"linear"===n?"linear":"elu"===n?"elu":null}let q$=0;function Ly(){return q$++}const pu={};function fu(n=""){return n in pu||(pu[n]=0),pu[n]+=1,n+pu[n].toString()}const K$=["channelsFirst","channelsLast"],X$=["nearest","bilinear"],Y$=["valid","same","causal"],Z$=["max","avg"],J$=["sum","mul","concat","ave"],wa=new Map;function Rt(n){Mr(K$,"DataFormat",n)}function Ln(n){Mr(Y$,"PaddingMode",n)}function Vy(n){Mr(Z$,"PoolMode",n)}const li=[];function zr(n,t){li.push(n);try{const e=t();return li.pop(),e}catch(e){throw li.pop(),e}}function zy(n){if(!Wy(n))throw new Error("Not a valid tensor name: '"+n+"'");return function e2(){return 0===li.length?"":li.join("/")+"/"}()+n}function By(n){if(!Wy(n))throw new Error("Not a valid tensor name: '"+n+"'");wa.has(n)||wa.set(n,0);const t=wa.get(n);if(wa.set(n,wa.get(n)+1),t>0){const e=`${n}_${t}`;return wa.set(e,1),e}return n}const t2=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function Wy(n){return!!n.match(t2)}function n2(n){return n===parseInt(n.toString(),10)}function ar(n,t,e){null==t&&(t=0),null==e&&(e=n.length);let s=1;for(let r=t;r<e;++r)s*=n[r];return s}function va(n){if(0===n.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let e=0;e<n.length;e++){const s=n[e];s<t&&(t=s)}return t}function or(n){if(0===n.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let e=0;e<n.length;e++){const s=n[e];s>t&&(t=s)}return t}function ss(n,t){if(t<n)throw new A(`end (${t}) < begin (${n}) is forbidden.`);const e=[];for(let s=n;s<t;++s)e.push(s);return e}let mu;function Vt(){return null==mu&&(mu=function Tm(){return R.backend}().epsilon()),mu}function vs(n,t){return he(n,t)}function ui(n,t=-1){const e=n.shape.slice();return t<0&&(t=e.length+t+1),e.splice(t,0,1),F(n,e)}function Br(n,t,e){return z(()=>{switch(n.rank){case 1:return yd(n,t,e);case 2:return Cg(n,[t,0],[e,n.shape[1]]);case 3:return xd(n,[t,0,0],[e,n.shape[1],n.shape[2]]);case 4:return Ql(n,[t,0,0,0],[e,n.shape[1],n.shape[2],n.shape[3]]);case 5:return ot(n,[t,0,0,0,0],[e,n.shape[1],n.shape[2],n.shape[3],n.shape[4]]);case 6:return ot(n,[t,0,0,0,0,0],[e,n.shape[1],n.shape[2],n.shape[3],n.shape[4],n.shape[5]]);default:throw new A(`sliceAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`)}})}function up(n,t,e){return z(()=>{switch(n.rank){case 1:return yd(n,t,e);case 2:return Cg(n,[0,t],[n.shape[0],e]);case 3:return xd(n,[0,0,t],[n.shape[0],n.shape[1],e]);case 4:return Ql(n,[0,0,0,t],[n.shape[0],n.shape[1],n.shape[2],e]);default:throw new A(`sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`)}})}function gu(n,t,e,s){return z(()=>{switch(n.rank){case 1:return yd(n,t,e);case 2:switch(s){case 1:return Br(n,t,e);case 2:return up(n,t,e);default:throw new A(`The axis is not within the rank of the tensor ${s}`)}case 3:switch(s){case 1:return Br(n,t,e);case 2:return xd(n,[0,t,0],[n.shape[0],e,n.shape[2]]);case 3:return up(n,t,e);default:throw new A(`The axis is not within the rank of the tensor ${s}`)}case 4:switch(s){case 1:return Br(n,t,e);case 2:return Ql(n,[0,t,0,0],[n.shape[0],e,n.shape[2],n.shape[3]]);case 3:return Ql(n,[0,0,t,0],[n.shape[0],n.shape[1],e,n.shape[3]]);case 4:return up(n,t,e);default:throw new A(`The axis is not within the rank of the tensor ${s}`)}default:throw new A(`sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`)}})}function cp(n,t=-1){let e;return t<0&&(e=n[0].rank,t=0!==e?e:0),t===n[0].rank&&(t=-1),un(n,t)}function Gy(n,t){switch(n.rank){case 1:return MS([n,t]);case 2:return BS([n,t],0);case 3:return US([n,t],0);case 4:return HS([n,t],0);default:throw new A(`concatAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`)}}function hp(n,t){if(Array.isArray(t)||(t=[t]),n.rank!==t.length)throw new A(`The length of input n (${t.length}) does not match the number of dimensions in input x (${n.rank})`);return ts(n,t)}function yu(n,t=0,e=1,s,r){return zI(n,t,e,s,r)}function Ss(n,t,e,s){if(n.rank<2||t.rank<2)throw new Le(`dot requires both inputs to be rank >= 2 but got x shape = ${n.shape} and y shape = ${t.shape}`);if(t.rank>=3&&n.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new Le(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${n.shape} and  y shape = ${t.shape}`);if(2===n.rank&&2===t.rank)return Ag({a:n,b:t,transposeA:!1,transposeB:!1,bias:s?dp(n.rank,s,"channelsLast"):null,activation:e});{const r=n.shape.slice(),a=r.pop();n=F(n,[-1,a]);const o=t.shape.slice(),i=o.pop(),l=o.pop(),u=[...o,i],c=Array.from({length:t.rank},(f,g)=>0===g?t.rank-2:g<=t.rank-2?g-1:g);t=F(Ye(t,c),[l,-1]);const h=[...r,...u];return F(Ag({a:n,b:t,transposeA:!1,transposeB:!1,bias:s?dp(n.rank,s,"channelsLast"):null,activation:e}),h)}}function Hy(n,t,e){return z(()=>(t=Array.isArray(t)?In(t,"int32"):he(t,"int32"),Yo(n,t,e)))}function ci(n){return E(n,n)}function dp(n,t,e){const s=t.shape;if(1!==t.rank&&t.rank!==n)throw new A(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${n}`);if(5===n){if("channelsFirst"===e)return F(t,1===s.length?[1,s[0],1,1,1]:[1,s[3],s[0],s[1],s[2]]);if("channelsLast"===e)return F(t,1===s.length?[1,1,1,1,s[0]]:[1].concat(s))}else if(4===n){if("channelsFirst"===e)return F(t,1===s.length?[1,s[0],1,1]:[1,s[2],s[0],s[1]]);if("channelsLast"===e)return F(t,1===s.length?[1,1,1,s[0]]:[1].concat(s))}else if(3===n){if("channelsFirst"===e)return F(t,1===s.length?[1,s[0],1]:[1,s[1],s[0]]);if("channelsLast"===e)return F(t,1===s.length?[1,1,s[0]]:[1].concat(s))}else if(n<3)return t;throw new A(`Unsupported input rank by biasAdd: ${t.rank}`)}function as(n,t,e){return z(()=>(null==e&&(e="channelsLast"),Rt(e),ne(n,dp(n.rank,t,e))))}function jy(n,t,e,s){return z(()=>pN(n,t,e,s))}function hi(n,t,e=!1){return e?n():t()}const h2=["fanIn","fanOut","fanAvg"],d2=["normal","uniform","truncatedNormal"];class Xn extends ha{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}J((()=>{class n extends Xn{apply(e,s){return Yt(e,s)}}return n.className="Zeros",n})());let qy=(()=>{class n extends Xn{apply(e,s){return Os(e,s)}}return n.className="Ones",n})();J(qy),J((()=>{class n extends Xn{constructor(e){if(super(),"object"!=typeof e)throw new A(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new A(`config must have value set but got ${e}`);this.value=e.value}apply(e,s){return z(()=>E(Fe(this.value),Os(e,s)))}getConfig(){return{value:this.value}}}return n.className="Constant",n})()),J((()=>{class n extends Xn{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,s){return Jo(e,this.minval,this.maxval,s,this.seed)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}return n.className="RandomUniform",n})()),J((()=>{class n extends Xn{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,s){if("float32"!==(s=s||"float32")&&"int32"!==s)throw new Le(`randomNormal does not support dType ${s}.`);return yu(e,this.mean,this.stddev,s,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}return n.className="RandomNormal",n})()),J((()=>{class n extends Xn{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,s){if("float32"!==(s=s||"float32")&&"int32"!==s)throw new Le(`truncatedNormal does not support dType ${s}.`);return kg(e,this.mean,this.stddev,s,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}return n.className="TruncatedNormal",n})()),J((()=>{class n extends Xn{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,s){return z(()=>{if(2!==e.length||e[0]!==e[1])throw new A("Identity matrix initializer can only be used for 2D square matrices.");return E(this.gain,bg(e[0]))})}getConfig(){return{gain:this.gain}}}return n.className="Identity",n})());let Vn=(()=>{class n extends Xn{constructor(e){if(super(),e.scale<0)throw new A(`scale must be a positive float. Got: ${e.scale}`);this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,function p2(n){Mr(h2,"FanMode",n)}(this.mode),this.distribution=null==e.distribution?"normal":e.distribution,function f2(n){Mr(d2,"Distribution",n)}(this.distribution),this.seed=e.seed}apply(e,s){const r=function m2(n,t="channelsLast"){let e,s;if(Rt(t),2===n.length)e=n[0],s=n[1];else if(-1!==[3,4,5].indexOf(n.length)){if("channelsFirst"===t){const r=ar(n,2);e=n[1]*r,s=n[0]*r}else if("channelsLast"===t){const r=ar(n,0,n.length-2);e=n[n.length-2]*r,s=n[n.length-1]*r}}else{const r=ar(n);e=Math.sqrt(r),s=Math.sqrt(r)}return[e,s]}(e),a=r[0],o=r[1];let i=this.scale;if(i/="fanIn"===this.mode?Math.max(1,a):"fanOut"===this.mode?Math.max(1,o):Math.max(1,(a+o)/2),"normal"===this.distribution){const l=Math.sqrt(i);if("float32"!==(s=s||"float32")&&"int32"!==s)throw new Le(`${this.getClassName()} does not support dType ${s}.`);return kg(e,0,l,s,this.seed)}{const l=Math.sqrt(3*i);return Jo(e,-l,l,s,this.seed)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}return n.className="VarianceScaling",n})();J(Vn);let Ky=(()=>{class n extends Vn{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Vn.className}}return n.className="GlorotUniform",n})();J(Ky);let Xy=(()=>{class n extends Vn{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Vn.className}}return n.className="GlorotNormal",n})();J(Xy);let Yy=(()=>{class n extends Vn{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Vn.className}}return n.className="HeNormal",n})();J(Yy);let Zy=(()=>{class n extends Vn{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Vn.className}}return n.className="HeUniform",n})();J(Zy);let Jy=(()=>{class n extends Vn{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Vn.className}}return n.className="LeCunNormal",n})();J(Jy);let Qy=(()=>{class n extends Vn{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Vn.className}}return n.className="LeCunUniform",n})();J(Qy),J((()=>{class n extends Xn{constructor(e){super(),this.DEFAULT_GAIN=1,this.ELEMENTS_WARN_SLOW=2e3,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed}apply(e,s){return z(()=>{if(e.length<2)throw new Le("Shape must be at least 2D.");if("int32"!==s&&"float32"!==s&&void 0!==s)throw new TypeError(`Unsupported data type ${s}.`);const r=L(e.slice(0,-1)),a=e[e.length-1],o=r*a;o>this.ELEMENTS_WARN_SLOW&&console.warn(`Orthogonal initializer is being called on a matrix with more than ${this.ELEMENTS_WARN_SLOW} (${o}) elements: Slowness may result.`);const l=yu([Math.max(a,r),Math.min(a,r)],0,1,s,this.seed),u=ck.qr(l,!1);let c=u[0];const d=u[1].flatten().stridedSlice([0],[Math.min(a,r)*Math.min(a,r)],[Math.min(a,r)+1]);return c=E(c,d.sign()),r<a&&(c=c.transpose()),E(Fe(this.gain),c.reshape(e))})}getConfig(){return{gain:this.gain,seed:this.seed}}}return n.className="Orthogonal",n})());const ex={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function tx(n,t={}){return ii(n,Un.getMap().classNameMap,t,"initializer")}function Nt(n){return op(n)}function xt(n){if("string"==typeof n){const t=n in ex?ex[n]:n;if("GlorotNormal"===t)return new Xy;if("GlorotUniform"===t)return new Ky;if("HeNormal"===t)return new Yy;if("HeUniform"===t)return new Zy;if("LeCunNormal"===t)return new Jy;if("LeCunUniform"===t)return new Qy;{const e={};return e.className=t,e.config={},tx(e)}}return n instanceof Xn?n:tx(n)}function pp(n){return Array.isArray(n)&&Array.isArray(n[0])}function xu(n){return 0===n.length?[]:Array.isArray(n[0])?n:[n]}function Ee(n){let t;if(Array.isArray(n)){if(1!==n.length)throw new A(`Expected Tensor length to be 1; got ${n.length}`);t=n[0]}else t=n;return t}function Je(n){if(Array.isArray(n)&&Array.isArray(n[0])){if(1===n.length)return n[0];throw new A(`Expected exactly 1 Shape; got ${n.length}`)}return n}function bu(n){let t=0;for(const e of n)t+=0===e.shape.length?1:e.shape.reduce((s,r)=>s*r);return t}const nx="Variable";class Is{constructor(t,e="float32",s=nx,r=!0,a=null){this.dtype=e??"float32",this.shape=t.shape,this.id=Ly(),this.originalName=zy(s=s??nx),this.name=By(this.originalName),this.trainable_=r,this.constraint=a,this.val=function oN(n,t=!0,e,s){return R.makeVariable(n,t,e,s)}(t,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(t){return this.assertNotDisposed(),function g2(n,t){if(n.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(n.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,t),this.val.id!==t.id&&(this.val.assign(t),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(t){this.trainable_=t,this.val.trainable=t}}function fp(n){return n.map(t=>t.read())}function mp(n){n.forEach(t=>{t[0].write(t[1])})}class Mt{constructor(t){this.dtype=t.dtype,this.shape=t.shape,this.ndim=null!=t.shape?t.shape.length:t.ndim,this.maxNDim=t.maxNDim,this.minNDim=t.minNDim,this.axes=t.axes||{}}}class Ns{constructor(t,e,s,r,a,o,i){this.dtype=t,this.shape=e,this.sourceLayer=s,this.inputs=r,this.callArgs=a,this.outputTensorIndex=i,this.id=Ly(),null!=o&&(this.originalName=zy(o),this.name=By(this.originalName)),this.rank=e.length}}let y2=0;class wu{constructor(t,e){this.callArgs=e,this.id=y2++,this.outboundLayer=t.outboundLayer,this.inboundLayers=t.inboundLayers,this.nodeIndices=t.nodeIndices,this.tensorIndices=t.tensorIndices,this.inputTensors=t.inputTensors,this.outputTensors=t.outputTensors,this.inputMasks=t.inputMasks,this.outputMasks=t.outputMasks,this.inputShapes=t.inputShapes,this.outputShapes=t.outputShapes;for(const s of t.inboundLayers)s?.outboundNodes.push(this);t.outboundLayer.inboundNodes.push(this)}getConfig(){const t=[];for(const e of this.inboundLayers)t.push(null!=e?e.name:null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:t,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let x2=0;class He extends ha{constructor(t={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=x2++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let e=t.name;if(!e){const s=this.getClassName();e=Bs(s)+"_"+fu(s)}if(this.name=e,this.trainable_=null==t.trainable||t.trainable,null!=t.inputShape||null!=t.batchInputShape){let s;if(null!=t.batchInputShape)s=t.batchInputShape;else if(null!=t.inputShape){let a=null;null!=t.batchSize&&(a=t.batchSize),s=[a].concat(t.inputShape)}this.batchInputShape=s;let r=t.dtype;null==r&&(r=t.inputDType),null==r&&(r="float32"),this.dtype=r}this.initialWeights=null!=t.weights?t.weights:null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(t,e){return t.name+"_ib-"+e.toString()}getNodeAtIndex(t,e){if(0===this.inboundNodes.length)throw new qn(`The layer has never been called and thus has no defined ${e}.`);if(this.inboundNodes.length<=t)throw new A(`Asked to get ${e} at node ${t}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[t]}getInputAt(t){return Nn(this.getNodeAtIndex(t,"input").inputTensors)}getOutputAt(t){return Nn(this.getNodeAtIndex(t,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new ws(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new ws(`Layer ${this.name} is not connected, no input to return.`);return Nn(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new ws(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new ws(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return Nn(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(t=>t())}get updates(){return this._updates}get built(){return this._built}set built(t){this._built=t}get trainable(){return this.trainable_}set trainable(t){this._trainableWeights.forEach(e=>e.trainable=t),this.trainable_=t}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(t=>t.trainable):[]}set trainableWeights(t){this._trainableWeights=t}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(t=>!t.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(t){this._nonTrainableWeights=t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(t){const e=nt(t);if(null==this.inputSpec||0===this.inputSpec.length)return;const s=nt(this.inputSpec);if(e.length!==s.length)throw new A(`Layer ${this.name} expects ${s.length} inputs, but it received ${e.length} input tensors. Input received: ${t}`);for(let r=0;r<e.length;r++){const a=e[r],o=s[r];if(null==o)continue;const i=a.rank;if(null!=o.ndim&&i!==o.ndim)throw new A(`Input ${r} is incompatible with layer ${this.name}: expected ndim=${o.ndim}, found ndim=${i}`);if(null!=o.maxNDim&&i>o.maxNDim)throw new A(`Input ${r} is incompatible with layer ${this.name}: expected max_ndim=${o.maxNDim}, found ndim=${i}`);if(null!=o.minNDim&&i<o.minNDim)throw new A(`Input ${r} is incompatible with layer ${this.name}: expected min_ndim=${o.minNDim}, found ndim=${i}.`);if(null!=o.dtype&&a.dtype!==o.dtype)throw new A(`Input ${r} is incompatible with layer ${this.name} : expected dtype=${o.dtype}, found dtype=${a.dtype}.`);if(o.axes){const l=a.shape;for(const u in o.axes){const c=Number(u),h=o.axes[u];if(null!=h&&-1===[h,null].indexOf(c>=0?l[c]:l[l.length+c]))throw new A(`Input ${r} is incompatible with layer ${this.name}: expected axis ${c} of input shape to have value ${h} but got shape ${l}.`)}}if(null!=o.shape)for(let l=0;l<o.shape.length;++l){const u=o.shape[l],c=a.shape[l];if(null!=u&&null!=c&&u!==c)throw new A(`Input ${r} is incompatible with layer ${this.name}: expected shape=${o.shape}, found shape=${a.shape}.`)}}}call(t,e){return t}invokeCallHook(t,e){null!=this._callHook&&this._callHook(t,e)}setCallHook(t){this._callHook=t}clearCallHook(){this._callHook=null}apply(t,e){e=e||{},this.assertNotDisposed();const s=nt(t),r=function v2(n){let t=!0;for(const e of nt(n))if(!(e instanceof Ns)){t=!1;break}return t}(t),a=function S2(n){let t=!0;for(const e of nt(n))if(e instanceof Ns){t=!1;break}return t}(t);if(r===a)throw new A("Arguments to apply() must be all SymbolicTensors or all Tensors");return zr(this.name,()=>{if(!this.built){this.assertInputCompatibility(t);const o=[];for(const i of nt(t))o.push(i.shape);this.build(Nn(o)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&a&&(this._refCount=1)}if(this.assertInputCompatibility(t),a){let o=this.call(t,e);this.supportsMasking&&this.setMaskMetadata(t,o);const i=nt(o),l=[];for(let u of i)-1!==s.indexOf(u)&&(u=u.clone()),l.push(u);if(o=Nn(l),null!=this.activityRegularizer)throw new Le("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return o}{const o=function b2(n){n=nt(n);const t=[];for(const e of n)t.push(e.shape);return Nn(t)}(t),i=this.computeOutputShape(o);let l;const u="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(t)?o[0]:o),l=null!=i&&i.length>0&&Array.isArray(i[0])?i.map((c,h)=>new Ns(u,c,this,nt(t),e,this.name,h)):new Ns(u,i,this,nt(t),e,this.name),this.addInboundNode(t,l,null,null,o,i,e),this._refCount++,null!=this.activityRegularizer)throw new Le("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return l}})}warnOnIncompatibleInputShape(t){if(null!=this.batchInputShape)if(t.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(t)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let e=!1;this.batchInputShape.forEach((s,r)=>{null!=s&&null!=t[r]&&t[r]!==s&&(e=!0)}),e&&console.warn(`The shape of the input tensor (${JSON.stringify(t)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new ws(`The layer ${this.name} has never been called and thus has no defined output shape.`);const t=[];for(const e of this.inboundNodes){const s=JSON.stringify(e.outputShapes);-1===t.indexOf(s)&&t.push(s)}if(1===t.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new ws(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new qn(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return bu(this.weights)}build(t){this.built=!0}getWeights(t=!1){return fp(t?this.trainableWeights:this.weights)}setWeights(t){z(()=>{const e=this.weights;if(e.length!==t.length)throw new A(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${t.length}, but the layer was expecting ${e.length} weights. Provided weights: ${t}...`);if(0===e.length)return;const s=[],r=fp(e);for(let a=0;a<r.length;++a){const o=r[a],i=e[a],l=t[a];if(!ke(o.shape,l.shape))throw new A(`Layer weight shape ${o.shape} not compatible with provided weight shape ${l.shape}`);s.push([i,l])}mp(s)})}addWeight(t,e,s,r,a,o,i,l){if(-1!==this._addedWeightNames.indexOf(t))throw new A(`Duplicate weight name ${t} for layer ${this.name}`);this._addedWeightNames.push(t),null==s&&(s="float32"),this.fastWeightInitDuringBuild&&(r=null!=l?l():xt("zeros"));const u=r.apply(e,s),c=new Is(u,s,t,o,i);return u.dispose(),null!=a&&this.addLoss(()=>a.apply(c.read())),null==o&&(o=!0),o?this._trainableWeights.push(c):this._nonTrainableWeights.push(c),c}setFastWeightInitDuringBuild(t){this.fastWeightInitDuringBuild=t}addLoss(t){null==t||Array.isArray(t)&&0===t.length||(t=nt(t),null!=this._losses&&this.losses.push(...t))}computeOutputShape(t){return t}computeMask(t,e){if(!this.supportsMasking){if(null!=e){if(!Array.isArray(e))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);e.forEach(s=>{if(null!=s)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)})}return null}return e}setMaskMetadata(t,e,s){if(!this.supportsMasking)return;const r=this.computeMask(t,s),a=nt(e),o=nt(r);if(a.length!==o.length)throw new Error(`${this.name} outputs ${a.length} tensors but ${a.length} masks for those tensors`);for(let i=0;i<a.length;i++)a[i].kerasMask=o[i]}addInboundNode(t,e,s,r,a,o,i=null){const l=nt(t);e=nt(e),s=nt(s),r=nt(r),a=xu(a),o=xu(o);const u=[],c=[],h=[];for(const d of l)u.push(d.sourceLayer),c.push(d.nodeIndex),h.push(d.tensorIndex);new wu({outboundLayer:this,inboundLayers:u,nodeIndices:c,tensorIndices:h,inputTensors:l,outputTensors:e,inputMasks:s,outputMasks:r,inputShapes:a,outputShapes:o},i);for(let d=0;d<e.length;d++)e[d].sourceLayer=this,e[d].nodeIndex=this.inboundNodes.length-1,e[d].tensorIndex=d}getConfig(){const t={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(t.batchInputShape=this.batchInputShape),null!=this.dtype&&(t.dtype=this.dtype),t}disposeWeights(){return this.weights.forEach(t=>t.dispose()),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let t=0;return 0==--this._refCount&&(t=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:t}}}function sx(n,t,e){if((null==t||null!=e&&e>0)&&(t=n.sourceLayer,e=n.nodeIndex),0===t.inboundNodes.length)return[n];{const s=t.inboundNodes[e];if(0===s.inboundLayers.length)return s.inputTensors;{const r=[];for(let a=0;a<s.inboundLayers.length;a++){const u=sx(s.inputTensors[a],s.inboundLayers[a],s.nodeIndices[a]);for(const c of u)-1===r.indexOf(c)&&r.push(c)}return r}}}let vu=(()=>{class n extends He{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:fu("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new A("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let s=e.batchInputShape;if(null==s){if(null==e.inputShape)throw new A("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");s=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new A("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const r=e.dtype||"float32";this.batchInputShape=s,this.dtype=r,this.inputSpec=[{shape:s}];const a=new Ns(this.dtype,this.batchInputShape,this,[],{},this.name);a.nodeIndex=0,a.tensorIndex=0,new wu({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[a],outputTensors:[a],inputMasks:[null],outputMasks:[null],inputShapes:[s],outputShapes:[s]})}apply(e,s){throw new A(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}return n.className="InputLayer",n})();J(vu);class ir{constructor(t){if(this.id2Value={},this.id2Mask={},this.name2Id={},t instanceof ir)for(const e in t.id2Value)this.id2Value[e]=t.id2Value[e],e in t.id2Mask&&(this.id2Mask[e]=t.id2Mask[e]);else{if(null==t)return;for(const e of t)this.add(e.key,e.value)}}add(t,e,s){if(null!=this.id2Value[t.id])throw new A(`Duplicate key: name=${t.name}, id=${t.id}`);return this.id2Value[t.id]=function N2(n,t){if(null==n.dtype||n.dtype===t.dtype)return t;try{return he(t,n.dtype)}catch{throw new A(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${n.name}' (${n.dtype}).`)}}(t,e),this.name2Id[t.name]=t.id,null!=s&&(this.id2Mask[t.id]=s),this}addFeed(t){this.add(t.key,t.value)}hasKey(t){return null!=this.id2Value[t.id]}names(){return Object.keys(this.name2Id)}getValue(t){if(t instanceof Ns){if(null==this.id2Value[t.id])throw new A(`Nonexistent key: ${t.name}`);return this.id2Value[t.id]}{const e=this.name2Id[t];if(null==e)throw new A(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Value[e]}}getMask(t){if(t instanceof Ns){if(null==this.id2Value[t.id])throw new A(`Nonexistent key: ${t.name}`);return this.id2Mask[t.id]}{const e=this.name2Id[t];if(null==e)throw new A(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Mask[e]}}disposeMasks(){null!=this.id2Mask&&Be(this.id2Mask)}}const Su=new Dy,Iu=new Dy;function di(n,t,e,s){const r=null!=e&&e.training,a=Array.isArray(n),o=a?n:[n],i=o.map(f=>f.name),l=[],u=t.names();for(const f of i)-1!==u.indexOf(f)?l.push(t.getValue(f)):l.push(null);null!=s&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const c=i.join(",")+"|"+t.names().sort().join(",");let d,h=Su.get(c);if(null==h){const f=function k2(n,t){S(null!=n&&n.length>0,()=>"Expected at least one fetch, got none");let e=[],s={};if(1===n.length){const r=rx(n[0],t);e=r.sorted,s=r.recipientMap}else{const r=new Set;for(const a of n){const{sorted:o,recipientMap:i}=rx(a,t);for(const l of o)r.has(l.name)||(e.push(l),r.add(l.name));for(const l in i)null==s[l]&&(s[l]=new Set),i[l].forEach(u=>s[l].add(u))}}return{sorted:e,recipientCounts:T2(s)}}(o,t);h=f.sorted,d=f.recipientCounts,Su.put(c,h),Iu.put(c,d)}d={},r||Object.assign(d,Iu.get(c));const p=new ir(t);for(let f=0;f<h.length;++f){if(null!=s){const _=Th().numTensors;_>s.maxNumTensors&&(s.maxNumTensors=_),_<s.minNumTensors&&(s.minNumTensors=_)}const g=h[f],m=g.sourceLayer;if(m instanceof vu)continue;const y=[],x=[],b=[];let w=!1;for(const _ of g.inputs){const $=p.getValue(_),P=p.getMask(_);y.push($),x.push(P),null!=P&&(w=!0),r||(d[_.name]--,0===d[_.name]&&!t.hasKey(_)&&-1===i.indexOf(_.name)&&!$.isDisposed&&!0!==_.sourceLayer.stateful&&b.push($))}w&&((e=e||{}).mask=x[0]);const v=nt(m.apply(y,e));let I=null;m.supportsMasking&&(I=m.computeMask(y,x));const N=_2(g),k=Array.isArray(N)?N:[N];for(let _=0;_<k.length;++_){p.hasKey(k[_])||p.add(k[_],v[_],Array.isArray(I)?I[0]:I);const $=i.indexOf(k[_].name);-1!==$&&(l[$]=v[_])}r||Be(b)}return p.disposeMasks(),a?l:l[0]}function T2(n){const t={};for(const e in n)t[e]=n[e].size;return t}function rx(n,t){const e=new Set,s=[],r={};for(const i of t.names())e.add(i);const a=[],o=[];for(a.push(n);a.length>0;){const i=a[a.length-1];if(e.has(i.name)){a.pop();continue}const l=o[o.length-1]===a.length-1;if(0===i.inputs.length||l)a.pop(),s.push(i),e.add(i.name),l&&o.pop();else{o.push(a.length-1);for(const u of i.inputs)null==r[u.name]&&(r[u.name]=new Set),r[u.name].add(i.name),!e.has(u.name)&&a.push(u)}}return{sorted:s,recipientMap:r}}function _2(n){let t;if(1===n.sourceLayer.inboundNodes.length)t=n.sourceLayer.output;else{let e=null;for(let s=0;s<n.sourceLayer.inboundNodes.length;++s)for(const r of n.sourceLayer.inboundNodes[s].outputTensors)if(r.id===n.id){e=s;break}t=n.sourceLayer.getOutputAt(e)}return t}function gp(n,t){return z(()=>fn(be(E(n,n),t,!0)))}M().registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",()=>100,function C2(n){Su?.setMaxEntries(n),Iu?.setMaxEntries(n)});class pi extends ha{getConfig(){return{}}}J((()=>{class n extends pi{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return z(()=>{const s=gp(e,this.axis),r=Rn(s,0,this.maxValue);return E(e,Ie(r,ne(Vt(),s)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}return n.className="MaxNorm",n})()),J((()=>{class n extends pi{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return z(()=>Ie(e,ne(Vt(),gp(e,this.axis))))}getConfig(){return{axis:this.axis}}}return n.className="UnitNorm",n})()),J((()=>{class n extends pi{apply(e){return Ps(e)}}return n.className="NonNeg",n})()),J((()=>{class n extends pi{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return z(()=>{const s=gp(e,this.axis),r=ne(E(this.rate,Rn(s,this.minValue,this.maxValue)),E(1-this.rate,s));return E(e,Ie(r,ne(Vt(),s)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}return n.className="MinMaxNorm",n})());const ax={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function zt(n){return op(n)}function ox(n,t={}){return ii(n,Un.getMap().classNameMap,t,"constraint")}function Bt(n){return null==n?null:"string"==typeof n?ox({className:n in ax?ax[n]:n,config:{}}):n instanceof pi?n:ox(n)}function lr(n){return yp.apply(this,arguments)}function yp(){return(yp=O(function*(n){if(null==n)return;const t=[],e=[],s=[];for(const r in n){const a=n[r];if("number"!=typeof a){const o=a;t.push(o.data()),e.push(r),s.push(o)}}if(t.length>0){const r=yield Promise.all(t);for(let a=0;a<r.length;++a)n[e[a]]=r[a][0];Be(s)}})).apply(this,arguments)}function ix(n){if(null!=n)for(const t in n){const e=n[t];"number"!=typeof e&&e.dispose()}}class Sa{constructor(){this.validationData=null}setParams(t){this.params=t}onEpochBegin(t,e){return O(function*(){})()}onEpochEnd(t,e){return O(function*(){})()}onBatchBegin(t,e){return O(function*(){})()}onBatchEnd(t,e){return O(function*(){})()}onTrainBegin(t){return O(function*(){})()}onTrainEnd(t){return O(function*(){})()}setModel(t){}}class A2{constructor(t,e=10){null==t&&(t=[]),this.callbacks=t,this.queueLength=e}append(t){this.callbacks.push(t)}setParams(t){for(const e of this.callbacks)e.setParams(t)}setModel(t){for(const e of this.callbacks)e.setModel(t)}onEpochBegin(t,e){var s=this;return O(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onEpochBegin(t,e)})()}onEpochEnd(t,e){var s=this;return O(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onEpochEnd(t,e)})()}onBatchBegin(t,e){var s=this;return O(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onBatchBegin(t,e)})()}onBatchEnd(t,e){var s=this;return O(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onBatchEnd(t,e)})()}onTrainBegin(t){var e=this;return O(function*(){null==t&&(t={});for(const s of e.callbacks)yield s.onTrainBegin(t)})()}onTrainEnd(t){var e=this;return O(function*(){null==t&&(t={});for(const s of e.callbacks)yield s.onTrainEnd(t)})()}}class R2 extends Sa{constructor(){super()}onEpochBegin(t){var e=this;return O(function*(){e.seen=0,e.totals={}})()}onBatchEnd(t,e){var s=this;return O(function*(){null==e&&(e={});const r=null==e.size?0:e.size;s.seen+=r;for(const a in e){const o=e[a];if("number"==typeof o)s.totals.hasOwnProperty(a)||(s.totals[a]=0),s.totals[a]=s.totals[a]+o*r;else{let i;a in s.totals?i=s.totals[a]:s.totals[a]=0;const l=z(()=>ne(s.totals[a],E(o,r)));s.totals[a]=l,i?.dispose()}}})()}onEpochEnd(t,e){var s=this;return O(function*(){if(null!=e)for(const r of s.params.metrics)null!=s.totals[r]&&("number"==typeof s.totals[r]?e[r]=s.totals[r]/s.seen:z(()=>{const a=E(Ie(1,s.seen),s.totals[r]);e[r]=a,s.totals[r].dispose(),fs(e[r])}))})()}}class D2 extends Sa{onTrainBegin(t){var e=this;return O(function*(){e.epoch=[],e.history={}})()}onEpochEnd(t,e){var s=this;return O(function*(){null==e&&(e={}),s.epoch.push(t);for(const r in e)null==s.history[r]&&(s.history[r]=[]),s.history[r].push(e[r])})()}syncData(){var t=this;return O(function*(){const e=[],s=[],r=[];for(const o in t.history){const i=t.history[o];for(let l=0;l<i.length;++l)"number"!=typeof i[l]&&(e.push(i[l].data()),s.push(o),r.push(l))}const a=yield Promise.all(e);for(let o=0;o<a.length;++o)t.history[s[o]][r[o]].dispose(),t.history[s[o]][r[o]]=a[o][0]})()}}class F2 extends Sa{constructor(t,e){if(super(),this.currentEpoch=0,this.nowFunc=t.nowFunc,this.nextFrameFunc=t.nextFrameFunc||Wg,this.yieldEvery=e||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=t.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");yc(this.yieldEvery)&&(this.maybeWait=function j$(n,t,e){let r,s=null!=e?e():wn();return(...o)=>{const i=null!=e?e():wn();return i-s<t||(s=i,r=n(...o)),r}}(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=t.onTrainBegin,this.trainEnd=t.onTrainEnd,this.epochBegin=t.onEpochBegin,this.epochEnd=t.onEpochEnd,this.batchBegin=t.onBatchBegin,this.batchEnd=t.onBatchEnd,this.yield=t.onYield}maybeWait(t,e,s){var r=this;return O(function*(){const a=[];null!=r.yield&&(yield lr(s),a.push(r.yield(t,e,s))),a.push(r.nextFrameFunc()),yield Promise.all(a)})()}onEpochBegin(t,e){var s=this;return O(function*(){s.currentEpoch=t,null!=s.epochBegin&&(yield lr(e),yield s.epochBegin(t,e))})()}onEpochEnd(t,e){var s=this;return O(function*(){const r=[];null!=s.epochEnd&&(yield lr(e),r.push(s.epochEnd(t,e))),"epoch"===s.yieldEvery&&r.push(s.nextFrameFunc()),yield Promise.all(r)})()}onBatchBegin(t,e){var s=this;return O(function*(){null!=s.batchBegin&&(yield lr(e),yield s.batchBegin(t,e))})()}onBatchEnd(t,e){var s=this;return O(function*(){const r=[];null!=s.batchEnd&&(yield lr(e),r.push(s.batchEnd(t,e))),"batch"===s.yieldEvery?r.push(s.nextFrameFunc()):yc(s.yieldEvery)&&r.push(s.maybeWait(s.currentEpoch,t,e)),yield Promise.all(r)})()}onTrainBegin(t){var e=this;return O(function*(){null!=e.trainBegin&&(yield lr(t),yield e.trainBegin(t))})()}onTrainEnd(t){var e=this;return O(function*(){null!=e.trainEnd&&(yield lr(t),yield e.trainEnd(t))})()}}function lx(n,t){return null==n&&(n={}),n instanceof Sa?[n]:Array.isArray(n)&&n[0]instanceof Sa?n:nt(n).map(s=>new F2(s,t))}let O2=(()=>{class n{constructor(){}static registerCallbackConstructor(e,s){S(e>=0&&Number.isInteger(e),()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`),n.checkForDuplicate(s),null==n.constructors[e]&&(n.constructors[e]=[]),n.constructors[e].push(s)}static checkForDuplicate(e){for(const s in n.constructors)n.constructors[+s].forEach(a=>{if(a===e)throw new A("Duplicate callback constructor.")})}static clear(){n.constructors={}}static createCallbacks(e){const s=[];for(const r in n.constructors){const a=+r;e>=a&&s.push(...n.constructors[a])}return s.map(r=>new r)}}return n.constructors={},n})();function ux(n,t,e,s,r,a,o,i,l){const u=new D2,c=[new R2,...O2.createCallbacks(t)];null!=n&&c.push(...n),c.push(u);const h=new A2(c);return h.setParams({epochs:e,initialEpoch:s,samples:r,steps:a,batchSize:o,verbose:t,doValidation:i,metrics:l}),{callbackList:h,history:u}}function Cs(n,t={},e=!1){return ii(n,Un.getMap().classNameMap,t,"layer",e)}function Nu(n,t){return z(()=>{"float32"!==n.dtype&&(n=he(n,"float32"));const e=be(ci(n),t,!0),s=Go(e.shape,Vt()),r=fn(er(e,s));return Ie(n,r)})}function Cu(n,t){return z(()=>At(ci(ge(t,n)),-1))}function xp(n,t){return z(()=>At(qt(ge(t,n)),-1))}function bp(n,t){return z(()=>{const e=ge(n,t),s=Rn(qt(n),Vt(),Number.MAX_VALUE),r=qt(Ie(e,s));return E(100,At(r,-1))})}function fi(n,t,e=!1){return z(()=>{if(e)t=bd(t);else{const s=be(t,t.shape.length-1,!0);t=Ie(t,s)}return t=Rn(t,Vt(),1-Vt()),yt(be(E(he(n,"float32"),Hn(t)),t.shape.length-1))})}function ku(n,t,e=!1){return z(()=>{const s=he(Zl(function o2(n){const t=[ar(n.shape)];return F(n,t)}(n)),"int32"),r=(t=Rn(t,Vt(),1-Vt())).shape;return fi(F(Sg(s,r[r.length-1]),r),t,e)})}function Tu(n,t){return z(()=>{let e;return e=Rn(t,Vt(),1-Vt()),e=Hn(Ie(e,ge(1,e))),At(function B2(n,t){if(!ke(n.shape,t.shape))throw new A(`logits and labels must have the same shape, but got shapes ${JSON.stringify(n.shape)} and ${JSON.stringify(t.shape)}`);return z(()=>{const e=Ps(t),s=yt(qt(t));return ne(ge(e,E(t,n)),id(Dn(s)))})}(n,e),-1)})}function cx(n,t){return z(()=>{const e=Nu(n,-1),s=Nu(t,-1),r=E(e,s);return yt(be(r,-1))})}const _u={meanSquaredError:Cu,meanAbsoluteError:xp,meanAbsolutePercentageError:bp,meanSquaredLogarithmicError:function P2(n,t){return z(()=>{const e=Rn(t,Vt(),Number.MAX_VALUE),s=Hn(ne(1,e)),r=Rn(n,Vt(),Number.MAX_VALUE),a=Hn(ne(1,r));return At(ci(ge(s,a)),-1)})},squaredHinge:function L2(n,t){return z(()=>{const e=er(0,ge(1,E(n,t)));return At(ci(e),-1)})},hinge:function V2(n,t){return z(()=>{const e=er(0,ge(1,E(n,t)));return At(e,-1)})},categoricalHinge:function M2(n,t){return z(()=>{const e=be(E(n,t),-1),s=ns(E(ge(1,n),t),-1);return er(0,ne(1,ge(s,e)))})},logcosh:function z2(n,t){return z(()=>{const e=Math.log(2),s=ge(t,n),r=ge(ne(s,ei(E(-2,s))),e);return At(r,-1)})},categoricalCrossentropy:fi,sparseCategoricalCrossentropy:ku,binaryCrossentropy:Tu,kullbackLeiblerDivergence:function W2(n,t){return z(()=>{const e=Rn(n,Vt(),1),s=Rn(t,Vt(),1);return be(E(n,Hn(Ie(e,s))),-1)})},poisson:function U2(n,t){return z(()=>{const e=Hn(ne(Vt(),t));return At(ge(t,E(n,e)),-1)})},cosineProximity:cx};function wp(n){if("string"==typeof n){if(n in _u)return _u[n];let t=`Unknown loss ${n}`;throw n.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${n}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new A(t)}return n}function hx(n,t){return z(()=>{const e=E(.5,jn(t)),s=vs(Fn(t,e),n.dtype);return At(gs(n,s),-1)})}function dx(n,t){return z(()=>vs(gs(Ho(n,-1),Ho(t,-1)),"float32"))}function q2(n,t){return Tu(n,t)}function K2(n,t){return n.rank===t.rank&&(n=ti(n,[n.rank-1])),(t=Ho(t,-1)).dtype!==n.dtype&&(t=he(t,n.dtype)),he(gs(n,t),"float32")}const fx=fi,mx=ku,$u={binaryAccuracy:hx,categoricalAccuracy:dx,precision:function j2(n,t){return z(()=>{const e=function px(n,t){return z(()=>he(be(Fs(gs(n,1),gs(t,1))),"float32"))}(n,t),s=function H2(n,t){return z(()=>he(be(Fs(gs(n,0),gs(t,1))),"float32"))}(n,t),r=ne(e,s);return he(gn(Fn(r,0),Ie(e,r),0),"float32")})},categoricalCrossentropy:fx,sparseCategoricalCrossentropy:mx,mse:Cu,MSE:Cu,mae:xp,MAE:xp,mape:bp,MAPE:bp,cosine:cx};function nE(n){if("string"==typeof n&&n in $u)return $u[n];if("string"!=typeof n&&null!=n)return n;throw new A(`Unknown metric ${n}`)}function Eu(n){if(Pn(null!==n,`Unknown LossOrMetricFn ${n}`),"string"==typeof n)return n;{let t;for(const e of Object.keys(_u))if(_u[e]===n){t=e;break}if(void 0!==t)return t;for(const e of Object.keys($u))if($u[e]===n){t=e;break}return void 0!==t?t:n.name}}function yx(n,t,e=!1){if(null==n||"object"!=typeof n||Object.getPrototypeOf(n)!==Object.prototype||!vp(n))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(e){const s=JSON.stringify(n);s.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${s.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function vp(n){if(null===n)return!0;if("object"==typeof n){if(Object.getPrototypeOf(n)===Object.prototype){const t=Object.keys(n);for(const e of t)if("string"!=typeof e||!vp(n[e]))return!1;return!0}if(Array.isArray(n)){for(const t of n)if(!vp(t))return!1;return!0}return!1}{const t=typeof n;return"string"===t||"number"===t||"boolean"===t}}function Au(n,t,e=console.log){let s="";for(let r=0;r<n.length;++r)r>0&&(s=s.slice(0,s.length-1)+" "),s+=n[r],s=s.slice(0,t[r]),s+=" ".repeat(t[r]-s.length);e(s)}function iE(n,t,e){let s,r;try{r=n.inboundNodes.map(l=>JSON.stringify(l.inputShapes)).join(",")}catch{r="multiple"}try{s=JSON.stringify(n.outputShape)}catch{s="multiple"}Au([`${n.name} (${n.getClassName()})`,r,s,n.countParams().toString()],t,e)}function lE(n,t,e,s){let r,a;try{a=n.inboundNodes.map(h=>JSON.stringify(h.inputShapes)).join(",")}catch{a="multiple"}try{r=JSON.stringify(n.outputShape)}catch{r="multiple"}const o=[];for(const h of n.inboundNodes)if(!(null!=e&&e.length>0&&-1===e.indexOf(h)))for(let d=0;d<h.inboundLayers.length;++d)o.push(`${h.inboundLayers[d].name}[${h.nodeIndices[d]}][${h.tensorIndices[d]}]`);const i=n.name,l=n.getClassName(),u=0===o.length?"":o[0];Au([`${i} (${l})`,a,r,n.countParams().toString(),u],t,s);for(let h=1;h<o.length;++h)Au(["","","","",o[h]],t,s)}function xx(n,t,e){return("inboundNodes"===n||"outputLayers"===n||"inputLayers"===n)&&0===t&&"string"==typeof e}function Ru(n,t){if(null===n)return null;if("string"==typeof n)return Vr(n);if("number"==typeof n||"boolean"==typeof n)return n;if(n instanceof Array){const e=[],s=n.length;for(let r=0;r<s;++r){const a=n[r];xx(t,r,a)?e.push(a):e.push(Ru(a,t))}return e}{const e={};for(const s of Object.keys(n)){const r=n[s];if("name"===s&&"string"==typeof r)e[s]=r;else{const a=Vr(s);e[a]=Ru(r,a)}}return e}}function Sp(n,t){if(null==n)return null;if("string"==typeof n)return Bs(n);if("number"==typeof n||"boolean"==typeof n)return n;if(n instanceof Array){const e=[],s=n.length;for(let r=0;r<s;++r){const a=n[r];xx(t,r,a)?e.push(a):e.push(Sp(a,t))}return e}{const e={};for(const s of Object.keys(n)){const r=n[s];e[Bs(s)]="name"!==s&&"className"!==s||"string"!=typeof r?Sp(r,s):r}return e}}class os extends He{constructor(t){if(super({}),this.containerNodes=new Set,this.name=t.name,null==this.name){const x=this.getClassName().toLowerCase();this.name=fu(x)}if(this.supportsMasking=!1,this.trainable_=!0,this.inputs=Array.isArray(t.inputs)?t.inputs.slice():[t.inputs],this.outputs=Array.isArray(t.outputs)?t.outputs.slice():[t.outputs],rr(this.inputs).length!==this.inputs.length)throw new A(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map(x=>x.name)}`);rr(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map(x=>x.name)}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const x of this.outputs){const w=x.nodeIndex,v=x.tensorIndex;this.outputLayers.push(x.sourceLayer),this.outputLayersNodeIndices.push(w),this.outputLayersTensorIndices.push(v)}for(const x of this.inputs){const b=x.sourceLayer,w=x.nodeIndex,v=x.tensorIndex;Pn(0===w,"input layer has >1 nodes"),Pn(0===v,"input layer has >1 tensors"),this.inputLayers.push(b),this.inputLayersNodeIndices.push(w),this.inputLayersTensorIndices.push(v)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let x=0;x<this.inputLayers.length;x++){const b=this.inputLayers[x];if(!(b instanceof vu))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${t.inputs}. Input ${x} (0-based) originates from layer type ${b.getClassName()}.`);this.inputNames.push(b.name),this.feedInputShapes.push(b.batchInputShape),this.feedInputNames.push(b.name)}for(const x of this.outputLayers)this.outputNames.push(x.name);this.internalInputShapes=this.inputs.map(x=>x.shape),this.internalOutputShapes=this.outputs.map(x=>x.shape);const e={},s={},r={},a={},o={},i=[],l=(x,b,w,v,I,N)=>{(null==v||null==I||null==N)&&(v=x.sourceLayer,I=x.nodeIndex,N=x.tensorIndex);const k=v.inboundNodes[I];if(-1!==w.indexOf(k))throw new qn(`The tensor ${x.name} at layer "${v.name}" is part of a cycle.`);if(-1!==b.indexOf(k))return;this.containerNodes.add(os.nodeKey(v,I)),v.id in o||(o[v.id]=Object.keys(o).length),-1===w.indexOf(k)&&w.push(k);const _=k.inboundLayers.length;for(let $=0;$<_;$++)l(k.inputTensors[$],b,w,k.inboundLayers[$],k.nodeIndices[$],k.tensorIndices[$]);for(b.push(k);w.indexOf(k)>=0;)w.splice(w.indexOf(k),1);i.push(k)},u=[],c=[];for(const x of this.outputs)l(x,u,c);const h=i.slice().reverse();for(const x of h){s[x.id]=x,x.id in e||(e[x.id]=0);let b=e[x.id];b=Math.max(b,null==r[x.outboundLayer.id]?0:r[x.outboundLayer.id]),r[x.outboundLayer.id]=b,a[x.outboundLayer.id]=x.outboundLayer,e[x.id]=b;for(let v=0;v<x.inboundLayers.length;v++){const k=x.inboundLayers[v].inboundNodes[x.nodeIndices[v]];e[k.id]=Math.max(b+1,null==e[k.id]?0:e[k.id]),s[k.id]=k}}const d={};for(const x in e){const b=e[x];b in d||(d[b]=[]),d[b].push(s[x])}const p={};for(const x in r){const b=r[x];b in p||(p[b]=[]),p[b].push(a[x])}let f=Object.keys(p).map(x=>parseInt(x,10)).sort(du);this.layers=[];for(const x of f){const b=p[x];b.sort((w,v)=>{const I=o[w.id],N=o[v.id];return I<N?-1:I>N?1:0});for(const w of b)w instanceof os&&this.internalContainerRefs.push(w),this.layers.push(w)}this.layersByDepth=p,f=Object.keys(d).map(x=>parseInt(x,10)).sort(du);const g=this.inputs.slice(),m=[];for(const x of f)for(const b of d[x]){const w=b.outboundLayer;if(null!=w){for(const v of b.inputTensors)if(-1===g.indexOf(v))throw new qn(`Graph disconnected: cannot obtain value for tensor ${v} at layer "${w.name}". The following previous layers were accessed without issue: ${m}`);for(const v of b.outputTensors)g.push(v);m.push(w.name)}}this.nodesByDepth=d;const y=this.layers.map(x=>x.name);for(const x of y){const b=y.filter(w=>w===x).length;if(1!==b)throw new qn(`The name "${x}" is used ${b} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(y))}this.outboundNodes=[],this.inboundNodes=[],new wu({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(x=>null),outputMasks:this.outputs.map(x=>null),inputShapes:this.inputs.map(x=>x.shape),outputShapes:this.outputs.map(x=>x.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const t={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const e of this.layers)t.numDisposedVariables+=e.dispose().numDisposedVariables;for(const e of this.internalContainerRefs)t.numDisposedVariables+=e.dispose().numDisposedVariables}return t.refCountAfterDispose=this._refCount,t}get trainable(){return this.trainable_}set trainable(t){this.layers.forEach(e=>{e._trainableWeights.forEach(s=>s.trainable=t)}),this.trainable_=t}get trainableWeights(){if(this._trainableWeights.length>0)throw new A("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let t=[];for(const e of this.layers)t=t.concat(e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.layers)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const s of this.layers)e.push(...s.trainableWeights);return e.concat(t)}return t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(t,e=!0){const s={};let r=0;const a=(n=>{const t=Object.keys(n);if(0===t.length)return!1;const e=t[0].split("/");return!isNaN(parseInt(e[e.length-1],10))})(t);a&&this.parseWeights(t);for(const i of this.layers)for(const[l,u]of i.weights.entries()){const c=a?`${u.name.split("/").slice(0,-1).join("/")+"/"}${l}`:u.originalName;if(null!=s[c])throw new A(`Duplicate weight name: ${c}`);s[c]=u,r++}const o=[];for(const i in t){let l=i;if(null==s[i]){const u=i.split("/");l=u.slice(0,-2).concat([u[u.length-1]]).join("/")}if(null!=s[l])o.push([s[l],t[i]]);else if(e)throw new A(`Provided weight data has no target variable: ${i}`);delete s[l]}if(e){const i=[];for(const l in s)i.push(l);if(i.length>0)throw new A(`${i.length} of ${r} weights are not set: ${i}`)}mp(o)}parseWeights(t){for(const e in Object.keys(t)){const s=e.split("/"),r=["vars","layer_checkpoint_dependencies"],a=s.map(o=>o.startsWith("_")?o.slice(1):o).filter(o=>!r.includes(o)).join("/");a!==e&&(t[a]=t[e],delete t[e])}}updatedConfig(){const t=this.getConfig(),e={};return e.className=this.getClassName(),e.config=t,e.kerasVersion="tfjs-layers 4.16.0",e.backend="TensorFlow.js",e}toJSON(t,e=!0){const s=Sp(this.updatedConfig());return e?JSON.stringify(s):s}call(t,e){return z(()=>{t=nt(t);const s=new ir;for(let r=0;r<this.inputs.length;++r)s.add(this.inputs[r],t[r]);return di(this.outputs,s,e)})}computeMask(t,e){return z(()=>{let s;return t=nt(t),s=null==e?Lr(null,t.length):nt(e),this.runInternalGraph(t,s)[1]})}computeOutputShape(t){const e=xu(t);if(e.length!==this.inputLayers.length)throw new A(`Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`);const s={};for(let i=0;i<e.length;i++)s[this.inputLayers[i].name+"_0_0"]=e[i];const r=Object.keys(this.nodesByDepth).map(i=>parseInt(i,10)).sort(du);if(r.length>1)for(const i of r){const l=this.nodesByDepth[i];for(const u of l){const c=u.outboundLayer;if(-1!==this.inputLayers.map(g=>g.id).indexOf(c.id))continue;const h=[];for(let g=0;g<u.inboundLayers.length;g++)h.push(s[`${u.inboundLayers[g].name}_${u.nodeIndices[g]}_${u.tensorIndices[g]}`]);const p=xu(c.computeOutputShape(Nn(h))),f=c.inboundNodes.indexOf(u);for(let g=0;g<p.length;g++)s[`${c.name}_${f}_${g}`]=p[g]}}const a=[],o=[];for(let i=0;i<this.outputLayers.length;i++)o.push(`${this.outputLayers[i].name}_${this.outputLayersNodeIndices[i]}_${this.outputLayersTensorIndices[i]}`);for(let i=0;i<o.length;i++){const l=o[i];Pn(l in s),a.push(s[l])}return Nn(a)}runInternalGraph(t,e){null==e&&(e=Lr(null,t.length));const s={};for(let l=0;l<this.inputs.length;++l)s[this.inputs[l].id]=[t[l],e[l]];const r=Object.keys(this.nodesByDepth).map(l=>parseInt(l,10)).sort(du);for(const l of r){const u=this.nodesByDepth[l];for(const c of u){const h=c.outboundLayer,d=c.inputTensors,p=c.outputTensors,f=new Array;for(const g of d)g.id in s&&f.push(s[g.id]);if(f.length===d.length){let m,y,x,b,g={};if(null!=c.callArgs&&(g=c.callArgs),1===f.length){const[w,v]=f[0];null==g.mask&&(g.mask=v),x=nt(h.call(w,g)),b=nt(h.computeMask(w,v)),m=[w],y=[v]}else m=f.map(w=>w[0]),y=f.map(w=>w[1]),null==g.mask&&(g.mask=y),x=nt(h.call(m,g)),b=nt(h.computeMask(m,y));if(h.activityRegularizer)throw new Le("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let w=0;w<p.length;++w)s[p[w].id]=[x[w],b[w]]}}}const a=[],o=[],i=[];for(const l of this.outputs){Pn(l.id in s,`Could not compute output ${l.name} : ${l.id}`);const[u,c]=s[l.id];i.push(u.shape),a.push(u),o.push(c)}return[a,o,i]}buildNodeConversionMap(t){const e={};let s;for(const r of this.layers){s=r instanceof os?1:0;for(let a=0;a<r.inboundNodes.length;a++){const o=os.nodeKey(r,a);this.containerNodes.has(o)&&(e[o]=s,s+=1)}}return e}getLayer(t,e){if(null!=e)return this.findLayer(e);if(null==t)throw new A("Provide either a layer name or layer index");if("number"==typeof t)return this.findLayer(t);for(const s of this.layers)if(s.name===t)return s;throw new A(`No such layer: ${t}`)}findLayer(t){if(this.layers.length<=t)throw new A(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}calculateLosses(){return z(()=>{const t=[];for(const e of this.layers)for(let s=0;s<e.inboundNodes.length;++s){const r=os.nodeKey(e,s);this.containerNodes.has(r)&&t.push(...e.calculateLosses())}return t})}getConfig(){const t={name:this.name},e=this.buildNodeConversionMap(this.layers),s=[];for(const o of this.layers){const i=o.getClassName(),l=o.getConfig(),u=[];for(let h=0;h<o.inboundNodes.length;h++){const d=o.inboundNodes[h],p=os.nodeKey(o,h);let f={};if(this.containerNodes.has(p)){if(d.callArgs)try{JSON.stringify(d.callArgs),f=d.callArgs}catch{console.warn(`Layer ${o.name} was passed non-serializable keyword arguments: ${d.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),f={}}if(d.inboundLayers.length>0){const g=[];for(let m=0;m<d.inboundLayers.length;m++){const y=d.inboundLayers[m],b=d.tensorIndices[m];let v=e[os.nodeKey(y,d.nodeIndices[m])];null==v&&(v=0),g.push([y.name,v,b,f])}u.push(g)}}}const c={};c.name=o.name,c.className=i,c.config=l,c.inboundNodes=u,s.push(c)}t.layers=s;const r=[];for(let o=0;o<this.inputLayers.length;o++){const i=this.inputLayers[o],u=os.nodeKey(i,this.inputLayersNodeIndices[o]);if(!this.containerNodes.has(u))continue;let c=e[u];null==c&&(c=0),r.push([i.name,c,this.inputLayersTensorIndices[o]])}t.inputLayers=r;const a=[];for(let o=0;o<this.outputLayers.length;o++){const i=this.outputLayers[o],u=os.nodeKey(i,this.outputLayersNodeIndices[o]);if(!this.containerNodes.has(u))continue;let c=e[u];null==c&&(c=0),a.push([i.name,c,this.outputLayersTensorIndices[o]])}return t.outputLayers=a,t}static fromConfig(t,e,s={},r=!1){const a={},o={};function i(m,y){m.name in o?o[m.name].push(y):o[m.name]=[y]}function l(m,y){const x=[];let b;for(const w of y){const v=w[0],I=w[1],N=w[2];if(b=null==w[3]?{}:w[3],!(v in a))return void i(m,y);const k=a[v];if(k.inboundNodes.length<=I)return void i(m,y);x.push(k.inboundNodes[I].outputTensors[N])}x.length>0&&m.apply(Nn(x),b)}function u(m){const y=m.name,x=Cs(m,null!=e.customObjects?e.customObjects:{});x.setFastWeightInitDuringBuild(r),a[y]=x,m.inboundNodes.forEach(w=>{if(!(w instanceof Array))throw new A(`Corrupted configuration, expected array for nodeData: ${w}`);i(x,w)})}const c=e.name,h=e.layers;for(const m of h)u(m);for(;!H$(o);)for(const m of h){const y=a[m.name];if(y.name in o){const x=o[y.name];delete o[y.name];for(const b of x)l(y,b)}}const d=[],p=[],f=e.inputLayers;for(const m of f){const y=m[0],x=m[1],b=m[2];Pn(y in a),d.push(a[y].inboundNodes[x].outputTensors[b])}const g=e.outputLayers;for(const m of g){const y=m[0],x=m[1],b=m[2];Pn(y in a),p.push(a[y].inboundNodes[x].outputTensors[b])}return new t({inputs:d,outputs:p,name:c})}get stateful(){if(this._stateful)throw new A("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const t of this.layers)if(t.stateful)return!0;return!1}resetStates(){z(()=>{this.layers.forEach(t=>{t.stateful&&t.resetStates()})})}}function wx(n,t){return function bx(n,t,e){const s=t.length;if(null==n||Array.isArray(n)&&0===n.length)return t.map(r=>null);if(1===s)return Array.isArray(n)&&1===n.length?n:"object"==typeof n&&t[0]in n?[n[t[0]]]:[n];if(Array.isArray(n)){if(n.length!==s)throw new Error(`Provided ${e} is an array of ${n.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return n}if("object"==typeof n&&Object.keys(n).length>0&&"object"==typeof n[Object.keys(n)[0]]){const r=[];return t.forEach(a=>{r.push(a in n?n[a]:null)}),r}throw new Error(`The model has multiple (${s}) outputs, so ${e} must be either an array with ${s} elements or an object with ${t} keys. Provided ${e} not understood: ${JSON.stringify(n)}`)}(n,t,"classWeight")}function vx(n,t,e,s){return Np.apply(this,arguments)}function Np(){return(Np=O(function*(n,t,e,s){if(null!=t||null!=s)throw new Error("Support sampleWeight is not implemented yet");if(null!=e){const r=z(()=>{if(1===n.shape.length)return Er(n);if(2===n.shape.length){if(n.shape[1]>1)return Ho(n,1);if(1===n.shape[1])return F(n,[n.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${n.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${n.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),a=Array.from(yield r.data());Be(r);const o=[];return a.forEach(i=>{if(null==e[i])throw new Error(`classWeight must contain all classes in the training data. The class ${i} exists in the data but not in classWeight`);o.push(e[i])}),In(o,"float32")}return null})).apply(this,arguments)}function cE(n,t){return E(n,t)}function Sx(n,t){let e,s;e=t.xs,s=t.ys,S(null!=e&&null!=s,()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`);const a=Ix("input",n.inputNames,e),o=Ix("output",n.outputNames,s),i=a[0].shape[0];S(a.length===n.inputs.length,()=>`LayersModel has ${n.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(n.inputNames)})`),S(o.length===n.outputs.length,()=>`LayersModel has ${n.outputs.length} outputs, but the dataset provides ${o.length} outputs.  (Expected output keys: ${JSON.stringify(n.outputNames)})`);for(let l=0;l<a.length;l++)S(a[l].shape[0]===i,()=>`Batch size mismatch: input ${n.inputNames[l]} has ${a[l].shape[0]}; expected  ${i} based on input ${n.inputNames[0]}.`);for(let l=0;l<o.length;l++)S(o[l].shape[0]===i,()=>`Batch size mismatch: output ${n.outputNames[l]} has ${o[l].shape[0]}; expected  ${i} based on input ${n.inputNames[0]}.`);return{xs:a,ys:o}}function Ix(n,t,e){if(e instanceof Pt)return[e];if(Array.isArray(e))return S(e.length===t.length,()=>`Received an array of ${e.length} Tensors, but expected ${t.length} to match the ${n} keys ${t}.`),e;{const s=[];for(const r of t){if(null==e[r])throw new A(`The feature data generated by the dataset lacks the required ${n} key '${r}'.`);s.push(e[r])}return s}}function Cp(){return(Cp=O(function*(n,t,e){const s=null!=e.batchesPerEpoch;if(S(null!=n.optimizer,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),S(null!=e,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),S(null!=e.epochs&&e.epochs>0&&Number.isInteger(e.epochs),()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${e.epochs}`),S(!s||e.batchesPerEpoch>0&&Number.isInteger(e.batchesPerEpoch),()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${e.batchesPerEpoch}`),S(null==e.validationSplit,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),n.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");n.isTraining=!0;try{const r=null!=e.validationData;let a,o;if(r)if(Nx(e.validationData))S(null==e.validationBatches||e.validationBatches>0&&Number.isInteger(e.validationBatches),()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${e.validationBatches}`);else{const m=function dE(n){if(3===n.length)throw new Le("Validation with sample weights is not implemented yet.");return{xs:n[0],ys:n[1]}}(e.validationData);a=m.xs,o=m.ys}const i=n.makeTrainFunction(),l=n.getDedupedMetricsNames();let u;u=r?l.slice().concat(l.map(m=>"val_"+m)):l.slice();const c=lx(e.callbacks,e.yieldEvery),h=null==e.verbose?1:e.verbose,{callbackList:d,history:p}=ux(c,h,e.epochs,null,null,function fE(n,t){let e=null;return null!=t.batchesPerEpoch?e=t.batchesPerEpoch:Number.isFinite(n.size)&&(e=n.size),e}(t,e),null,r,u);d.setModel(n),n.history=p,yield d.onTrainBegin(),n.stopTraining_=!1;let f=null==e.initialEpoch?0:e.initialEpoch,g=yield t.iterator();for(;f<e.epochs;){const m={};yield d.onEpochBegin(f);let y=0,x=0;for(s||(g=yield t.iterator());!s||y<e.batchesPerEpoch;){const b=yield g.next();if(s&&b.done){console.warn(`You provided \`batchesPerEpoch\` as ${e.batchesPerEpoch}, but your dataset iterator ran out of data after ${y} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${e.batchesPerEpoch*e.epochs} batches). You may need to use the repeat() function when building your dataset.`);break}if(null!=b.value){const{xs:w,ys:v}=Sx(n,b.value),I={};I.batch=x,I.size=w[0].shape[0],yield d.onBatchBegin(x,I);const N=[];if(null!=e.classWeight){const $=wx(e.classWeight,n.outputNames);for(let P=0;P<$.length;++P)N.push(yield vx(v[P],null,$[P]))}const k=w.concat(v).concat(N),_=i(k);Be(k);for(let $=0;$<l.length;++$){const B=_[$];I[l[$]]=B,fs(B)}yield d.onBatchEnd(x,I),ix(I),x++,y++}if(s?y>=e.batchesPerEpoch:b.done){if(r){let w;w=Nx(e.validationData)?nt(yield n.evaluateDataset(e.validationData,{batches:e.validationBatches})):nt(n.evaluate(a,o,{batchSize:null==e.validationBatchSize?32:e.validationBatchSize,verbose:0}));for(let v=0;v<n.metricsNames.length;++v)m[`val_${n.metricsNames[v]}`]=w[v]}break}if(n.stopTraining_)break}if(yield d.onEpochEnd(f,m),f++,n.stopTraining_)break}return yield d.onTrainEnd(),yield n.history.syncData(),n.history}finally{n.isTraining=!1}})).apply(this,arguments)}function Nx(n){return"function"==typeof n.iterator}function kp(){return(kp=O(function*(n,t,e){const s=null!=(e=e||{}).batches,r=n.testFunction;let a=[];if(e.verbose>0)throw new Le("Verbose mode is not implemented yet.");S(!s||e.batches>0&&Number.isInteger(e.batches),()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(e.batches)}`);const o=function mE(n){return"function"==typeof n.next}(t)?t:yield t.iterator();let i=0,l=0;for(;!s||l<e.batches;){const u=yield o.next();if(a=z(()=>{if(u.value){const{xs:c,ys:h}=Sx(n,u.value),d=c.concat(h),p=z(()=>r(d));if(Be(d),0===l)for(let g=0;g<p.length;++g)a.push(Fe(0));const f=d[0].shape[0];for(let g=0;g<p.length;++g){const m=p[g],y=a[g];a[g]=z(()=>ne(a[g],E(f,m))),l>0&&Be(y)}Be(p),i+=f,++l}return a}),u.done){s&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${e.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let u=0;u<a.length;++u){const c=a[u];a[u]=Ie(a[u],i),Be(c)}return Nn(a)})).apply(this,arguments)}function Tp(n){S(n>0&&Number.isInteger(n),()=>`batchSize is required to be a positive integer, but got ${n}`)}function mi(n,t,e){return null==n?[null]:Array.isArray(n)?n.map(s=>Br(s,t,e-t)):Br(n,t,e-t)}function _p(n,t){return z(()=>null==n?null:Array.isArray(n)?n.map(e=>_p(e,t)):Hy(n,"int32"===t.dtype?t:he(t,"int32")))}function $p(n,t){const e=[];let s=0,r=null;for(;s<n;)r=s+t,r>=n&&(r=n),e.push([s,r]),s=r;return e}function Cx(n){const t=[];n instanceof Pt&&(n=[n]);for(let e=0;e<n.length;++e){const s=n[e];if(1===s.rank)t.push(ui(s,1));else{if(0===s.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(s)}}return t}function is(n,t){if(null==n)return;const e=[];if(t instanceof Pt)e.push(t.id);else if(Array.isArray(t))t.forEach(r=>e.push(r.id));else if(null!=t)for(const r in t)e.push(t[r].id);const s=[];if(n instanceof Pt)-1===e.indexOf(n.id)&&s.push(n);else if(Array.isArray(n))n.forEach(r=>{-1===e.indexOf(r.id)&&s.push(r)});else if(null!=n)for(const r in n){const a=n[r];-1===e.indexOf(a.id)&&s.push(a)}s.forEach(r=>{r.isDisposed||r.dispose()})}function Ep(n){return Array.isArray(n)}function kx(n){return!function yE(n){return n instanceof Pt}(n)&&!Ep(n)}function Tx(n,t,e,s=!0,r=""){if(null==t||0===t.length){if(null!=n){let o=!1;if(Ep(n)&&n.length>0)o=!0;else if(kx(n)){for(const i in n)if(n.hasOwnProperty(i)){o=!0;break}}else o=!0;if(o)throw new A(`Error when checking model ${r} expected no data, but got ${n}`)}return[]}if(null==n)return t.map(o=>null);let a;if(kx(n)){a=[];for(const o of t){if(null==n[o])throw new A(`No data provided for "${o}". Need data for each key in: ${t}`);a.push(n[o])}}else if(Ep(n)){if(n.length!==t.length)throw new A(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${n}`);a=n}else{if(t.length>1)throw new A(`The model ${r} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${n.shape}`);a=[n]}if(a=Cx(a),null!=e)for(let o=0;o<t.length;++o){if(null==e[o])continue;const i=a[o];if(i.shape.length!==e[o].length)throw new A(`Error when checking ${r}: expected ${t[o]} to have ${e[o].length} dimension(s). but got array with shape ${i.shape}`);for(let l=0;l<e[o].length;++l){if(0===l&&!s)continue;const c=e[o][l];if(null!=c&&c>=0&&i.shape[l]!==c)throw new A(`${r} expected a batch of elements where each example has shape [${e[o].slice(1,e[o].length)}] (i.e.,tensor shape [*,${e[o].slice(1,e[o].length)}]) but the ${r} received an input with ${i.shape[0]} examples, each with shape [${i.shape.slice(1,i.shape.length)}] (tensor shape [${i.shape}])`)}}return a}function _x(n,t,e,s=!0,r=""){let a;if(Array.isArray(n)){if(n.length!==t.length)throw new A(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${n.length} Tensors(s).`);a=n}else{if(t.length>1)throw new A(`The model expects ${t.length} ${r} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(n.shape)}.`);a=[n]}if(null!=e)for(let o=0;o<t.length;++o){if(null==e[o])continue;const i=a[o];if(i.shape.length!==e[o].length)throw new A(`Error when checking ${r}: expected ${t[o]} to have ${e[o].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);for(let l=0;l<e[o].length;++l){if(0===l&&!s)continue;const c=e[o][l];if(null!=c&&c!==i.shape[l])throw new A(`Error when checking ${r}: expected ${t[o]} to have shape ${JSON.stringify(e[o])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}let Ia=(()=>{class n extends os{constructor(e){super(e),this.isTraining=!1}summary(e,s,r=console.log){if(!this.built)throw new A("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function rE(n,t,e,s=console.log){const r=function oE(n){let t=!0;const e=[],s=[];for(const r in n.nodesByDepth)e.push(n.nodesByDepth[r]);for(const r of e){if(r.length>1||1===r.length&&r[0].inboundLayers.length>1){t=!1;break}s.push(...r)}if(t)for(const r of n.layers){let a=!1;for(const o of r.inboundNodes)if(-1!==s.indexOf(o)){if(a){t=!1;break}a=!0}if(!t)break}return t}(n),a=["Layer (type)","Input Shape","Output shape","Param #"];let o;if(r?(t=t||90,e=e||[.32,.61,.89,1]):(t=t||115,e=e||[.24,.48,.7,.8,1]),e[e.length-1]<=1&&(e=e.map(c=>Math.floor(t*c))),!r){a.push("Receives inputs"),o=[];for(const c in n.nodesByDepth)o.push(...n.nodesByDepth[c])}s("_".repeat(t)),Au(a,e,s),s("=".repeat(t));const i=n.layers;for(let c=0;c<i.length;++c)r?iE(i[c],e,s):lE(i[c],e,o,s),s((c===i.length-1?"=":"_").repeat(t));n.checkTrainableWeightsConsistency();const l=function aE(n){let t;return t=bu(null!=n.collectedTrainableWeights?n.collectedTrainableWeights:n.trainableWeights),t}(n),u=bu(n.nonTrainableWeights);s(`Total params: ${l+u}`),s(`Trainable params: ${l}`),s(`Non-trainable params: ${u}`),s("_".repeat(t))}(this,e,s,r)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function sE(n){const t={Adagrad:()=>ba.adagrad(.01),Adadelta:()=>ba.adadelta(1,.95,Vt()),Adam:()=>ba.adam(.001,.9,.999,Vt()),Adamax:()=>ba.adamax(.002,.9,.999,Vt(),0),RMSProp:()=>ba.rmsprop(.001,.9,0,Vt()),SGD:()=>ba.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,n in t)return t[n]();throw new A(`Unknown Optimizer ${n}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof Qs))throw new A("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let s=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new A(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);s=e.loss.map(l=>wp(l))}else{const i=wp(e.loss);this.outputs.forEach(l=>{s.push(i)})}else{e.loss=e.loss;for(const i in e.loss)if(-1===this.outputNames.indexOf(i))throw new A(`Unknown entry in loss dictionary: "${i}". Only expected the following keys: ${this.outputNames}`);for(const i of this.outputNames)null==e.loss[i]&&console.warn(`Output "${i}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${i} during training`),s.push(wp(e.loss[i]))}this.lossFunctions=s,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let i=0;i<this.outputs.length;++i){const l=this.internalOutputShapes[i];this.feedOutputNames.push(this.outputNames[i]),this.feedOutputShapes.push(l),this.feedLossFns.push(this.lossFunctions[i])}const r=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],zr("loss",()=>{for(let i=0;i<this.outputs.length;++i)-1===r.indexOf(i)&&this.outputs.length>1&&(this.metricsTensors.push([this.lossFunctions[i],i]),this.metricsNames.push(this.outputNames[i]+"_loss"))});const a=function wE(n,t){if(null==n||Array.isArray(n)&&0===n.length)return t.map(s=>[]);let e;if("string"==typeof n||"function"==typeof n)e=[n];else{if(!Array.isArray(n)&&"object"!=typeof n)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${n}`);e=n}if(Array.isArray(e))return t.map(s=>e);{const s=[];for(const r of t){let a=e.hasOwnProperty(r)?e[r]:[];Array.isArray(a)||(a=[a]),s.push(a)}return s}}(e.metrics,this.outputNames),o=(i,l,u)=>{this.outputNames.length>1&&(l=this.outputNames[i]+"_"+l),this.metricsNames.push(l),this.metricsTensors.push([u,i])};zr("metric",()=>{for(let i=0;i<this.outputs.length;++i)-1===r.indexOf(i)&&(c=>{let d,p,f;for(const g of c){if("string"==typeof g&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(g)){const y=this.internalOutputShapes[i];let x;1===y[y.length-1]||this.lossFunctions[i]===Tu?-1!==["accuracy","acc"].indexOf(g)?p=hx:-1!==["crossentropy","ce"].indexOf(g)&&(p=q2):this.lossFunctions[i]===ku?-1!==["accuracy","acc"].indexOf(g)?p=K2:-1!==["crossentropy","ce"].indexOf(g)&&(p=mx):-1!==["accuracy","acc"].indexOf(g)?p=dx:-1!==["crossentropy","ce"].indexOf(g)&&(p=fx),-1!==["accuracy","acc"].indexOf(g)?x="acc":-1!==["crossentropy","ce"].indexOf(g)&&(x="ce"),f=p,d=""+x}else f=nE(g),d=""+Eu(g);let m;zr(d,()=>{m=f}),o(i,d,m)}})(a[i])}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,s,r={}){const a=null==r.batchSize?32:r.batchSize;Tp(a);const i=this.standardizeUserDataXY(e,s,!0,a);try{const l=i[0].concat(i[1]);return this.makeTestFunction(),Nn(this.testLoop(this.testFunction,l,a,r.verbose,r.steps))}finally{is(i[0],e),is(i[1],s)}}evaluateDataset(e,s){var r=this;return O(function*(){return r.makeTestFunction(),function gE(n,t,e){return kp.apply(this,arguments)}(r,e,s)})()}checkNumSamples(e,s,r,a="steps"){let o;if(null!=r){if(o=null,null!=s)throw new A(`If ${a} is set, batchSize must be null or undefined.Got batchSize = ${s}`)}else{if(null==e)throw new A(`Either the input data should have a defined shape, or ${a} shoud be specified.`);o=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return o}execute(e,s){if(Array.isArray(s)&&0===s.length)throw new A("`outputs` is an empty Array, which is not allowed.");const r=Array.isArray(s),o=this.retrieveSymbolicTensors(r?s:[s]),i=new ir;if(e instanceof Pt&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new A(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let u=0;u<this.inputs.length;++u)i.add(this.inputs[u],e[u])}else for(const u of this.inputs){const c=e[u.name];if(null==c)throw new A(`No value is provided for the model's input ${u.name}`);i.add(u,c)}const l=di(o,i);return r?l:l[0]}retrieveSymbolicTensors(e){const s=Lr(null,e.length);let r=e.length;for(const a of this.layers){const o=Array.isArray(a.output)?a.output:[a.output],i=o.map(l=>l.name);for(let l=0;l<e.length;++l){const u=i.indexOf(e[l]);if(-1!==u&&(s[l]=o[u],r--),0===r)break}if(0===r)break}if(r>0){const a=[];throw s.forEach((o,i)=>{null==o&&a.push(e[i])}),new A(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(a)}`)}return s}predictLoop(e,s=32,r=!1){return z(()=>{const a=this.checkNumSamples(e);if(r)throw new Le("Verbose predictLoop() is not implemented yet.");const o=$p(a,s),i=this.outputs.map(l=>[]);for(let l=0;l<o.length;++l)z(()=>{const d=mi(e,o[l][0],o[l][1]),p=[];if(Array.isArray(d))for(let g=0;g<d.length;++g)p.push({key:this.inputs[g],value:d[g]});else p.push({key:this.inputs[0],value:d});const f=new ir(p);return di(this.outputs,f)}).forEach((c,h)=>i[h].push(c));return Nn(i.map(l=>un(l,0)))})}predict(e,s={}){const r=Cx(e);_x(r,this.inputNames,this.feedInputShapes,!1);try{const a=null==s.batchSize?32:s.batchSize;return Tp(a),this.predictLoop(r,a)}finally{is(r,e)}}predictOnBatch(e){_x(e,this.inputNames,this.feedInputShapes,!0);const s=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,s)}standardizeUserDataXY(e,s,r=!0,a){if(null==this.optimizer_)throw new qn("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const o=[];for(let i=0;i<this.feedOutputShapes.length;++i){const l=this.feedOutputShapes[i];o.push(this.feedLossFns[i]===ku?l.slice(0,l.length-1).concat([1]):l)}if(function xE(n,t,e){const s=rr(n.map(a=>a.shape[0]));s.sort();const r=rr(t.map(a=>a.shape[0]));if(r.sort(),s.length>1)throw new A(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(n.map(a=>a.shape))}`);if(r.length>1)throw new A(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map(a=>a.shape))}`);if(s.length>0&&r.length>0&&!ke(s,r))throw new A(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${r[0]} target sample(s).`)}(e=Tx(e,this.feedInputNames,this.feedInputShapes,!1,"input"),s=Tx(s,this.feedOutputNames,o,!1,"target")),function bE(n,t,e){const s=[Cu,Tu,fi];for(let r=0;r<n.length;++r){const a=n[r],o=t[r],i=e[r];if(null!=o){if(o===fi&&1===a.shape[a.shape.length-1])throw new A(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(o)){const l=a.shape.slice(1),u=i.slice(1);for(let c=0;c<l.length;++c){const d=u[c];if(null!=d&&l[c]!==d)throw new A(`A target Tensor with shape ${a.shape} was passed for an output of shape ${i}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(s,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=a&&a>0&&e[0].shape[0]%a!=0)throw new A(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${a}. Found: ${e[0].shape[0]} sample(s).`);return[e,s]}standardizeUserData(e,s,r,a,o=!0,i){var l=this;return O(function*(){const[u,c]=l.standardizeUserDataXY(e,s,o,i);if(null!=r)throw new Error("sample weight is not supported yet.");let h=null;if(null!=a){const d=wx(a,l.outputNames);h=[];for(let p=0;p<d.length;++p)h.push(yield vx(c[p],null,d[p]))}return[u,c,h]})()}testLoop(e,s,r,a=0,o){return z(()=>{const i=this.checkNumSamples(s,r,o,"steps"),l=[];if(a>0)throw new Le("Verbose mode is not implemented yet.");if(null!=o)throw new Le("steps mode in testLoop() is not implemented yet");{const u=$p(i,r),c=In(ss(0,i));for(let h=0;h<u.length;++h){const d=u[h][0],p=u[h][1],f=Br(c,d,p-d),g=_p(s,f),m=e(g);if(0===h)for(let y=0;y<m.length;++y)l.push(Fe(0));for(let y=0;y<m.length;++y)l[y]=ne(l[y],E(p-d,m[y]))}for(let h=0;h<l.length;++h)l[h]=Ie(l[h],i)}return l})}getDedupedMetricsNames(){const e=this.metricsNames,s=[];for(let r=0;r<e.length;++r){const a=e[r];let o=a;Fy(e,a)>1&&(o+=`_${Fy(e.slice(0,r),a)}`),s.push(o)}return s}makeTrainFunction(){return e=>{const s=[],r=e.slice(0,this.inputs.length),a=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),o=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),i=[],u=this.collectedTrainableWeights.map(d=>d.read());return[this.optimizer_.minimize(()=>{const d=[];for(let m=0;m<this.inputs.length;++m)d.push({key:this.inputs[m],value:r[m]});const p=new ir(d),f=di(this.outputs,p,{training:!0});let g;for(let m=0;m<this.lossFunctions.length;++m){let x=(0,this.lossFunctions[m])(a[m],f[m]);null!=o[m]&&(x=cE(x,o[m]));const b=At(x);s.push(b),g=0===m?x:ne(g,x)}for(let m=0;m<this.metricsTensors.length;++m){let y;if(this.outputs.length>1&&m<this.outputs.length)y=s[m];else{const b=this.metricsTensors[m][1];y=At((0,this.metricsTensors[m][0])(a[b],f[b]))}fs(y),i.push(y)}return g=At(g),this.calculateLosses().forEach(m=>{g=ne(g,m)}),g},!0,u)].concat(i)}}makeTestFunction(){this.testFunction=e=>z(()=>{const s=[];let r;const a=e.slice(0,this.inputs.length),o=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),i=[];for(let c=0;c<this.inputs.length;++c)i.push({key:this.inputs[c],value:a[c]});const l=new ir(i),u=di(this.outputs,l);for(let c=0;c<this.lossFunctions.length;++c){const d=At((0,this.lossFunctions[c])(o[c],u[c]));r=0===c?d:ne(r,d),s.push(r)}for(let c=0;c<this.metricsTensors.length;++c){const d=this.metricsTensors[c][1],p=At((0,this.metricsTensors[c][0])(o[d],u[d]));s.push(p)}return s})}fit(e,s,r={}){var a=this;return O(function*(){if(a.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let o,i,l,u,c,h,d,p,f;a.isTraining=!0;try{const g=null==r.batchSize?32:r.batchSize;Tp(g);const y=yield a.standardizeUserData(e,s,r.sampleWeight,r.classWeight,!1,g);o=y[0],i=y[1],f=y[2];let b,x=!1;if(null!=r.validationData&&r.validationData.length>0){if(x=!0,2!==r.validationData.length)throw 3===r.validationData.length?new Le("validationData including sample weights is not supported yet."):new A(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${r.validationData} is invalid.`);c=r.validationData[0],h=r.validationData[1];const B=yield a.standardizeUserData(c,h,null,null,!0,g);d=B[0],p=B[1],b=d.concat(p)}else if(null!=r.validationSplit&&r.validationSplit>0&&r.validationSplit<1){x=!0;const P=Math.floor(o[0].shape[0]*(1-r.validationSplit)),B=o[0].shape[0];d=mi(o,P,B),l=o,o=mi(o,0,P),p=mi(i,P,B),u=i,i=mi(i,0,P),b=d.concat(p)}else null!=r.validationSteps&&(x=!0);const w=o.concat(i).concat(f);a.checkTrainableWeightsConsistency();const v=a.makeTrainFunction(),I=a.getDedupedMetricsNames();let N,k;x?(a.makeTestFunction(),N=a.testFunction,k=I.slice().concat(I.map(P=>"val_"+P))):(N=null,b=[],k=I.slice());const _=lx(r.callbacks,r.yieldEvery);return yield a.fitLoop(v,w,I,g,r.epochs,r.verbose,_,N,b,r.shuffle,k,r.initialEpoch,null,null)}finally{a.isTraining=!1,is(o,e),is(i,s),is(l,e),is(u,s),is(d,c),is(p,h),null!=f&&Be(f)}})()}fitLoop(e,s,r,a,o,i,l,u,c,h,d,p,f,g){var m=this;return O(function*(){null==a&&(a=32),null==o&&(o=1),null==h&&(h=!0),null==p&&(p=0);let y=!1;if(null!=u&&null!=c&&(y=!0),null!=g&&(y=!0,null==f))throw new A("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const x=m.checkNumSamples(s,a,f,"steps_per_epoch");let b;null!=x&&(b=ss(0,x)),null==i&&(i=1);const{callbackList:w,history:v}=ux(l,i,o,p,x,f,a,y,d);w.setModel(m),m.history=v,yield w.onTrainBegin(),m.stopTraining_=!1;for(let I=p;I<o;++I){yield w.onEpochBegin(I);const N={};if(null!=f)throw new Le("stepsPerEpoch mode is not implemented yet.");{if("batch"===h)throw new Le("batch shuffling is not implemneted yet");h&&Ke(b);const k=In(b),_=$p(x,a);for(let $=0;$<_.length;++$){const P={};if(yield w.onBatchBegin($,P),z(()=>{const B=_[$][0],W=_[$][1],U=Br(k,B,W-B);P.batch=$,P.size=W-B;const G=_p(s,U),q=e(G);for(let K=0;K<r.length;++K){const X=q[K];P[r[K]]=X,fs(X)}if($===_.length-1&&y){const K=m.testLoop(u,c,a);for(let H=0;H<r.length;++H){const X=r[H],ee=K[H];fs(ee),N["val_"+X]=ee}}}),yield w.onBatchEnd($,P),ix(P),m.stopTraining_)break}k.dispose()}if(yield w.onEpochEnd(I,N),m.stopTraining_)break}return yield w.onTrainEnd(),yield m.history.syncData(),m.history})()}fitDataset(e,s){var r=this;return O(function*(){return function pE(n,t,e){return Cp.apply(this,arguments)}(r,e,s)})()}trainOnBatch(e,s){var r=this;return O(function*(){const a=yield r.standardizeUserData(e,s),o=a[0],i=a[1],u=r.makeTrainFunction()(o.concat(i)),c=[];for(const h of u){const d=yield h.data();c.push(d[0])}return Be(u),is(a[0],e),is(a[1],s),Nn(c)})()}getNamedWeights(e){const s=[],r=null!=e&&e.trainableOnly,a=r?this.trainableWeights:this.weights,o=this.getWeights(r);for(let i=0;i<a.length;++i)r&&!a[i].trainable||s.push({name:a[i].originalName,tensor:o[i]});return s}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const s=Th().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=s-Th().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=Bs(this.loss);else if(Array.isArray(this.loss)){for(const s of this.loss)if("string"!=typeof s)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map(s=>Bs(s))}else{const s=Object.keys(this.loss);e={};const r=this.loss;for(const a of s){if("string"!=typeof r[a])throw new Error("Serialization of non-string loss is not supported.");e[a]=Bs(r[a])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[Bs(Eu(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(e=>Bs(Eu(e)));{const e={};for(const s in this.metrics)e[s]=Bs(Eu(this.metrics[s]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const r=Cs(Ru(e.optimizer_config));let a,o;if("string"==typeof e.loss)a=Vr(e.loss);else if(Array.isArray(e.loss))a=e.loss.map(i=>Vr(i));else if(null!=e.loss){a={};for(const i in e.loss)a[i]=Vr(e.loss[i])}if(Array.isArray(e.metrics))o=e.metrics.map(i=>Vr(i));else if(null!=e.metrics){o={};for(const i in e.metrics)o[i]=Vr(e.metrics[i])}this.compile({loss:a,metrics:o,optimizer:r})}save(e,s){var r=this;return O(function*(){if("string"==typeof e){const h=(n=>St.getSaveHandlers(n))(e);if(0===h.length)throw new A(`Cannot find any save handlers for URL '${e}'`);if(h.length>1)throw new A(`Found more than one (${h.length}) save handlers for URL '${e}'`);e=h[0]}if(null==e.save)throw new A("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const a=yield _m(r.getNamedWeights(s)),u={modelTopology:r.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v4.16.0",convertedBy:null};if(null!=s&&s.includeOptimizer&&null!=r.optimizer){u.trainingConfig=r.getTrainingConfig();const h="optimizer",{data:d,specs:p}=yield _m(yield r.optimizer.getWeights(),h);a.specs.push(...p),a.data=function dv(n){return ds.join(n)}([a.data,d])}return null!=r.userDefinedMetadata&&(yx(r.userDefinedMetadata,r.name,!0),u.userDefinedMetadata=r.userDefinedMetadata),u.weightData=a.data,u.weightSpecs=a.specs,e.save(u)})()}setUserDefinedMetadata(e){yx(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}return n.className="Model",n})();function Rp(){return Rp=O(function*(n,t){if(null==t&&(t={}),"string"==typeof n){const e=((n,t)=>St.getLoadHandlers(n,t))(n,t);if(0===e.length)e.push(function lS(n,t){return sg(n,t)}(n,t));else if(e.length>1)throw new A(`Found more than one (${e.length}) load handlers for URL '${n}'`);n=e[0]}return function IE(n,t,e){return Dp.apply(this,arguments)}(n,void 0,t)}),Rp.apply(this,arguments)}function Dp(){return(Dp=O(function*(n,t,e){if(null==e&&(e={}),null==n.load)throw new A("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const s=yield n.load();let r=s.modelTopology;null!=r.model_config&&(r=r.model_config);const a=null==e.strict||e.strict,o=null!=s.weightData&&null!=s.weightSpecs&&a,i=Cs(Ru(r),t,o),l=s.trainingConfig;if(null!=l&&i.loadTrainingConfig(l),null!=s.userDefinedMetadata&&i.setUserDefinedMetadata(s.userDefinedMetadata),null!=s.weightData){if(null==s.weightSpecs)throw new A("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");const{modelWeights:u,optimizerWeights:c}=function NE(n,t){const e=function $m(n,t){const e=new ds(n),s={};let r=0;for(const a of t){const o=iv(a,(i,l)=>e.slice(r+i,r+l));s[a.name]=Em(a,e.slice(r,r+o)),r+=o}return s}(n,t),s={},r=[];return t.forEach(a=>{"optimizer"===a.group?r.push({name:a.name,tensor:e[a.name]}):s[a.name]=e[a.name]}),{modelWeights:s,optimizerWeights:r}}(s.weightData,s.weightSpecs);i.loadWeights(u,a),null!=i.optimizer&&c.length>0&&(yield i.optimizer.setWeights(c)),Be(u),Be(c.map(h=>h.tensor))}return i})).apply(this,arguments)}J(Ia),J((()=>{class n extends Ia{}return n.className="Functional",n})()),J((()=>{class n extends Ia{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:fu("sequential_"),null!=e.layers)for(const s of e.layers)this.add(s)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some(r=>r<0))throw new A(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const s=e instanceof n||e instanceof Ia;let r;if(s){if(r=e,1!==r.outputs.length)throw new A("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==r.inputs.length)throw new A("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new A("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const a=function I2(n){if(null==n.batchShape&&null==n.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=n.batchShape&&null!=n.shape)throw new A("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=n.batchShape;null!=n.shape&&null==t&&(t=[null].concat(n.shape));let e=n.dtype;return null==e&&(e="float32"),new vu({batchInputShape:t,name:n.name,dtype:e,sparse:n.sparse}).inboundNodes[0].outputTensors[0]}({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(a)}if(s)this.outputs=r.outputs,this.inputs=r.inputs;else{if(1!==e.inboundNodes.length)throw new A(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new A("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=sx(this.outputs[0])}this.inboundNodes=[],new wu({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:Lr(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(a=>a.shape),outputShapes:this.outputs[0].shape})}else{const a=e.apply(this.outputs[0]);if(Array.isArray(a))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[a],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,s){return null==this.model&&this.build(),this.model.call(e,s)}build(e){if(Je(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new Ia({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,s,r=console.log){this.built||this.build(),super.summary(e,s,r)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,s,r={}){if(!this.built)throw new qn("The model needs to be compiled before being used.");return this.model.evaluate(e,s,r)}evaluateDataset(e,s){var r=this;return O(function*(){if(!r.built)throw new qn("The model needs to be compiled before being used.");return r.model.evaluateDataset(e,s)})()}predict(e,s={}){return null==this.model&&this.build(),this.model.predict(e,s)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}fit(e,s,r={}){var a=this;return O(function*(){if(!a.built)throw new qn("The model needs to be compiled before being used.");return a.model.fit(e,s,r)})()}fitDataset(e,s){var r=this;return O(function*(){if(!r.built)throw new qn("The model needs to be compiled before being used.");return r.model.fitDataset(e,s)})()}trainOnBatch(e,s){var r=this;return O(function*(){return r.model.trainOnBatch(e,s)})()}static fromConfig(e,s,r={},a=!1){let o,i={};if(s instanceof Array){if(null==s[0].className||"Merge"===s[0].className)throw new A("Legacy serialization format not supported yet.");o=s}else S(null!=s.layers,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),o=s.layers,delete s.layers,i=s;const l=new e(i);if(!(l instanceof n))throw new Le(`Sequential.fromConfig called on non-Sequential input: ${l}`);for(const u of o){const h=Cs(u,void 0,a);a&&h.setFastWeightInitDuringBuild(!0),l.add(h)}return l}set stopTraining(e){if(null==this.model)throw new A("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new A("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const s of this.layers){const r={};r.className=s.getClassName(),r.config=s.getConfig(),e.push(r)}return{name:this.name,layers:e}}}return n.className="Sequential",n})());class Cn extends ha{getConfig(){return{}}}J((()=>{class n extends Cn{apply(e,s=1){return function l2(n,t=1){if(1!==t)throw new Le(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return Yl(n)}(e,s)}}return n.className="elu",n})()),J((()=>{class n extends Cn{apply(e){return Ig(e)}}return n.className="selu",n})()),J((()=>{class n extends Cn{apply(e){return Ps(e)}}return n.className="relu",n})()),J((()=>{class n extends Cn{apply(e){return z(()=>ma(6,Ps(e)))}}return n.className="relu6",n})()),J((()=>{class n extends Cn{apply(e){return e}}return n.className="linear",n})()),J((()=>{class n extends Cn{apply(e){return ga(e)}}return n.className="sigmoid",n})()),J((()=>{class n extends Cn{apply(e){return function c2(n){return z(()=>{const t=ne(.5,E(.2,n));return Rn(t,0,1)})}(e)}}return n.className="hardSigmoid",n})()),J((()=>{class n extends Cn{apply(e){return ei(e)}}return n.className="softplus",n})()),J((()=>{class n extends Cn{apply(e){return function u2(n){return z(()=>Ie(n,ne(qt(n),1)))}(e)}}return n.className="softsign",n})()),J((()=>{class n extends Cn{apply(e){return wd(e)}}return n.className="tanh",n})());let $x=(()=>{class n extends Cn{apply(e,s=-1){return bd(e,s)}}return n.className="softmax",n})();function ur(n){return n.getClassName()}function Fp(n,t={}){return ii(n,Un.getMap().classNameMap,t,"activation")}function cr(n){if(null==n){return Fp({className:"linear",config:{}})}if("string"==typeof n){const t={};return t.className=n,t.config={},Fp(t)}return n instanceof Cn?n:Fp(n)}J($x),J((()=>{class n extends Cn{apply(e,s=-1){return wg(e,s)}}return n.className="logSoftmax",n})()),J((()=>{class n extends Cn{apply(e,s=1){return z(()=>E(ga(E(e,s)),e))}}return n.className="swish",n})()),J((()=>{class n extends Cn{apply(e){return z(()=>E(e,wd(ei(e))))}}return n.className="mish",n})());class Ex extends ha{}J((()=>{class n extends Ex{constructor(e){super(),function Op(n){if(null!=n&&"object"!=typeof n)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${n}`)}(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return z(()=>{let s=Yt([1]);return this.hasL1&&(s=ne(s,be(E(this.l1,qt(e))))),this.hasL2&&(s=ne(s,be(E(this.l2,ci(e))))),F(s,[])})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,s){return new e({l1:s.l1,l2:s.l2})}}return n.className="L1L2",n})());const Ax={l1l2:"L1L2"};function ct(n){return op(n)}function Rx(n,t={}){return ii(n,Un.getMap().classNameMap,t,"regularizer")}function bt(n){return null==n?null:"string"==typeof n?Rx({className:n in Ax?Ax[n]:n,config:{}}):n instanceof Ex?n:Rx(n)}function Na(n,t,e){if("number"==typeof n)return Lr(n,t);if(n.length!==t)throw new A(`The ${e} argument must be an integer or tuple of ${t} integers. Received: ${n.length} elements.`);for(let s=0;s<t;++s){const r=n[s];if(!n2(r))throw new A(`The ${e} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(n)} including a non-integer number ${r}`)}return n}function ls(n,t,e,s,r=1){if(null==n)return n;let o;return o="same"===e?n:n-(t+(t-1)*(r-1))+1,Math.floor((o+s-1)/s)}function ks(n,t,e,s){if(null==n)return null;if("valid"===s)n=n*t+or([e-t,0]);else{if("same"!==s)throw new A(`Unsupport padding mode: ${s}.`);n*=t}return n}function Lp(n,t){return z(()=>(Rt(t),"channelsFirst"===t?Ye(n,[0,2,3,1]):n))}function Dx(n,t){return z(()=>(Rt(t),"channelsFirst"===t?Ye(n,[0,2,3,4,1]):n))}function Vp(n,t,e,s=[1,1],r="valid",a,o,i=null){return z(()=>{if(null==a&&(a="channelsLast"),Rt(a),3!==n.rank&&4!==n.rank)throw new A(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${n.rank}.`);if(3!==t.rank&&4!==t.rank)throw new A(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${n.rank}.`);let l=Lp(n,a);if("causal"===r)throw new Le("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=SN({x:l,filter:t,strides:s,pad:"same"===r?"same":"valid",dilations:o,dataFormat:"NHWC",bias:e,activation:i}),"channelsFirst"===a&&(l=Ye(l,[0,3,1,2])),l})}J((()=>{class n extends He{constructor(e){super(e??{}),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,s){e=Ee(e);let r=Ps(e);return null!=this.maxValue&&(r=Rn(r,0,this.maxValue)),r}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},s=super.getConfig();return Object.assign(e,s),e}}return n.className="ReLU",n})()),J((()=>{class n extends He{constructor(e){super(e??{}),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,s){const r=Ee(e);return od(r,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},s=super.getConfig();return Object.assign(e,s),e}}return n.className="LeakyReLU",n})()),J((()=>{class n extends He{constructor(e){if(super(e??{}),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=xt(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=bt(e.alphaRegularizer),this.alphaConstraint=Bt(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new A(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const s=(e=Je(e)).slice(1);if(null!=this.sharedAxes)for(const a of this.sharedAxes)s[a-1]=1;this.alpha=this.addWeight("alpha",s,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const r={};if(null!=this.sharedAxes)for(let a=1;a<e.length;++a)r[a]=e[a];this.inputSpec=[new Mt({ndim:e.length,axes:r})],this.built=!0}call(e,s){return e=Ee(e),pd(e,this.alpha.read())}getConfig(){const e={alphaInitializer:Nt(this.alphaInitializer),alphaRegularizer:ct(this.alphaRegularizer),alphaConstraint:zt(this.alphaConstraint),sharedAxes:this.sharedAxes},s=super.getConfig();return Object.assign(e,s),e}}return n.className="PReLU",n})()),J((()=>{class n extends He{constructor(e){if(super(e??{}),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new Le(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,s){const r=Ee(e);return Yl(r)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},s=super.getConfig();return Object.assign(e,s),e}}return n.className="ELU",n})()),J((()=>{class n extends He{constructor(e){super(e??{}),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,s){const r=Ee(e);return E(r,he(Fn(r,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},s=super.getConfig();return Object.assign(e,s),e}}return n.className="ThresholdedReLU",n})()),J((()=>{class n extends He{constructor(e){super(e??{}),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new $x).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,s){return z(()=>{let r=Ee(e);const a=s.mask;if(null!=a){const o=E(ge(Os(r.shape),he(a,r.dtype)),Fe(-1e9));r=ne(r,o)}return this.axis instanceof Array?this.axis.length>1?Dn(ge(r,ud(r,this.axis,!0))):this.softmax(r,this.axis[0]):this.softmax(r,this.axis)})}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Softmax",n})());class Du extends He{constructor(t,e){if(super(e),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",Du.verifyArgs(e),this.rank=t,Zt(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new Le(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=Na(e.kernelSize,t,"kernelSize"),this.strides=Na(null==e.strides?1:e.strides,t,"strides"),this.padding=null==e.padding?"valid":e.padding,Ln(this.padding),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Rt(this.dataFormat),this.activation=cr(e.activation),this.useBias=null==e.useBias||e.useBias,this.biasInitializer=xt(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=Bt(e.biasConstraint),this.biasRegularizer=bt(e.biasRegularizer),this.activityRegularizer=bt(e.activityRegularizer),this.dilationRate=Na(null==e.dilationRate?1:e.dilationRate,t,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new A(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new A(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new A(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(t){if(Pn("kernelSize"in t,"required key 'kernelSize' not in config"),"number"!=typeof t.kernelSize&&!lp(t.kernelSize,"number",1,3))throw new A(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(t.kernelSize)}.`)}getConfig(){const t={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:ur(this.activation),useBias:this.useBias,biasInitializer:Nt(this.biasInitializer),biasRegularizer:ct(this.biasRegularizer),activityRegularizer:ct(this.activityRegularizer),biasConstraint:zt(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}class Ca extends Du{constructor(t,e){super(t,e),this.kernel=null,Ca.verifyArgs(e),this.filters=e.filters,Zt(this.filters,"filters"),this.kernelInitializer=xt(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=Bt(e.kernelConstraint),this.kernelRegularizer=bt(e.kernelRegularizer)}build(t){t=Je(t);const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new A(`The channel dimension of the input should be defined. Found ${t[e]}`);const s=t[e],r=this.kernelSize.concat([s,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[e]:s}}],this.built=!0}call(t,e){return z(()=>{let s;t=Ee(t);const r=null==this.bias?null:this.bias.read(),a=Py(this.activation.getClassName());if(null!=a&&2===this.rank)s=Vp(t,this.kernel.read(),r,this.strides,this.padding,this.dataFormat,this.dilationRate,a);else{if(1===this.rank)s=function Fx(n,t,e,s=1,r="valid",a,o=1){return z(()=>{if(null==a&&(a="channelsLast"),Rt(a),3!==n.shape.length)throw new A(`The input of a conv1dWithBias operation should be 3, but is ${n.shape.length} instead.`);if(3!==t.shape.length)throw new A(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=e&&1!==e.shape.length)throw new A(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===a&&(n=Ye(n,[0,2,1])),"causal"===r)throw new Le("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let i=mg(n,t,s,"same"===r?"same":"valid","NWC",o);return null!=e&&(i=as(i,e)),i})}(t,this.kernel.read(),r,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)s=Vp(t,this.kernel.read(),r,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new Le("convolutions greater than 3D are not implemented yet.");s=function Ox(n,t,e,s=[1,1,1],r="valid",a,o){return z(()=>{if(null==a&&(a="channelsLast"),Rt(a),4!==n.rank&&5!==n.rank)throw new A(`conv3dWithBias expects input to be of rank 4 or 5, but received ${n.rank}.`);if(4!==t.rank&&5!==t.rank)throw new A(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${n.rank}.`);let i=Dx(n,a);if("causal"===r)throw new Le("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return i=ZS(i,t,s,"same"===r?"same":"valid","NDHWC",o),null!=e&&(i=as(i,e)),"channelsFirst"===a&&(i=Ye(i,[0,4,1,2,3])),i})}(t,this.kernel.read(),r,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(s=this.activation.apply(s))}return s})}computeOutputShape(t){t=Je(t);const e=[],s="channelsLast"===this.dataFormat?t.slice(1,t.length-1):t.slice(2);for(let a=0;a<s.length;++a){const o=ls(s[a],this.kernelSize[a],this.padding,this.strides[a],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[a]);e.push(o)}let r=[t[0]];return"channelsLast"===this.dataFormat?(r=r.concat(e),r.push(this.filters)):(r.push(this.filters),r=r.concat(e)),r}getConfig(){const t={filters:this.filters,kernelInitializer:Nt(this.kernelInitializer),kernelRegularizer:ct(this.kernelRegularizer),kernelConstraint:zt(this.kernelConstraint)},e=super.getConfig();return Object.assign(t,e),t}static verifyArgs(t){if(!("filters"in t)||"number"!=typeof t.filters||t.filters<1)throw new A(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(t.filters)}`)}}let Px=(()=>{class n extends Ca{constructor(e){super(2,e),n.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!lp(e.kernelSize,"number",1,2))throw new A(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}return n.className="Conv2D",n})();J(Px);let Lx=(()=>{class n extends Ca{constructor(e){super(3,e),n.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new A(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}return n.className="Conv3D",n})();J(Lx),J((()=>{class n extends Px{constructor(e){if(super(e),this.inputSpec=[new Mt({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new A(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=Je(e)).length)throw new A("Input should have rank 4; Received input shape: "+JSON.stringify(e));const s="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[s])throw new A("The channel dimension of the inputs should be defined. Found `None`.");const r=e[s],a=this.kernelSize.concat([this.filters,r]);this.kernel=this.addWeight("kernel",a,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Mt({ndim:4,axes:{[s]:r}})],this.built=!0}call(e,s){return z(()=>{let r=Ee(e);if(4!==r.shape.length)throw new A(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${r.shape.length}`);const a=r.shape;let i,l;"channelsFirst"===this.dataFormat?(i=2,l=3):(i=1,l=2);const c=a[l],d=this.kernelSize[1],f=this.strides[1],y=[a[0],ks(a[i],this.strides[0],this.kernelSize[0],this.padding),ks(c,f,d,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(r=Ye(r,[0,2,3,1]));let x=gg(r,this.kernel.read(),y,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(x=Ye(x,[0,3,1,2])),null!=this.bias&&(x=as(x,this.bias.read(),this.dataFormat)),null!=this.activation&&(x=this.activation.apply(x)),x})}computeOutputShape(e){const s=(e=Je(e)).slice();let r,a,o;"channelsFirst"===this.dataFormat?(r=1,a=2,o=3):(r=3,a=1,o=2);const i=this.kernelSize[0],l=this.kernelSize[1],u=this.strides[0],c=this.strides[1];return s[r]=this.filters,s[a]=ks(s[a],u,i,this.padding),s[o]=ks(s[o],c,l,this.padding),s}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}return n.className="Conv2DTranspose",n})()),J((()=>{class n extends Lx{constructor(e){if(super(e),this.inputSpec=[new Mt({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new A(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=Je(e)).length)throw new A("Input should have rank 5; Received input shape: "+JSON.stringify(e));const s="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[s])throw new A("The channel dimension of the inputs should be defined. Found `None`.");const r=e[s],a=this.kernelSize.concat([this.filters,r]);this.kernel=this.addWeight("kernel",a,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Mt({ndim:5,axes:{[s]:r}})],this.built=!0}call(e,s){return z(()=>{let r=Ee(e);if(5!==r.shape.length)throw new A(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${r.shape.length}`);const a=r.shape;let i,l,u;"channelsFirst"===this.dataFormat?(u=2,i=3,l=4):(u=1,i=2,l=3);const h=a[i],d=a[l],f=this.kernelSize[1],g=this.kernelSize[2],y=this.strides[1],x=this.strides[2],I=[a[0],ks(a[u],this.strides[0],this.kernelSize[0],this.padding),ks(h,y,f,this.padding),ks(d,x,g,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(r=Ye(r,[0,2,3,4,1]));let N=eI(r,this.kernel.read(),I,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(N=Ye(N,[0,4,1,2,3])),null!==this.bias&&(N=as(N,this.bias.read(),this.dataFormat)),null!==this.activation&&(N=this.activation.apply(N)),N})}computeOutputShape(e){const s=(e=Je(e)).slice();let r,a,o,i;"channelsFirst"===this.dataFormat?(r=1,a=2,o=3,i=4):(r=4,a=1,o=2,i=3);const l=this.kernelSize[0],u=this.kernelSize[1],c=this.kernelSize[2],h=this.strides[0],d=this.strides[1],p=this.strides[2];return s[r]=this.filters,s[a]=ks(s[a],h,l,this.padding),s[o]=ks(s[o],d,u,this.padding),s[i]=ks(s[i],p,c,this.padding),s}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}return n.className="Conv3DTranspose",n})());let CE=(()=>{class n extends Ca{constructor(e,s){if(super(e,s),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==s.filters)throw new A("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=s.kernelInitializer||null!=s.kernelRegularizer||null!=s.kernelConstraint)throw new A("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=s.padding&&"same"!==s.padding&&"valid"!==s.padding)throw new A(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(s.padding)}`);this.depthMultiplier=null==s.depthMultiplier?1:s.depthMultiplier,this.depthwiseInitializer=xt(s.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=bt(s.depthwiseRegularizer),this.depthwiseConstraint=Bt(s.depthwiseConstraint),this.pointwiseInitializer=xt(s.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=bt(s.pointwiseRegularizer),this.pointwiseConstraint=Bt(s.pointwiseConstraint)}build(e){if((e=Je(e)).length<this.rank+2)throw new A(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const s="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[s]||e[s]<0)throw new A(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[s])}`);const r=e[s],a=this.kernelSize.concat([r,this.depthMultiplier]),o=[];for(let l=0;l<this.rank;++l)o.push(1);o.push(r*this.depthMultiplier,this.filters);const i=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",a,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,i,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",o,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,i,this.pointwiseConstraint),this.bias=this.useBias?this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,i,this.biasConstraint):null,this.inputSpec=[new Mt({ndim:this.rank+2,axes:{[s]:r}})],this.built=!0}call(e,s){return z(()=>{let r;if(e=Ee(e),1===this.rank)throw new Le("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=Ye(e,[0,2,3,1])),r=Ng(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(r=as(r,this.bias.read(),this.dataFormat)),null!=this.activation&&(r=this.activation.apply(r)),"channelsFirst"===this.dataFormat&&(r=Ye(r,[0,3,1,2])),r})}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=Nt(this.depthwiseInitializer),e.pointwiseInitializer=Nt(this.pointwiseInitializer),e.depthwiseRegularizer=ct(this.depthwiseRegularizer),e.pointwiseRegularizer=ct(this.pointwiseRegularizer),e.depthwiseConstraint=zt(this.depthwiseConstraint),e.pointwiseConstraint=zt(this.pointwiseConstraint),e}}return n.className="SeparableConv",n})();function Vx(n,t,e,s){if(Array.isArray(n)){if(null!=t||null!=e)throw new A("When inputs is an array, neither initialState or constants should be provided");null!=s&&(e=n.slice(n.length-s,n.length),n=n.slice(0,n.length-s)),n.length>1&&(t=n.slice(1,n.length)),n=n[0]}function r(a){return null==a||Array.isArray(a)?a:[a]}return{inputs:n,initialState:t=r(t),constants:e=r(e)}}function Mx(n,t,e,s=!1,r,a,o=!1,i=!1){return z(()=>{const l=t.shape.length;if(l<3)throw new A(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(ss(2,l));if(t=Ye(t,u),null!=a)throw new Le("The rnn() functoin of the deeplearn.js backend does not support constants yet.");o&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=r&&((r=he(he(r,"bool"),"float32")).rank===l-1&&(r=Sn(r,-1)),r=Ye(r,u)),s&&(t=Fr(t,0),null!=r&&(r=Fr(r,0)));const c=[];let h,d=e;const p=t.shape[0],f=Or(t);let g,m;null!=r&&(g=Or(r));for(let y=0;y<p;++y){const x=f[y],b=z(()=>n(x,d));if(null==r)h=b[0],d=b[1];else{const w=z(()=>{const v=g[y],I=ge(jn(v),v);return{output:ne(E(b[0],v),E(d[0],I)),newStates:d.map((_,$)=>ne(E(b[1][$],v),E(_,I)))}});h=w.output,d=w.newStates}i&&c.push(h)}return i&&(m=Ls(c,1)),[h,m,d]})}J((()=>{class n extends CE{constructor(e){super(2,e)}}return n.className="SeparableConv2D",n})()),J((()=>{class n extends Ca{constructor(e){super(1,e),n.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!lp(e.kernelSize,"number",1,1))throw new A(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}return n.className="Conv1D",n})()),J((()=>{class n extends He{constructor(e){super(e),this.cropping="number"==typeof e.cropping?[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,s){return z(()=>{if(e=Ee(e),"channelsLast"===this.dataFormat){const r=gu(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return gu(r,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const r=gu(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return gu(r,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Cropping2D",n})()),J((()=>{class n extends He{constructor(e){super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Rt(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,function Q$(n){Mr(X$,"InterpolationFormat",n)}(this.interpolation)}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],null==e[2]?null:this.size[0]*e[2],null==e[3]?null:this.size[1]*e[3]]:[e[0],null==e[1]?null:this.size[0]*e[1],null==e[2]?null:this.size[1]*e[2],e[3]]}call(e,s){return z(()=>{let r=Ee(e);const a=r.shape;if("channelsFirst"===this.dataFormat){r=Ye(r,[0,2,3,1]);const o=this.size[0]*a[2],i=this.size[1]*a[3],l="nearest"===this.interpolation?ys.resizeNearestNeighbor(r,[o,i]):ys.resizeBilinear(r,[o,i]);return Ye(l,[0,3,1,2])}{const o=this.size[0]*a[1],i=this.size[1]*a[2];return"nearest"===this.interpolation?ys.resizeNearestNeighbor(r,[o,i]):ys.resizeBilinear(r,[o,i])}})}getConfig(){const e={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},s=super.getConfig();return Object.assign(e,s),e}}return n.className="UpSampling2D",n})()),J((()=>{class n extends Du{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=xt(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=Bt(e.depthwiseConstraint),this.depthwiseRegularizer=bt(e.depthwiseRegularizer)}build(e){if((e=Je(e)).length<4)throw new A(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const s="channelsFirst"===this.dataFormat?1:3;if(null==e[s]||e[s]<0)throw new A(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[s]}).`);const r=e[s];this.depthwiseKernel=this.addWeight("depthwise_kernel",[this.kernelSize[0],this.kernelSize[1],r,this.depthMultiplier],null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.bias=this.useBias?this.addWeight("bias",[r*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,s){return z(()=>{let r=function kE(n,t,e=[1,1],s="valid",r,a){return z(()=>{null==r&&(r="channelsLast"),Rt(r);let o=Lp(n,r);if(4!==n.rank)throw new A(`Input for depthwiseConv2d is required to be 4-D, but is instead ${n.rank}-D`);if(4!==t.rank)throw new A(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return o=Xl(o,t,e,"same"===s?"same":"valid","NHWC",a),"channelsFirst"===r&&(o=Ye(o,[0,3,1,2])),o})}(e=Ee(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(r=as(r,this.bias.read(),this.dataFormat)),null!=this.activation&&(r=this.activation.apply(r)),r})}computeOutputShape(e){e=Je(e);const r="channelsFirst"===this.dataFormat?e[3]:e[2],a="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,o=ls("channelsFirst"===this.dataFormat?e[2]:e[1],this.kernelSize[0],this.padding,this.strides[0]),i=ls(r,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],a,o,i]:[e[0],o,i,a]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=Nt(this.depthwiseInitializer),e.depthwiseRegularizer=ct(this.depthwiseRegularizer),e.depthwiseConstraint=zt(this.depthwiseRegularizer),e}}return n.className="DepthwiseConv2D",n})());let gi=(()=>{class n extends He{constructor(e){let s;if(super(e),null==e.cell)throw new A("cell property is missing for the constructor of RNN.");if(s=Array.isArray(e.cell)?new Wx({cells:e.cell}):e.cell,null==s.stateSize)throw new A("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=s,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new Mt({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return null==this.states_?ss(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map(s=>null):this.states_}setStates(e){this.states_=e}computeOutputShape(e){pp(e)&&(e=e[0]);let s=this.cell.stateSize;Array.isArray(s)||(s=[s]);const r=s[0];let a;if(a=this.returnSequences?[e[0],e[1],r]:[e[0],r],this.returnState){const o=[];for(const i of s)o.push([e[0],i]);return[a].concat(o)}return a}computeMask(e,s){return z(()=>{Array.isArray(s)&&(s=s[0]);const r=this.returnSequences?s:null;if(this.returnState){const a=this.states.map(o=>null);return[r].concat(a)}return r})}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,s=[];for(let r=0;r<e;++r)s.push(null);return s}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new Le("Constants support is not implemented in RNN yet.");pp(e)&&(e=e[0]);const r=this.stateful?e[0]:null,a=e.slice(2);this.inputSpec[0]=new Mt({shape:[r,null,...a]});const o=[e[0]].concat(e.slice(2));let i;if(this.cell.build(o),i=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!ke(this.stateSpec.map(l=>l.shape[l.shape.length-1]),i))throw new A(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=i.map(l=>new Mt({shape:[null,l]}));this.stateful&&this.resetStates()}resetStates(e,s=!1){z(()=>{if(!this.stateful)throw new ws("Cannot call resetStates() on an RNN Layer that is not stateful.");const r=this.inputSpec[0].shape[0];if(null==r)throw new A("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)this.states_=Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(a=>Yt([r,a])):[Yt([r,this.cell.stateSize])];else if(null==e)Be(this.states_),null!=this.keptStates&&(Be(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(a=>Yt([r,a])):this.states_[0]=Yt([r,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new A(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===s?this.keptStates.push(this.states_.slice()):Be(this.states_);for(let a=0;a<this.states_.length;++a){const o=e[a],i=Array.isArray(this.cell.stateSize)?this.cell.stateSize[a]:this.cell.stateSize,l=[r,i];if(!ke(o.shape,l))throw new A(`State ${a} is incompatible with layer ${this.name}: expected shape=${l}, received shape=${o.shape}`);this.states_[a]=o}}this.states_=this.states_.map(a=>fs(a.clone()))})}apply(e,s){let r=null==s?null:s.initialState,a=null==s?null:s.constants;null==s&&(s={});const o=Vx(e,r,a,this.numConstants);e=o.inputs,r=o.initialState,a=o.constants;let i=[],l=[];if(null!=r){s.initialState=r,i=i.concat(r),this.stateSpec=[];for(const c of r)this.stateSpec.push(new Mt({shape:c.shape}));l=l.concat(this.stateSpec)}if(null!=a&&(s.constants=a,i=i.concat(a),this.numConstants=a.length),i[0]instanceof Ns){const c=[e].concat(i),h=this.inputSpec.concat(l),d=this.inputSpec;this.inputSpec=h;const p=super.apply(c,s);return this.inputSpec=d,p}return super.apply(e,s)}call(e,s){return z(()=>{const r=null==s?null:s.mask,a=null==s?null:s.training;let o=null==s?null:s.initialState;e=Ee(e),null==o&&(o=this.stateful?this.states_:this.getInitialState(e));const i=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(o.length!==i)throw new A(`RNN Layer has ${i} state(s) but was passed ${o.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const l={training:a},c=Mx((g,m)=>{const y=this.cell.call([g].concat(m),l);return[y[0],y.slice(1)]},e,o,this.goBackwards,r,null,this.unroll,this.returnSequences),h=c[0],d=c[1],p=c[2];this.stateful&&this.resetStates(p,a);const f=this.returnSequences?d:h;return this.returnState?[f].concat(p):f})}getInitialState(e){return z(()=>{let s=Yt(e.shape);return s=be(s,[1,2]),s=ui(s),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(r=>r>1?hp(s,[1,r]):s):this.cell.stateSize>1?[hp(s,[1,this.cell.stateSize])]:[s]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),s={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(s.numConstants=this.numConstants);const r=this.cell.getConfig();return this.getClassName()===n.className&&(s.cell={className:this.cell.getClassName(),config:r}),Object.assign(Object.assign(Object.assign({},r),e),s)}static fromConfig(e,s,r={}){const o=Cs(s.cell,r);return new e(Object.assign(s,{cell:o}))}}return n.className="RNN",n})();J(gi);class Fu extends He{}let zx=(()=>{class n extends Fu{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,Zt(this.units,"units"),this.activation=cr(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=xt(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=xt(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=xt(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=bt(e.kernelRegularizer),this.recurrentRegularizer=bt(e.recurrentRegularizer),this.biasRegularizer=bt(e.biasRegularizer),this.kernelConstraint=Bt(e.kernelConstraint),this.recurrentConstraint=Bt(e.recurrentConstraint),this.biasConstraint=Bt(e.biasConstraint),this.dropout=va([1,or([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=va([1,or([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=Je(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.bias=this.useBias?this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,s){return z(()=>{if(2!==e.length)throw new A(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let r=e[1];e=e[0];const a=null!=s.training&&s.training;let o;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=hr({ones:()=>jn(e),rate:this.dropout,training:a,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=hr({ones:()=>jn(r),rate:this.recurrentDropout,training:a,dropoutFunc:this.dropoutFunc}));const i=this.dropoutMask,l=this.recurrentDropoutMask;o=Ss(null!=i?E(e,i):e,this.kernel.read()),null!=this.bias&&(o=as(o,this.bias.read())),null!=l&&(r=E(r,l));let u=ne(o,Ss(r,this.recurrentKernel.read()));return null!=this.activation&&(u=this.activation.apply(u)),[u,u]})}getConfig(){const e=super.getConfig(),s={units:this.units,activation:ur(this.activation),useBias:this.useBias,kernelInitializer:Nt(this.kernelInitializer),recurrentInitializer:Nt(this.recurrentInitializer),biasInitializer:Nt(this.biasInitializer),kernelRegularizer:ct(this.kernelRegularizer),recurrentRegularizer:ct(this.recurrentRegularizer),biasRegularizer:ct(this.biasRegularizer),activityRegularizer:ct(this.activityRegularizer),kernelConstraint:zt(this.kernelConstraint),recurrentConstraint:zt(this.recurrentConstraint),biasConstraint:zt(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign(Object.assign({},e),s)}}return n.className="SimpleRNNCell",n})();J(zx),J((()=>{class n extends gi{constructor(e){e.cell=new zx(e),super(e)}call(e,s){return z(()=>(null!=this.cell.dropoutMask&&(Be(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Be(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})))}static fromConfig(e,s){return new e(s)}}return n.className="SimpleRNN",n})());let Bx=(()=>{class n extends Fu{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new A("GRUCell does not support reset_after parameter set to true.");this.units=e.units,Zt(this.units,"units"),this.activation=cr(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=cr(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=xt(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=xt(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=xt(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=bt(e.kernelRegularizer),this.recurrentRegularizer=bt(e.recurrentRegularizer),this.biasRegularizer=bt(e.biasRegularizer),this.kernelConstraint=Bt(e.kernelConstraint),this.recurrentConstraint=Bt(e.recurrentConstraint),this.biasConstraint=Bt(e.biasConstraint),this.dropout=va([1,or([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=va([1,or([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=Je(e),this.kernel=this.addWeight("kernel",[e[e.length-1],3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.bias=this.useBias?this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,s){return z(()=>{if(2!==e.length)throw new A(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const r=null!=s.training&&s.training;let a=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=hr({ones:()=>jn(e),rate:this.dropout,training:r,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=hr({ones:()=>jn(a),rate:this.recurrentDropout,training:r,count:3,dropoutFunc:this.dropoutFunc}));const i=this.recurrentDropoutMask;let l,u,c;0<this.dropout&&this.dropout<1&&(e=E(e,this.dropoutMask[0]));let h=Ss(e,this.kernel.read());this.useBias&&(h=as(h,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(a=E(a,i[0]));const d=this.recurrentKernel.read(),[p,f]=On(d,[2*this.units,this.units],d.rank-1),g=Ss(a,p),[m,y,x]=On(h,3,h.rank-1),[b,w]=On(g,2,g.rank-1);l=this.recurrentActivation.apply(ne(m,b)),u=this.recurrentActivation.apply(ne(y,w));const v=Ss(E(u,a),f);c=this.activation.apply(ne(x,v));const I=ne(E(l,a),E(ne(1,yt(l)),c));return[I,I]})}getConfig(){const e=super.getConfig(),s={units:this.units,activation:ur(this.activation),recurrentActivation:ur(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Nt(this.kernelInitializer),recurrentInitializer:Nt(this.recurrentInitializer),biasInitializer:Nt(this.biasInitializer),kernelRegularizer:ct(this.kernelRegularizer),recurrentRegularizer:ct(this.recurrentRegularizer),biasRegularizer:ct(this.biasRegularizer),activityRegularizer:ct(this.activityRegularizer),kernelConstraint:zt(this.kernelConstraint),recurrentConstraint:zt(this.recurrentConstraint),biasConstraint:zt(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign(Object.assign({},e),s)}}return n.className="GRUCell",n})();J(Bx),J((()=>{class n extends gi{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Bx(e),super(e)}call(e,s){return z(()=>(null!=this.cell.dropoutMask&&(Be(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Be(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})))}static fromConfig(e,s){return 0===s.implmentation&&(s.implementation=1),new e(s)}}return n.className="GRU",n})());let Mp=(()=>{class n extends Fu{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,Zt(this.units,"units"),this.activation=cr(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=cr(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=xt(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=xt(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=xt(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=bt(e.kernelRegularizer),this.recurrentRegularizer=bt(e.recurrentRegularizer),this.biasRegularizer=bt(e.biasRegularizer),this.kernelConstraint=Bt(e.kernelConstraint),this.recurrentConstraint=Bt(e.recurrentConstraint),this.biasConstraint=Bt(e.biasConstraint),this.dropout=va([1,or([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=va([1,or([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var s;let a;if(e=Je(e),this.kernel=this.addWeight("kernel",[e[e.length-1],4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const o=this.biasInitializer,i=this.units;a=new((s=class extends Xn{apply(u,c){const h=o.apply([i]),d=(new qy).apply([i]),p=o.apply([2*i]);return Gy(Gy(h,d),p)}}).className="CustomInit",s)}else a=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,a,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,s){return z(()=>{const r=null!=s.training&&s.training;if(3!==e.length)throw new A(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let a=e[1];const o=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=hr({ones:()=>jn(e),rate:this.dropout,training:r,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=hr({ones:()=>jn(a),rate:this.recurrentDropout,training:r,count:4,dropoutFunc:this.dropoutFunc}));const l=this.recurrentDropoutMask;let u,c,h,d;0<this.dropout&&this.dropout<1&&(e=E(e,this.dropoutMask[0]));let p=Ss(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(a=E(a,l[0])),p=ne(p,Ss(a,this.recurrentKernel.read())),this.useBias&&(p=as(p,this.bias.read()));const[f,g,m,y]=On(p,4,p.rank-1);u=this.recurrentActivation.apply(f),c=this.recurrentActivation.apply(g),h=ne(E(c,o),E(u,this.activation.apply(m))),d=this.recurrentActivation.apply(y);const x=E(d,this.activation.apply(h));return[x,x,h]})}getConfig(){const e=super.getConfig(),s={units:this.units,activation:ur(this.activation),recurrentActivation:ur(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Nt(this.kernelInitializer),recurrentInitializer:Nt(this.recurrentInitializer),biasInitializer:Nt(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:ct(this.kernelRegularizer),recurrentRegularizer:ct(this.recurrentRegularizer),biasRegularizer:ct(this.biasRegularizer),activityRegularizer:ct(this.activityRegularizer),kernelConstraint:zt(this.kernelConstraint),recurrentConstraint:zt(this.recurrentConstraint),biasConstraint:zt(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign(Object.assign({},e),s)}}return n.className="LSTMCell",n})();J(Mp),J((()=>{class n extends gi{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Mp(e),super(e)}call(e,s){return z(()=>(null!=this.cell.dropoutMask&&(Be(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Be(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})))}static fromConfig(e,s){return 0===s.implmentation&&(s.implementation=1),new e(s)}}return n.className="LSTM",n})());let Wx=(()=>{class n extends Fu{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const s of this.cells.slice().reverse())Array.isArray(s.stateSize)?e.push(...s.stateSize):e.push(s.stateSize);return e}call(e,s){return z(()=>{let r=e.slice(1);const a=[];for(const l of this.cells.slice().reverse())Array.isArray(l.stateSize)?a.push(r.splice(0,l.stateSize.length)):a.push(r.splice(0,1));a.reverse();const o=[];let i;for(let l=0;l<this.cells.length;++l){const u=this.cells[l];r=a[l],i=0===l?[e[0]].concat(r):[i[0]].concat(r),i=u.call(i,s),o.push(i.slice(1))}r=[];for(const l of o.slice().reverse())r.push(...l);return[i[0]].concat(r)})}build(e){let s;pp(e)&&(e=e[0]),this.cells.forEach((r,a)=>{zr(`RNNCell_${a}`,()=>{r.build(e),s=Array.isArray(r.stateSize)?r.stateSize[0]:r.stateSize,e=[e[0],s]})}),this.built=!0}getConfig(){const e=super.getConfig(),a={cells:this.cells.map(o=>({className:o.getClassName(),config:o.getConfig()}))};return Object.assign(Object.assign({},e),a)}static fromConfig(e,s,r={}){const a=[];for(const o of s.cells)a.push(Cs(o,r));return new e({cells:a})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const s of this.cells)e.push(...s.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const s of this.cells)e.push(...s.nonTrainableWeights);if(!this.trainable){const s=[];for(const r of this.cells)s.push(...r.trainableWeights);return s.concat(e)}return e}getWeights(){const e=[];for(const s of this.cells)e.push(...s.weights);return fp(e)}setWeights(e){const s=[];for(const r of this.cells){const o=e.splice(r.weights.length);for(let i=0;i<r.weights.length;++i)s.push([r.weights[i],o[i]])}mp(s)}}return n.className="StackedRNNCells",n})();function hr(n){const{ones:t,rate:e,training:s=!1,count:r=1,dropoutFunc:a}=n,o=()=>null!=a?a(t(),e):jy(t(),e),i=()=>hi(o,t,s);return!r||r<=1?fs(i().clone()):Array(r).fill(void 0).map(i).map(u=>fs(u.clone()))}J(Wx);let _E=(()=>{class n extends gi{constructor(e){if(e.unroll)throw new Le("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new Le("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new Mt({ndim:5})]}call(e,s){return z(()=>{if(null!=this.cell.dropoutMask&&(Be(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Be(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),s&&s.constants)throw new A("ConvRNN2D cell does not support constants");return super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})})}computeOutputShape(e){let s=this.computeSingleOutputShape(e);return this.returnSequences||(s=[s[0],...s.slice(2)]),this.returnState&&(s=[s,...Array(2).fill([e[0],...s.slice(-3)])]),s}getInitialState(e){return z(()=>{const{stateSize:s}=this.cell,a=this.computeSingleOutputShape(e.shape),i=Yt([a[0],...a.slice(2)]);return Array.isArray(s)?Array(s.length).fill(i):[i]})}resetStates(e,s=!1){z(()=>{if(!this.stateful)throw new ws("Cannot call resetStates() on an RNN Layer that is not stateful.");const r=this.inputSpec[0].shape,a=this.computeSingleOutputShape(r),o=[a[0],...a.slice(2)];if(null==r[0])throw new A("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())this.states_=Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(()=>Yt(o)):[Yt(o)];else if(null==e)Be(this.states_),null!=this.keptStates&&(Be(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>Yt(o)):this.states_[0]=Yt(o);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new A(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);s?this.keptStates.push(this.states_.slice()):Be(this.states_);for(let l=0;l<this.states_.length;++l){const u=e[l],c=o;if(!ke(u.shape,c))throw new A(`State ${l} is incompatible with layer ${this.name}: expected shape=${c}, received shape=${u.shape}`);this.states_[l]=u}}this.states_=this.states_.map(l=>fs(l.clone()))})}computeSingleOutputShape(e){const{dataFormat:s,filters:r,kernelSize:a,padding:o,strides:i,dilationRate:l}=this.cell,u="channelsFirst"===s,h=e[u?4:3],d=ls(e[u?3:2],a[0],o,i[0],l[0]),p=ls(h,a[1],o,i[1],l[1]);return[...e.slice(0,2),...u?[r,d,p]:[d,p,r]]}}return n.className="ConvRNN2D",n})(),Ux=(()=>{class n extends Mp{constructor(e){const{filters:s,kernelSize:r,strides:a,padding:o,dataFormat:i,dilationRate:l}=e;super(Object.assign(Object.assign({},e),{units:s})),this.filters=s,Zt(this.filters,"filters"),this.kernelSize=Na(r,2,"kernelSize"),this.kernelSize.forEach(u=>Zt(u,"kernelSize")),this.strides=Na(a||1,2,"strides"),this.strides.forEach(u=>Zt(u,"strides")),this.padding=o||"valid",Ln(this.padding),this.dataFormat=i||"channelsLast",Rt(this.dataFormat),this.dilationRate=Na(l||1,2,"dilationRate"),this.dilationRate.forEach(u=>Zt(u,"dilationRate"))}build(e){var s;e=Je(e);const r="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[r])throw new A(`The channel dimension of the input should be defined. Found ${e[r]}`);const i=this.kernelSize.concat([e[r],4*this.filters]);this.kernel=this.addWeight("kernel",i,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const l=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",l,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let u;if(this.unitForgetBias){const c=this.biasInitializer,h=this.filters;u=new((s=class extends Xn{apply(p,f){return cp([c.apply([h]),Os([h]),c.apply([2*h])])}}).className="CustomInit",s)}else u=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,u,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,s){return z(()=>{if(3!==e.length)throw new A(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const r=s.training||!1,a=e[0],o=e[1],i=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=hr({ones:()=>jn(a),rate:this.dropout,training:r,count:4,dropoutFunc:this.dropoutFunc}));const u=this.dropoutMask,c=(se,ie,oe)=>ie&&ie[oe]?E(ie[oe],se):se;let h=c(a,u,0),d=c(a,u,1),p=c(a,u,2),f=c(a,u,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=hr({ones:()=>jn(o),rate:this.recurrentDropout,training:r,count:4,dropoutFunc:this.dropoutFunc}));const g=this.recurrentDropoutMask;let m=c(o,g,0),y=c(o,g,1),x=c(o,g,2),b=c(o,g,3);const[v,I,N,k]=On(this.kernel.read(),4,3),[_,$,P,B]=this.useBias?On(this.bias.read(),4):[null,null,null,null];h=this.inputConv(h,v,_,this.padding),d=this.inputConv(d,I,$,this.padding),p=this.inputConv(p,N,P,this.padding),f=this.inputConv(f,k,B,this.padding);const[W,U,G,q]=On(this.recurrentKernel.read(),4,3);m=this.recurrentConv(m,W),y=this.recurrentConv(y,U),x=this.recurrentConv(x,G),b=this.recurrentConv(b,q);const K=this.recurrentActivation.apply(ne(h,m)),H=this.recurrentActivation.apply(ne(d,y)),X=ne(E(H,i),E(K,this.activation.apply(ne(p,x)))),ee=E(this.recurrentActivation.apply(ne(f,b)),this.activation.apply(X));return[ee,ee,X]})}getConfig(){const r=function(n,t){var e={};for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&t.indexOf(s)<0&&(e[s]=n[s]);if(null!=n&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(s=Object.getOwnPropertySymbols(n);r<s.length;r++)t.indexOf(s[r])<0&&Object.prototype.propertyIsEnumerable.call(n,s[r])&&(e[s[r]]=n[s[r]])}return e}(super.getConfig(),["units"]),a={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign(Object.assign({},r),a)}inputConv(e,s,r,a){const o=Rr(e,s,this.strides,a||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return r?as(o,r,this.dataFormat):o}recurrentConv(e,s){return Rr(e,s,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}return n.className="ConvLSTM2DCell",n})();J(Ux),J((()=>{class n extends _E{constructor(e){const s=new Ux(e);super(Object.assign(Object.assign({},e),{cell:s}))}static fromConfig(e,s){return new e(s)}}return n.className="ConvLSTM2D",n})());let Gx=(()=>{class n extends He{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const s=e.shape,r=[];for(let a=0;a<this.noiseShape.length;++a)r.push(null==this.noiseShape[a]?s[a]:this.noiseShape[a]);return r}call(e,s){return z(()=>{this.invokeCallHook(e,s);const r=Ee(e);if(0<this.rate&&this.rate<1){const a=null!=s.training&&s.training,o=this.getNoiseShape(r);return hi(()=>jy(r,this.rate,o,this.seed),()=>r,a)}return e})}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},s=super.getConfig();return Object.assign(e,s),e}dispose(){return super.dispose()}}return n.className="Dropout",n})();J(Gx),J((()=>{class n extends Gx{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const s=e.shape;return[s[0],1,s[2]]}}return n.className="SpatialDropout1D",n})()),J((()=>{class n extends He{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let s=null;null!=e.batchSize&&(s=e.batchSize),this.batchInputShape=[s,e.inputDim]}this.units=e.units,Zt(this.units,"units"),this.activation=cr(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=xt(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=xt(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=Bt(e.kernelConstraint),this.biasConstraint=Bt(e.biasConstraint),this.kernelRegularizer=bt(e.kernelRegularizer),this.biasRegularizer=bt(e.biasRegularizer),this.activityRegularizer=bt(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const s=(e=Je(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[s,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:s}}],this.built=!0}computeOutputShape(e){const s=(e=Je(e)).slice();return s[s.length-1]=this.units,s}call(e,s){return z(()=>{this.invokeCallHook(e,s);const r=Ee(e),a=Py(this.activation.getClassName());let o;return null!=a?o=Ss(r,this.kernel.read(),a,this.bias?this.bias.read():null):(o=Ss(r,this.kernel.read()),null!=this.bias&&(o=as(o,this.bias.read())),null!=this.activation&&(o=this.activation.apply(o))),o})}getConfig(){const e={units:this.units,activation:ur(this.activation),useBias:this.useBias,kernelInitializer:Nt(this.kernelInitializer),biasInitializer:Nt(this.biasInitializer),kernelRegularizer:ct(this.kernelRegularizer),biasRegularizer:ct(this.biasRegularizer),activityRegularizer:ct(this.activityRegularizer),kernelConstraint:zt(this.kernelConstraint),biasConstraint:zt(this.biasConstraint)},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Dense",n})()),J((()=>{class n extends He{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=Je(e);for(const s of e.slice(1))if(null==s)throw new A(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],ar(e,1)]}call(e,s){return z(()=>{this.invokeCallHook(e,s);let r=Ee(e);if("channelsFirst"===this.dataFormat&&r.rank>1){const a=[0];for(let o=2;o<r.rank;++o)a.push(o);a.push(1),r=Ye(r,a)}return function i2(n){if(n.rank<=1)throw new A(`batchFlatten requires a minimum rank of 2. Got rank: ${n.rank}.`);const t=[n.shape[0],ar(n.shape,1)];return F(n,t)}(r)})}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const s=super.getConfig();return Object.assign(e,s),e}}return n.className="Flatten",n})()),J((()=>{class n extends He{constructor(e){super(e),this.supportsMasking=!0,this.activation=cr(e.activation)}call(e,s){return z(()=>{this.invokeCallHook(e,s);const r=Ee(e);return this.activation.apply(r)})}getConfig(){const e={activation:ur(this.activation)},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Activation",n})()),J((()=>{class n extends He{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,s){return z(()=>function a2(n,t){return z(()=>{if(2!==n.shape.length)throw new A(`repeat() expects a rank-2 tensor, but received a rank-${n.shape.length} tensor.`);return hp(ui(n,1),[1,t,1])})}(e=Ee(e),this.n))}getConfig(){const e={n:this.n},s=super.getConfig();return Object.assign(e,s),e}}return n.className="RepeatVector",n})()),J((()=>{class n extends He{constructor(e){super(e),this.targetShape=e.targetShape;for(let s=0;s<this.targetShape.length;++s)this.isUnknown(this.targetShape[s])&&(this.targetShape[s]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,s){const r="Total size of new array must be unchanged.",a=s.slice();let o=1,i=null;for(let u=0;u<a.length;++u){const c=a[u];if(this.isUnknown(c)){if(null!==i)throw new A("Can only specifiy one unknown dimension.");i=u}else o*=c}const l=ar(e);if(null!==i){if(0===o||l%o!=0)throw new A(r);a[i]=l/o}else if(l!==o)throw new A(r);return a}computeOutputShape(e){let s=!1;for(let r=0;r<e.length;++r)if(this.isUnknown(e[r])){s=!0;break}return s?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,s){return z(()=>{this.invokeCallHook(e,s);const r=Ee(e),a=r.shape,o=a.slice(0,1).concat(this.fixUnknownDimension(a.slice(1),this.targetShape));return F(r,o)})}getConfig(){const e={targetShape:this.targetShape},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Reshape",n})()),J((()=>{class n extends He{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const s=ss(1,e.dims.length+1);if(!ke(e.dims.slice().sort(),s))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new Mt({ndim:this.dims.length+1})]}computeOutputShape(e){const s=(e=Je(e)).slice();return this.dims.forEach((r,a)=>{s[a+1]=e[r]}),s}call(e,s){return Ye(Ee(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Permute",n})()),J((()=>{class n extends He{constructor(e){super(e??{}),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={maskValue:this.maskValue};return Object.assign(s,e),s}computeMask(e,s){const r=Ee(e);return td(Zo(r,this.maskValue),-1)}call(e,s){return z(()=>{this.invokeCallHook(e,s);const r=Ee(e),i=td(Zo(r,this.maskValue),-1,!0);return E(r,he(i,r.dtype))})}}return n.className="Masking",n})()),J((()=>{class n extends He{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let s=null;null!=e.batchSize&&(s=e.batchSize),this.batchInputShape=null==e.inputLength?[s,null]:[s].concat(nt(e.inputLength))}this.inputDim=e.inputDim,Zt(this.inputDim,"inputDim"),this.outputDim=e.outputDim,Zt(this.outputDim,"outputDim"),this.embeddingsInitializer=xt(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=bt(e.embeddingsRegularizer),this.activityRegularizer=bt(e.activityRegularizer),this.embeddingsConstraint=Bt(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,s){return z(()=>this.maskZero?(e=Ee(e),Zo(e,Xe(e))):null)}computeOutputShape(e){if(e=Je(e),null==this.inputLength)return[...e,this.outputDim];const s=nt(this.inputLength);if(s.length!==e.length-1)throw new A(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let r=0;for(let a=0;a<s.length;++a){const o=s[a],i=e[a+1];if(null!=o&&null!=i&&o!==i)throw new A(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==o&&(s[r]=i),r++}}return[e[0],...s,this.outputDim]}call(e,s){return z(()=>{this.invokeCallHook(e,s);let r=Ee(e);"int32"!==r.dtype&&(r=vs(r,"int32"));const a=Hy(this.embeddings.read(),F(r,[r.size]));return F(a,Je(this.computeOutputShape(r.shape)))})}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:Nt(this.embeddingsInitializer),embeddingsRegularizer:ct(this.embeddingsRegularizer),activityRegularizer:ct(this.activityRegularizer),embeddingsConstraint:zt(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Embedding",n})());class Wr extends He{constructor(t){super(t||{}),this.supportsMasking=!0}mergeFunction(t){throw new Le}computeElementwiseOpOutputShape(t,e){if(null==t||null==e)return null;if(t.length<e.length)return this.computeElementwiseOpOutputShape(e,t);if(0===e.length)return t;const s=t.slice(0,t.length-e.length);for(let r=0;r<e.length;++r){const a=t[t.length-e.length+r],o=e[r];if(null==a||null==o||a<0||o<0)s.push(null);else if(1===a)s.push(o);else if(1===o)s.push(a);else{if(a!==o)throw new A("Operands could not be broadcast together with shapes "+JSON.stringify(t)+" "+JSON.stringify(e));s.push(a)}}return s}build(t){if(Array.isArray(t)&&!Array.isArray(t[0])&&(t=[Je(t)]),t.length<2)throw new A(`A merge layer should be called on an Array of at least 2 inputs. Got ${t.length} input(s).`);let e=[];for(const a of t)null!=a&&null!==a[0]&&e.push(a[0]);if(e=rr(e),e.length>1)throw new A(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(t)}.`);let s=null==t[0]?null:t[0].slice(1);for(let a=1;a<t.length;++a){const o=null==t[a]?null:t[a].slice(1);s=this.computeElementwiseOpOutputShape(s,o)}const r=t.map(a=>a.length);this.reshapeRequired=-1!==t.indexOf(null)||1!==rr(r).length}call(t,e){return z(()=>{if(this.reshapeRequired){const s=[],r=t.map(a=>a.rank);if(-1===r.indexOf(null)){const a=or(r);for(let o of t){const i=o.rank;for(let l=0;l<a-i;++l)o=ui(o,1);s.push(o)}return this.mergeFunction(s)}{let a=!1;for(const l of t){const u=l.rank;if(null==u){const c=l.shape,h=c[0],d=c.slice(1).concat([h]);let p=F(l,[h].concat(ar(c.slice(1))));p=Ye(p,[1,0]),p=F(p,d),s.push(p),a=!0}else if(u>1){const c=ss(1,u).concat([0]);s.push(Ye(l,c)),a=!0}else s.push(l)}let o=this.mergeFunction(s);const i=o.rank;if(a)if(null==i){const l=o.shape,c=l[l.length-1],h=[c].concat(l.slice(0,l.length-1));o=F(Ye(F(o,[-1,c]),[1,0]),h)}else if(i>1){const l=[i-1].concat(ss(0,i-1));o=Ye(o,l)}return o}}return this.mergeFunction(t)})}computeOutputShape(t){let e;e=null==t[0]?null:t[0].slice(1);for(let r=1;r<t.length;++r){const a=null==t[r]?null:t[r].slice(1);e=this.computeElementwiseOpOutputShape(e,a)}let s=[];for(const r of t)null!=r&&null!==r[0]&&s.push(r[0]);return s=rr(s),e=1===s.length?s.concat(e):[null].concat(e),e}computeMask(t,e){return z(()=>{if(null==e)return null;if(!Array.isArray(e))throw new A("`mask` should be an Array");if(!Array.isArray(t))throw new A("`inputs` should be an Array");if(e.length!==t.length)throw new A(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${e.length})`);if(e.every(r=>null==r))return null;let s=(e=e.map(r=>null==r?r:Sn(r,0)))[0];for(let r=1;r<e.length-1;++r)s=Fs(s,e[r]);return s})}}function yi(n,t){for(;n<0;)n+=t;return n}function xi(n,t,e,s,r,a=.001){let o;if(2===n.rank)o=ES(n,t,e,s,r,a);else if(3===n.rank)o=RS(n,t,e,s,r,a);else{if(4!==n.rank)throw new Le(`batchNormalization is not implemented for array of rank ${n.rank} yet`);o=FS(n,t,e,s,r,a)}return o}function Ou(n,t,e,s,r,a){return z(()=>{let o;Rt(r),Vy(a),Ln(s),null==e&&(e=[1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),n=Lp(n,r);const i="same"===s?"same":"valid";return o="max"===a?cd(n,t,e,i):rd(n,t,e,i),"channelsFirst"===r&&(o=Ye(o,[0,3,1,2])),o})}function Hx(n,t,e,s,r,a){return z(()=>{let o;Rt(r),Vy(a),Ln(s),null==e&&(e=[1,1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),n=Dx(n,r);const i="same"===s?"same":"valid";return o="max"===a?NI(n,t,e,i):kS(n,t,e,i),"channelsFirst"===r&&(o=Ye(o,[0,4,1,2,3])),o})}J((()=>{class n extends Wr{constructor(e){super(e)}mergeFunction(e){return z(()=>{let s=e[0].clone();for(let r=1;r<e.length;++r)s=ne(s,e[r]);return s})}}return n.className="Add",n})()),J((()=>{class n extends Wr{constructor(e){super(e)}mergeFunction(e){return z(()=>{let s=e[0].clone();for(let r=1;r<e.length;++r)s=E(s,e[r]);return s})}}return n.className="Multiply",n})()),J((()=>{class n extends Wr{constructor(e){super(e)}mergeFunction(e){return z(()=>{let s=e[0].clone();for(let r=1;r<e.length;++r)s=ne(s,e[r]);return E(1/e.length,s)})}}return n.className="Average",n})()),J((()=>{class n extends Wr{constructor(e){super(e)}mergeFunction(e){return z(()=>{let s=e[0];for(let r=1;r<e.length;++r)s=er(s,e[r]);return s})}}return n.className="Maximum",n})()),J((()=>{class n extends Wr{constructor(e){super(e)}mergeFunction(e){return z(()=>{let s=e[0];for(let r=1;r<e.length;++r)s=ma(s,e[r]);return s})}}return n.className="Minimum",n})()),J((()=>{class n extends Wr{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new A("A `Concatenate` layer should be called on a list of at least 2 inputs");let s=!0;for(const a of e)if(null!=a){s=!1;break}if(s)return;const r=[];for(let a=0;a<e.length;++a){const o=e[a].slice();o.splice(this.axis,1);let i=!1;for(const l of r)if(ke(l,o)){i=!0;break}i||r.push(o)}if(r.length>1)throw new A("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return z(()=>cp(e,this.axis))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new A("A `Concatenate` layer should be called on a list of inputs.");const s=e,r=s[0].slice(),a=this.axis<0?r.length+this.axis:this.axis;for(const o of s.slice(1)){if(null==r[a]||null==o[a]){r[a]=null;break}r[a]+=o[a]}return r}computeMask(e,s){if(null==s)return null;if(!Array.isArray(s))throw new A("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new A("`inputs` should be an array for Concatenate");if(s.length!==e.length)throw new A(`Mismatch in the length of mask (${s.length}) and the legnth of inputs (${e.length})`);return z(()=>{let r=!0;if(s.forEach(i=>{null==i||(r=!1)}),r)return null;const a=[];for(let i=0;i<e.length;++i)a.push(null==s[i]?he(jn(e[i]),"bool"):s[i].rank<e[i].rank?Sn(s[i],-1):s[i]);const o=un(a,this.axis);return fg(o,-1,!1)})}getConfig(){const e={axis:this.axis},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Concatenate",n})()),J((()=>{class n extends Wr{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){S(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const s=e[0],r=e[1];if(s.length>3||r.length>3)throw new Le("Dot layer does not support tensors of 4D or higher rank yet.");const a=this.interpretAxes(s,r);if(s[a[0]]!==r[a[1]])throw new A(`Dimension incompatibility: ${s[a[0]]} !== ${r[a[1]]}`)}mergeFunction(e){if(2!==e.length)throw new A(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let a,s=e[0],r=e[1];return a=Array.isArray(this.axes)?this.axes.map((o,i)=>yi(o,e[i].shape.length)):[yi(this.axes,s.shape.length),yi(this.axes,r.shape.length)],this.normalize&&(s=Nu(s,a[0]),r=Nu(r,a[1])),function $E(n,t,e){if(n.shape.length>3||t.shape.length>3)throw new Le("batchDot is not implemented for tensors of 4D or higher rank yet");if(S(n.shape.length>=2,()=>`batchDot requires the rank of x to be >= 2, but got ${n.shape.length}`),S(n.shape.length>=2,()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`),"number"==typeof e&&(e=[e,e]),"complex64"===n.dtype||"complex64"===t.dtype)throw new Le("batchDot is not implemented for complex64-type Tensors yet.");const s=n.shape.length,r=t.shape.length;null==e&&(e=[s-1,r-2]);const a=e;return z(()=>{let o,i;if(s>r){o=s-r;const l=[];for(let u=0;u<o;++u)l.push(1);t=F(t,t.shape.concat(l))}else if(r>s){o=r-s;const l=[];for(let u=0;u<o;++u)l.push(1);n=F(n,n.shape.concat(l))}else o=0;if(i=2===n.shape.length&&2===t.shape.length?a[0]===a[1]?be(E(n,t),a[0]):be(E(Ye(n,[1,0]),t),a[1]):et(n,t,a[0]!==n.shape.length-1,a[1]===t.shape.length-1),o>0){let l;l=s>r?s+r-3:s-1;const u=[];for(let c=l;c<l+o;++c)u.push(c);i=ti(i,u)}return 1===i.shape.length&&(i=Sn(i,1)),i})}(s,r,a)}interpretAxes(e,s){let r;return r=Array.isArray(this.axes)?this.axes:[yi(this.axes,e.length),yi(this.axes,s.length)],r}computeOutputShape(e){S(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const s=e[0].slice(),r=e[1].slice();if(s.length>3||r.length>3)throw new Le("Dot layer does not support tensors of 4D or higher rank yet.");const a=this.interpretAxes(s,r);s.splice(a[0],1),r.splice(a[1],1),r.splice(0,1);const o=s.concat(r);return 1===o.length&&o.push(1),o}computeMask(e,s){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Dot",n})()),J((()=>{class n extends He{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={stddev:this.stddev};return Object.assign(s,e),s}call(e,s){return z(()=>{this.invokeCallHook(e,s);const r=Ee(e);return hi(()=>ne(yu(r.shape,0,this.stddev),r),()=>r,s.training||!1)})}}return n.className="GaussianNoise",n})()),J((()=>{class n extends He{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={rate:this.rate};return Object.assign(s,e),s}call(e,s){return z(()=>{this.invokeCallHook(e,s);const r=Ee(e);return this.rate>0&&this.rate<1?hi(()=>{const o=Math.sqrt(this.rate/(1-this.rate));return E(r,yu(r.shape,1,o))},()=>r,s.training||!1):r})}}return n.className="GaussianDropout",n})()),J((()=>{class n extends He{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||Ee(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={rate:this.rate};return Object.assign(s,e),s}call(e,s){return z(()=>{if(this.rate<1&&this.rate>0){const r=this._getNoiseShape(e);return hi(()=>{const o=Ee(e),u=-1.7580993408473766;let c=Dr(Jo(r),this.rate);c=vs(c,"float32");const h=((1-this.rate)*(1+this.rate*u**2))**-.5,d=-h*u*this.rate,p=ne(E(o,c),E(ne(c,-1),u));return ne(E(p,h),d)},()=>Ee(e),s.training||!1)}return e})}}return n.className="AlphaDropout",n})()),J((()=>{class n extends He{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=xt(e.betaInitializer||"zeros"),this.gammaInitializer=xt(e.gammaInitializer||"ones"),this.movingMeanInitializer=xt(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=xt(e.movingVarianceInitializer||"ones"),this.betaConstraint=Bt(e.betaConstraint),this.gammaConstraint=Bt(e.gammaConstraint),this.betaRegularizer=bt(e.betaRegularizer),this.gammaRegularizer=bt(e.gammaRegularizer)}build(e){e=Je(e);const s=this.axis>=0?this.axis:this.axis+e.length,r=e[s];if(null==r)throw new A(`Axis ${s} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new Mt({ndim:e.length,axes:{[s]:r}})];const a=[r];this.scale&&(this.gamma=this.addWeight("gamma",a,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",a,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",a,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",a,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,s){return z(()=>{const r=null!=s.training&&s.training,a=Ee(e),o=a.shape,i=o.length,l=ss(0,i),u=this.axis>=0?this.axis:this.axis+i;l.splice(u,1);const c=Lr(1,i);c[u]=o[u];const h=l.slice();h.sort();const d=!ke(h,ss(0,i).slice(0,i-1));if(!r)return(()=>{if(d){const b=F(this.movingMean.read(),c),w=F(this.movingVariance.read(),c),v=this.center?F(this.beta.read(),c):null,I=this.scale?F(this.gamma.read(),c):null;return xi(a,b,w,v,I,this.epsilon)}return xi(a,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[f,g,m]=function RE(n,t,e,s,r=.001){return ke(s.slice().sort(),ss(0,n.rank-1))?function EE(n,t,e,s,r=.001){return z(()=>{const a=hd(n,s),o=a.mean,i=a.variance;return[xi(n,o,i,e,t,r),o,i]})}(n,t,e,s,r):function AE(n,t,e,s,r=.001){return z(()=>{const a=hd(n,s),o=a.mean,i=a.variance,l=[];for(const f of ss(0,n.rank))-1!==s.indexOf(f)?l.push(1):l.push(n.shape[f]);const u=F(o,l),c=F(i,l),h=null==t?null:F(t,l),d=null==e?null:F(e,l);return[xi(n,u,c,d,h,r),o,i]})}(n,t,e,s,r)}(a,this.gamma.read(),this.beta.read(),l,this.epsilon),y=(b,w,v)=>{z(()=>{const I=1-v,N=b.read(),k=E(ge(N,w),I);b.write(ge(N,k))})};return(()=>{y(this.movingMean,g,this.momentum),y(this.movingVariance,m,this.momentum)})(),f})}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Nt(this.betaInitializer),gammaInitializer:Nt(this.gammaInitializer),movingMeanInitializer:Nt(this.movingMeanInitializer),movingVarianceInitializer:Nt(this.movingVarianceInitializer),betaRegularizer:ct(this.betaRegularizer),gammaRegularizer:ct(this.gammaRegularizer),betaConstraint:zt(this.betaConstraint),gammaConstraint:zt(this.gammaConstraint)},s=super.getConfig();return Object.assign(e,s),e}}return n.className="BatchNormalization",n})()),J((()=>{class n extends He{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const s of this.axis)if(!Number.isInteger(s))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=xt(e.betaInitializer||"zeros"),this.gammaInitializer=xt(e.gammaInitializer||"ones"),this.betaRegularizer=bt(e.betaRegularizer),this.gammaRegularizer=bt(e.gammaRegularizer),this.supportsMasking=!0}build(e){const s=(e=Je(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let o=0;o<this.axis.length;++o)this.axis[o]<0&&(this.axis[o]+=s);for(const o of this.axis)if(o<0||o>=s)throw new Error(`Invalid axis: ${o}`);if(this.axis.length!==rr(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const r=this.axis.map(o=>e[o]);this.gamma=this.scale?this.addWeight("gamma",r,"float32",this.gammaInitializer,this.gammaRegularizer,!0):null,this.beta=this.center?this.addWeight("beta",r,"float32",this.betaInitializer,this.betaRegularizer,!0):null,this.built=!0}call(e,s){const r=Ee(e),a=r.shape,o=a.length;return z(()=>{let{mean:l,variance:u}=hd(r,this.axis,!0);const c=Lr(1,o);for(const m of this.axis)c[m]=a[m];const h=m=>null!=m&&m.shape.length!==o?F(m,c):m;let d=this.scale?h(this.gamma.read()):null,p=this.center?h(this.beta.read()):null;const f=[],g=[];for(let m=0;m<o;++m)-1!==this.axis.indexOf(m)?(f.push(a[m]),g.push(1)):(f.push(1),g.push(a[m]));return l=ts(l,f),u=ts(u,f),null!=d&&(d=ts(d,g)),null!=p&&(p=ts(p,g)),xi(r,l,u,p,d,this.epsilon)})}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Nt(this.betaInitializer),gammaInitializer:Nt(this.gammaInitializer),betaRegularizer:ct(this.betaRegularizer),gammaRegularizer:ct(this.gammaRegularizer)},s=super.getConfig();return Object.assign(e,s),e}}return n.className="LayerNormalization",n})()),J((()=>{class n extends He{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new A(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let s,r;if("number"==typeof e.padding[0])s=[e.padding[0],e.padding[0]],r=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new A(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(s=e.padding[0],2!==e.padding[1].length)throw new A(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);r=e.padding[1]}this.padding=[s,r]}this.inputSpec=[new Mt({ndim:4})]}computeOutputShape(e){let s,r;return e=Je(e),"channelsFirst"===this.dataFormat?(s=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,r=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],s,r]):(s=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,r=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],s,r,e[3]])}call(e,s){return z(()=>function DE(n,t,e){return z(()=>{if(4!==n.rank)throw new A(`temporalPadding expects input tensor to be 4-D, but received a ${n.rank}-D tensor.`);if(null==t&&(t=[[1,1],[1,1]]),2!==t.length||2!==t[0].length||2!==t[1].length)throw new A("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==e&&(e="channelsLast"),"channelsLast"!==e&&"channelsFirst"!==e)throw new A(`Unknown data format: ${e}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let s;return s="channelsFirst"===e?[[0,0],[0,0],t[0],t[1]]:[[0,0],t[0],t[1],[0,0]],dd(n,s)})}(Ee(e),this.padding,this.dataFormat))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},s=super.getConfig();return Object.assign(e,s),e}}return n.className="ZeroPadding2D",n})());class jx extends He{constructor(t){if(null==t.poolSize&&(t.poolSize=2),super(t),"number"==typeof t.poolSize)this.poolSize=[t.poolSize];else{if(!Array.isArray(t.poolSize)||1!==t.poolSize.length||"number"!=typeof t.poolSize[0])throw new A(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.poolSize)}`);this.poolSize=t.poolSize}if(Zt(this.poolSize,"poolSize"),null==t.strides)this.strides=this.poolSize;else if("number"==typeof t.strides)this.strides=[t.strides];else{if(!Array.isArray(t.strides)||1!==t.strides.length||"number"!=typeof t.strides[0])throw new A(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.strides)}`);this.strides=t.strides}Zt(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,Ln(this.padding),this.inputSpec=[new Mt({ndim:3})]}computeOutputShape(t){const e=ls((t=Je(t))[1],this.poolSize[0],this.padding,this.strides[0]);return[t[0],e,t[2]]}call(t,e){return z(()=>{this.invokeCallHook(t,e),t=ui(Ee(t),2);const s=this.poolingFunction(Ee(t),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return ti(s,[2])})}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides},e=super.getConfig();return Object.assign(t,e),t}}J((()=>{class n extends jx{constructor(e){super(e)}poolingFunction(e,s,r,a,o){return Rt(o),Ln(a),Ou(e,s,r,a,o,"max")}}return n.className="MaxPooling1D",n})()),J((()=>{class n extends jx{constructor(e){super(e)}poolingFunction(e,s,r,a,o){return Rt(o),Ln(a),Ou(e,s,r,a,o,"avg")}}return n.className="AveragePooling1D",n})());class qx extends He{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(2!==t.strides.length)throw new A(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides];Zt(this.poolSize,"poolSize"),Zt(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Rt(this.dataFormat),Ln(this.padding),this.inputSpec=[new Mt({ndim:4})]}computeOutputShape(t){t=Je(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],s="channelsFirst"===this.dataFormat?t[3]:t[2];return e=ls(e,this.poolSize[0],this.padding,this.strides[0]),s=ls(s,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,s]:[t[0],e,s,t[3]]}call(t,e){return z(()=>(this.invokeCallHook(t,e),this.poolingFunction(Ee(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}J((()=>{class n extends qx{constructor(e){super(e)}poolingFunction(e,s,r,a,o){return Rt(o),Ln(a),Ou(e,s,r,a,o,"max")}}return n.className="MaxPooling2D",n})()),J((()=>{class n extends qx{constructor(e){super(e)}poolingFunction(e,s,r,a,o){return Rt(o),Ln(a),Ou(e,s,r,a,o,"avg")}}return n.className="AveragePooling2D",n})());class Kx extends He{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(3!==t.strides.length)throw new A(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides,t.strides];Zt(this.poolSize,"poolSize"),Zt(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Rt(this.dataFormat),Ln(this.padding),this.inputSpec=[new Mt({ndim:5})]}computeOutputShape(t){t=Je(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],s="channelsFirst"===this.dataFormat?t[3]:t[2],r="channelsFirst"===this.dataFormat?t[4]:t[3];return e=ls(e,this.poolSize[0],this.padding,this.strides[0]),s=ls(s,this.poolSize[1],this.padding,this.strides[1]),r=ls(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,s,r]:[t[0],e,s,r,t[4]]}call(t,e){return z(()=>(this.invokeCallHook(t,e),this.poolingFunction(Ee(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}J((()=>{class n extends Kx{constructor(e){super(e)}poolingFunction(e,s,r,a,o){return Rt(o),Ln(a),Hx(e,s,r,a,o,"max")}}return n.className="MaxPooling3D",n})()),J((()=>{class n extends Kx{constructor(e){super(e)}poolingFunction(e,s,r,a,o){return Rt(o),Ln(a),Hx(e,s,r,a,o,"avg")}}return n.className="AveragePooling3D",n})());class Xx extends He{constructor(t){super(t),this.inputSpec=[new Mt({ndim:3})]}computeOutputShape(t){return[t[0],t[2]]}call(t,e){throw new Le}}J((()=>{class n extends Xx{constructor(e){super(e||{})}call(e,s){return z(()=>{const r=Ee(e);return At(r,1)})}}return n.className="GlobalAveragePooling1D",n})()),J((()=>{class n extends Xx{constructor(e){super(e||{})}call(e,s){return z(()=>{const r=Ee(e);return ns(r,1)})}}return n.className="GlobalMaxPooling1D",n})());class Yx extends He{constructor(t){super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Rt(this.dataFormat),this.inputSpec=[new Mt({ndim:4})]}computeOutputShape(t){return"channelsLast"===this.dataFormat?[t[0],t[3]]:[t[0],t[1]]}call(t,e){throw new Le}getConfig(){const t={dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}J((()=>{class n extends Yx{call(e,s){return z(()=>{const r=Ee(e);return At(r,"channelsLast"===this.dataFormat?[1,2]:[2,3])})}}return n.className="GlobalAveragePooling2D",n})()),J((()=>{class n extends Yx{call(e,s){return z(()=>{const r=Ee(e);return ns(r,"channelsLast"===this.dataFormat?[1,2]:[2,3])})}}return n.className="GlobalMaxPooling2D",n})());class Zx extends He{constructor(t){super(t),this.layer=t.layer}build(t){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(t){null!=this.layer&&(this.layer.trainable=t)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(t){this.layer.setWeights(t)}getConfig(){const t={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},e=super.getConfig();return Object.assign(t,e),t}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(t)}static fromConfig(t,e,s={}){const a=Cs(e.layer,s);delete e.layer;const o={layer:a};return Object.assign(o,e),new t(o)}}J((()=>{class n extends Zx{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=Je(e)).length<3)throw new A(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const s=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(s),this.layer.built=!0),super.build(e)}computeOutputShape(e){const s=[(e=Je(e))[0]].concat(e.slice(2)),r=this.layer.computeOutputShape(s);return[r[0],e[1]].concat(r.slice(1))}call(e,s){return z(()=>Mx((i,l)=>[Ee(this.layer.call(i,s)),[]],e=Ee(e),[],!1,null,null,!1,!0)[1])}}return n.className="TimeDistributed",n})()),J((()=>{class n extends Zx{constructor(e){super(e);const s=e.layer.getConfig(),r={};r.className=e.layer.getClassName(),r.config=s,this.forwardLayer=Cs(r),s.goBackwards=!0!==s.goBackwards;const a={};if(a.className=e.layer.getClassName(),a.config=s,this.backwardLayer=Cs(a),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,function FE(n){Mr(J$,"BidirectionalMergeMode",n)}(this.mergeMode),e.weights)throw new Le("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const r=Math.floor(e.length/2);this.forwardLayer.setWeights(e.slice(0,r)),this.backwardLayer.setWeights(e.slice(r))}computeOutputShape(e){let r,a,o,s=this.forwardLayer.computeOutputShape(e);return Array.isArray(s)&&Array.isArray(s[0])||(s=[s]),this.returnState&&(o=s.slice(1)),r=s[0],"concat"===this.mergeMode?(r[r.length-1]*=2,a=[r]):a=null==this.mergeMode?[r,r.slice()]:[r],this.returnState?null==this.mergeMode?a.concat(o).concat(o.slice()):[r].concat(o).concat(o.slice()):Nn(a)}apply(e,s){let r=null==s?null:s.initialState,a=null==s?null:s.constants;null==s&&(s={});const o=Vx(e,r,a,this.numConstants);if(e=o.inputs,r=o.initialState,a=o.constants,Array.isArray(e)&&(r=e.slice(1),e=e[0]),(null==r||0===r.length)&&null==a)return super.apply(e,s);const i=[],l=[];if(null!=r){const c=r.length;if(c%2>0)throw new A("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");s.initialState=r,i.push(...r);const h=r.map(d=>new Mt({shape:d.shape}));this.forwardLayer.stateSpec=h.slice(0,c/2),this.backwardLayer.stateSpec=h.slice(c/2),l.push(...h)}if(null!=a)throw new Le("Support for constants in Bidirectional layers is not implemented yet.");const u=i[0]instanceof Ns;for(const c of i)if(c instanceof Ns!==u)throw new A("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(u){const c=[e].concat(i),h=this.inputSpec.concat(l),d=this.inputSpec;this.inputSpec=h;const p=super.apply(c,s);return this.inputSpec=d,p}return super.apply(e,s)}call(e,s){return z(()=>{const r=s.initialState;let a,o,i,l;if(null==r)a=this.forwardLayer.call(e,s),o=this.backwardLayer.call(e,s);else{const u=r.slice(0,r.length/2),c=r.slice(r.length/2);a=this.forwardLayer.call(e,Object.assign(s,{initialState:u})),o=this.backwardLayer.call(e,Object.assign(s,{initialState:c}))}return this.returnState&&(Array.isArray(a)&&(i=a.slice(1).concat(o.slice(1))),a=a[0],o=o[0]),this.returnSequences&&(o=Fr(o,1)),"concat"===this.mergeMode?l=cp([a,o]):"sum"===this.mergeMode?l=ne(a,o):"ave"===this.mergeMode?l=E(.5,ne(a,o)):"mul"===this.mergeMode?l=E(a,o):null==this.mergeMode&&(l=[a,o]),this.returnState?null==this.mergeMode?l.concat(i):[l].concat(i):l})}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){zr(this.forwardLayer.name,()=>{this.forwardLayer.build(e)}),zr(this.backwardLayer.name,()=>{this.backwardLayer.build(e)}),this.built=!0}computeMask(e,s){let r;if(Array.isArray(s)&&(s=s[0]),r=this.returnSequences?null==this.mergeMode?[s,s]:s:null==this.mergeMode?[null,null]:null,this.returnState){const o=this.forwardLayer.states.map(i=>null);return Array.isArray(r)?r.concat(o).concat(o):[r].concat(o).concat(o)}return r}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},s=super.getConfig();return Object.assign(e,s),e}static fromConfig(e,s){const r=Cs(s.layer);if(delete s.layer,null!=s.numConstants)throw new Le("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const a=s;return a.layer=r,new e(a)}}return n.className="Bidirectional",n})()),J((()=>{class n extends He{constructor(e){super(e),this.scale=e.scale,this.offset=e.offset?e.offset:0}getConfig(){const e={scale:this.scale,offset:this.offset},s=super.getConfig();return Object.assign(e,s),e}call(e,s){return z(()=>("float32"!==(e=Ee(e)).dtype&&(e=vs(e,"float32")),ne(E(e,this.scale),this.offset)))}}return n.className="Rescaling",n})());const{resizeBilinear:PE,cropAndResize:LE}=ys;J((()=>{class n extends He{constructor(e){super(e),this.height=e.height,this.width=e.width}centerCrop(e,s,r,a,o,i,l,u){return z(()=>{let c,h=!1;const m=[s/i,r/l,(a+s)/i,(o+r)/l],y=[];3===e.rank?(h=!0,c=Ls([e])):c=e;for(let I=0;I<c.shape[0];I++)y.push(m);const x=Ys(y,[y.length,4]),b=Qo(0,y.length,1,"int32"),v=LE(c,x,b,[a,o],"nearest");return vs(h?Ee(Or(v)):v,u)})}upsize(e,s,r,a){return z(()=>vs(PE(e,[s,r]),a))}call(e,s){return z(()=>{const r=Ee(e),a=r.dtype,o=r.shape,i=o[o.length-3],l=o[o.length-2];let u=0;i!==this.height&&(u=Math.floor((i-this.height)/2));let c=0;return l!==this.width&&(c=Math.floor((l-this.width)/2),0===c&&(c=1)),u>=0&&c>=0?this.centerCrop(r,u,c,this.height,this.width,i,l,a):this.upsize(e,this.height,this.width,a)})}getConfig(){const e={height:this.height,width:this.width},s=super.getConfig();return Object.assign(e,s),e}computeOutputShape(e){const r=(e=Je(e)).length-2;return e[e.length-3]=this.height,e[r]=this.width,e}}return n.className="CenterCrop",n})()),J((()=>{class n extends He{constructor(e){super(e),this.numTokens=e.numTokens,this.outputMode=e.outputMode?e.outputMode:"multiHot"}getConfig(){const e={numTokens:this.numTokens,outputMode:this.outputMode},s=super.getConfig();return Object.assign(e,s),e}computeOutputShape(e){return null==(e=Je(e))?[this.numTokens]:"oneHot"===this.outputMode&&1!==e[e.length-1]?(e.push(this.numTokens),e):(e[e.length-1]=this.numTokens,e)}call(e,s){return z(()=>{let r;if("int32"!==(e=Ee(e)).dtype&&(e=vs(e,"int32")),typeof s.countWeights<"u"){if("count"!==this.outputMode)throw new A(`countWeights is not used when outputMode !== count.\n              Received countWeights=${s.countWeights}`);r=Ee(s.countWeights)}const a=ns(e),o=Jl(e),i=Fn(this.numTokens,a).bufferSync().get(0),l=Dr(o,0).bufferSync().get(0);if(!i||!l)throw new A(`Input values must be between 0 < values <= numTokens with numTokens=${this.numTokens}`);return function VE(n,t,e,s){let r=Ee(n);if("int32"!==r.dtype&&(r=vs(r,"int32")),"int"===t)return r;const a=r.shape;if(0===r.rank&&(r=Sn(r,-1)),"oneHot"===t&&1!==r.shape[r.shape.length-1]&&(r=Sn(r,-1)),r.rank>2)throw new A(`When outputMode is not int, maximum output rank is 2 Received outputMode ${t} and input shape ${a} which would result in output rank ${r.rank}.`);const o=["multiHot","oneHot"].includes(t);let l;if(l=xg(r,typeof s<"u"&&"count"===t?s:[],e,o),"tfIdf"!==t)return l;if(s)return E(l,s);throw new A("When outputMode is 'tfIdf', weights must be provided.")}(e,this.outputMode,this.numTokens,r)})}}return n.className="CategoryEncoding",n})());const Jx=new Set(["bilinear","nearest"]);J((()=>{class n extends He{constructor(e){if(super(e),this.height=e.height,this.width=e.width,e.interpolation){if(!Jx.has(e.interpolation))throw new A(`Invalid interpolation parameter: ${e.interpolation} is not implemented`);this.interpolation=e.interpolation}else this.interpolation="bilinear";this.cropToAspectRatio=!!e.cropToAspectRatio}computeOutputShape(e){return e=Je(e),[this.height,this.width,e[2]]}getConfig(){const e={height:this.height,width:this.width,interpolation:this.interpolation,cropToAspectRatio:this.cropToAspectRatio},s=super.getConfig();return Object.assign(e,s),e}call(e,s){return z(()=>{const r=[this.height,this.width];if("bilinear"===this.interpolation)return ys.resizeBilinear(e,r,!this.cropToAspectRatio);if("nearest"===this.interpolation)return ys.resizeNearestNeighbor(e,r,!this.cropToAspectRatio);throw new Error(`Interpolation is ${this.interpolation} but only ${[...Jx]} are supported`)})}}return n.className="Resizing",n})());let zE=(()=>{class n{constructor(e){this.seed=e}next(){if(void 0!==this.seed)return this.seed++}}return n.className="RandomSeed",n})(),BE=(()=>{class n extends He{constructor(e){super(e),this.randomGenerator=new zE(e.seed)}getConfig(){const e={seed:this.randomGenerator.seed},s=super.getConfig();return Object.assign(e,s),e}}return n.className="BaseRandomLayer",n})();const Qx=new Set(["bilinear","nearest"]);var rb;function xe(n,t){Array.isArray(n)||(n=[n]),n.forEach(e=>{null!=e&&S("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the CPU backend.`)})}J((()=>{class n extends BE{constructor(e){super(e);const{factor:s,interpolation:r="bilinear"}=e;if(this.factor=s,Array.isArray(this.factor)&&2===this.factor.length)this.widthLower=this.factor[0],this.widthUpper=this.factor[1];else{if(Array.isArray(this.factor)||!(this.factor>0))throw new A(`Invalid factor: ${this.factor}. Must be positive number or tuple of 2 numbers`);this.widthLower=-this.factor,this.widthUpper=this.factor}if(this.widthLower<-1||this.widthUpper<-1)throw new A(`factor must have values larger than -1. Got: ${this.factor}`);if(this.widthUpper<this.widthLower)throw new A(`factor cannot have upper bound less than lower bound.\n        Got upper bound: ${this.widthUpper}.\n        Got lower bound: ${this.widthLower}\n      `);if(r){if(!Qx.has(r))throw new A(`Invalid interpolation parameter: ${r} is not implemented`);this.interpolation=r}}getConfig(){const e={factor:this.factor,interpolation:this.interpolation},s=super.getConfig();return Object.assign(e,s),e}computeOutputShape(e){return e=Je(e),[this.imgHeight,-1,e[2]]}call(e,s){return z(()=>{const r=Ee(e);this.imgHeight=r.shape[r.shape.length-3];const a=r.shape[r.shape.length-2];this.widthFactor=Jo([1],1+this.widthLower,1+this.widthUpper,"float32",this.randomGenerator.next());let o=this.widthFactor.dataSync()[0]*a;o=Math.round(o);const i=[this.imgHeight,o];switch(this.interpolation){case"bilinear":return ys.resizeBilinear(e,i);case"nearest":return ys.resizeNearestNeighbor(e,i);default:throw new Error(`Interpolation is ${this.interpolation}\n          but only ${[...Qx]} are supported`)}})}}return n.className="RandomWidth",n})()),M().registerFlag("KEEP_INTERMEDIATE_TENSORS",()=>!1,n=>{n&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")}),function(n){let t;var e;(e=t=n.CheckpointFormatVersion||(n.CheckpointFormatVersion={}))[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(rb||(rb={})),Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");const AA=gy;let RA=(()=>{class n extends Bn{nextDataId(){return n.nextDataId++}constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new Ot(this,ps())}write(e,s,r){this.firstUse&&(this.firstUse=!1,M().get("IS_NODE")&&An("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));const a={id:this.nextDataId()};return this.data.set(a,{values:e,dtype:r,refCount:1}),a}makeTensorInfo(e,s,r){let a;if("string"===s&&null!=r&&r.length>0&&Wa(r[0])){const o=r.map(i=>Ks(i));a=this.write(o,e,s)}else a=this.write(r,e,s);return{dataId:a,shape:e,dtype:s}}refCount(e){return this.data.has(e)?this.data.get(e).refCount:0}incRef(e){this.data.get(e).refCount++}decRef(e){this.data.has(e)&&this.data.get(e).refCount--}move(e,s,r,a,o){this.data.set(e,{values:s,dtype:a,refCount:o})}numDataIds(){return this.data.numDataIds()}read(e){var s=this;return O(function*(){return s.readSync(e)})()}readSync(e){const{dtype:s,complexTensorInfos:r}=this.data.get(e);return"complex64"===s?Ms(this.readSync(r.real.dataId),this.readSync(r.imag.dataId)):function b1(n,t){if(Array.isArray(n))return n;if("float32"===t)return n instanceof Float32Array?n:new Float32Array(n);if("int32"===t)return n instanceof Int32Array?n:new Int32Array(n);if("bool"===t||"string"===t)return Uint8Array.from(new Int32Array(n));throw new Error(`Unknown dtype ${t}`)}(this.data.get(e).values,s)}bufferSync(e){const s=this.readSync(e.dataId);if("string"===e.dtype)try{const r=s.map(a=>Xs(a));return Ge(e.shape,e.dtype,r)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return Ge(e.shape,e.dtype,s)}makeOutput(e,s,r){return ps().makeTensorFromTensorInfo(this.makeTensorInfo(s,r,e),this)}disposeData(e,s=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!s&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:r}=this.data.get(e);null!=r&&(this.disposeData(r.real.dataId,!0),this.disposeData(r.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}time(e){return O(function*(){const s=wn();return e(),{kernelMs:wn()-s}})()}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){xe([e],"where");const s=this.readSync(e.dataId);return AA(e.shape,s)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}return n.nextDataId=0,n})();function Ts(n){return(t,e,s)=>{const r=_t(e,t.length);for(let a=0;a<t.length;++a)r[a]=n(t[a],s);return r}}function rt(n,t,e){return dr(n,Ts(t),e)}function dr(n,t,e){return({inputs:s,attrs:r,backend:a})=>{const{x:o}=s;xe(o,n);const i=a,l=i.data.get(o.dataId).values;let u;if("string"===o.dtype){if(!Array.isArray(l))throw new Error("String tensor's value was not an instance of Array");u=zs(l)}else u=l;const c=e||o.dtype,h=t(u,c,r);return i.makeTensorInfo(o.shape,c,h)}}km("cpu",()=>new RA,1);const Pb=rt(no,n=>n>=0?n:Math.exp(n)-1),FA={kernelName:no,backendName:"cpu",kernelFunc:Pb};function _s(n){const{inputs:t,backend:e}=n,{x:s}=t;return e.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const OA={kernelName:co,backendName:"cpu",kernelFunc:_s};function Lb(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{alpha:a}=s;xe([r],"leakyRelu");const o=L(r.shape),i=e.data.get(r.dataId).values,l=on("float32",o);for(let u=0;u<i.length;u++)l[u]=i[u]<0?a*i[u]:i[u];return e.makeTensorInfo(r.shape,"float32",l)}const PA={kernelName:Qi,backendName:"cpu",kernelFunc:Lb};function Dt(n){return(t,e,s,r,a)=>{const o=Pe(t,e),i=o.length,l=Ne(o),c=on(a,L(o)),h=t.length,d=e.length,p=Ne(t),f=Ne(e),g=pa(t,o),m=pa(e,o);if(g.length+m.length===0)for(let y=0;y<c.length;++y)c[y]=n(s[y%s.length],r[y%r.length]);else for(let y=0;y<c.length;++y){const x=na(y,i,l),b=x.slice(-h);g.forEach(N=>b[N]=0);const w=hs(b,h,p),v=x.slice(-d);m.forEach(N=>v[N]=0);const I=hs(v,d,f);c[y]=n(s[w],r[I])}return[c,o]}}const LA=Dt((n,t)=>n<0?t*n:n);function Vb(n){const{inputs:t,backend:e}=n,{x:s,alpha:r}=t;xe([s,r],"prelu");const a=e.data.get(s.dataId).values,o=e.data.get(r.dataId).values,[i,l]=LA(s.shape,r.shape,a,o,"float32");return e.makeTensorInfo(l,"float32",i)}const VA={kernelName:xl,backendName:"cpu",kernelFunc:Vb},Mb=rt(Io,n=>Math.max(0,n)),MA={kernelName:Io,backendName:"cpu",kernelFunc:Mb},zb=rt(No,n=>Math.min(Math.max(0,n),6)),zA={kernelName:No,backendName:"cpu",kernelFunc:zb},BA=Ts(n=>1/(1+Math.exp(-n))),Bb=rt(Ao,n=>1/(1+Math.exp(-n))),WA={kernelName:Ao,backendName:"cpu",kernelFunc:Bb};function Wu(n,t,e,s,r){if("linear"===e)return _s({inputs:{x:t},backend:n});if("relu"===e)return Mb({inputs:{x:t},backend:n});if("elu"===e)return Pb({inputs:{x:t},backend:n});if("relu6"===e)return zb({inputs:{x:t},backend:n});if("prelu"===e)return Vb({inputs:{x:t,alpha:s},backend:n});if("leakyrelu"===e)return Lb({inputs:{x:t},backend:n,attrs:{alpha:r}});if("sigmoid"===e)return Bb({inputs:{x:t},backend:n});throw new Error(`Activation ${e} has not been implemented for the CPU backend.`)}function $n(n){const{inputs:t,backend:e}=n,{real:s,imag:r}=t,a=e.data.get(s.dataId).values,o=e.data.get(r.dataId).values,i=e.makeTensorInfo(s.shape,"complex64");return e.data.get(i.dataId).complexTensorInfos={real:e.makeTensorInfo(s.shape,"float32",a),imag:e.makeTensorInfo(r.shape,"float32",o)},i}const UA={kernelName:Ac,backendName:"cpu",kernelFunc:$n};function Uu(n,t,e="float32"){if("complex64"===e)return $n({inputs:{real:Uu(n,t,"float32"),imag:Uu(n,t,"float32")},backend:n});const s=ln(L(t),e);return n.makeTensorInfo(t,e,s)}function Gr(n){const{inputs:t,backend:e}=n,{input:s}=t,r=e.data.get(s.dataId).complexTensorInfos.real,a=e.data.get(r.dataId).values;return e.makeTensorInfo(r.shape,r.dtype,a)}const GA={kernelName:sh,backendName:"cpu",kernelFunc:Gr};function Wb(n,t,e,s){if("int32"===s)return[t,"int32",Int32Array.from(n)];if("bool"===s){const r=Nr([0],e),[a,o]=Dt((i,l)=>i!==l?1:0)(t,[],n,r,"bool");return[o,"bool",a]}throw new Error(`Error in Cast: failed to cast ${e} to ${s}`)}function pr(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{dtype:a}=s;if("complex64"===a){if("complex64"===r.dtype)return _s({inputs:{x:r},backend:e});const c=Uu(e,r.shape,r.dtype),h=pr({inputs:{x:r},backend:e,attrs:{dtype:"float32"}}),d=$n({inputs:{real:h,imag:c},backend:e});return e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(h),d}if("complex64"===r.dtype){const c=Gr({inputs:{input:r},backend:e}),h=pr({inputs:{x:c},backend:e,attrs:{dtype:a}});return e.disposeIntermediateTensorInfo(c),h}if(!Pf(r.dtype,a)){const c=_s({inputs:{x:r},backend:e});return{dataId:c.dataId,shape:c.shape,dtype:a}}const o=e.data.get(r.dataId).values,[i,l,u]=Wb(o,r.shape,r.dtype,a);return e.makeTensorInfo(i,l,u)}const HA={kernelName:Ya,backendName:"cpu",kernelFunc:pr};function Wt(n,t,e,s){return null==e?({inputs:r,backend:a})=>{const{a:o,b:i}=r,l=a;xe([o,i],n);const u=l.data.get(o.dataId).values,c=l.data.get(i.dataId).values,h="string"===o.dtype?zs(u):u,d="string"===o.dtype?zs(c):c,p=s||o.dtype,[f,g]=t(o.shape,i.shape,h,d,p);return l.makeTensorInfo(g,p,f)}:({inputs:r,backend:a})=>{const{a:o,b:i}=r,l=a;if("complex64"===o.dtype||"complex64"===i.dtype){const u=pr({inputs:{x:o},backend:l,attrs:{dtype:"complex64"}}),c=l.data.get(u.dataId),d=c.complexTensorInfos.imag,p=l.data.get(c.complexTensorInfos.real.dataId).values,f=l.data.get(d.dataId).values,g=pr({inputs:{x:i},backend:l,attrs:{dtype:"complex64"}}),m=l.data.get(g.dataId),x=m.complexTensorInfos.imag,b=l.data.get(m.complexTensorInfos.real.dataId).values,w=l.data.get(x.dataId).values,[v,I,N]=e(o.shape,i.shape,p,f,b,w),k=l.makeTensorInfo(N,"float32",v),_=l.makeTensorInfo(N,"float32",I),$=$n({inputs:{real:k,imag:_},backend:l});return l.disposeIntermediateTensorInfo(u),l.disposeIntermediateTensorInfo(g),l.disposeIntermediateTensorInfo(k),l.disposeIntermediateTensorInfo(_),$}{const u=l.data.get(o.dataId).values,c=l.data.get(i.dataId).values,h=s||o.dtype,[d,p]=t(o.shape,i.shape,u,c,h);return l.makeTensorInfo(p,h,d)}}}function sf(n){return(t,e,s,r,a,o)=>{const i=Pe(t,e),l=L(i),u=i.length,c=Ne(i),h=on("float32",l),d=on("float32",l),p=pa(t,i),f=pa(e,i),g=Ms(s,r),m=Ms(a,o),y=t.length,x=Ne(t),b=e.length,w=Ne(e);if(p.length+f.length===0)for(let v=0;v<h.length;v++){const I=v%g.length,N=v%m.length,k=n(g[2*I],g[2*I+1],m[2*N],m[2*N+1]);h[v]=k.real,d[v]=k.imag}else for(let v=0;v<h.length;v++){const I=na(v,u,c),N=I.slice(-y);p.forEach(B=>N[B]=0);const k=hs(N,y,x),_=I.slice(-b);f.forEach(B=>_[B]=0);const $=hs(_,b,w),P=n(g[2*k],g[2*k+1],m[2*$],m[2*$+1]);h[v]=P.real,d[v]=P.imag}return[h,d,i]}}const Ub=Dt((n,t)=>n+t),jA=sf((n,t,e,s)=>({real:n+e,imag:t+s})),Ta=Wt(sa,Ub,jA),qA={kernelName:sa,backendName:"cpu",kernelFunc:Ta};function pt(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{shape:a}=s,o=L(r.shape),i=Of(a,o),l=L(i);S(o===l,()=>`The new shape (${i}) has ${l} elements and the old shape (${r.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`),e.incRef(r.dataId);const u=e.data.get(r.dataId);if(null!=u.complexTensorInfos){const h=u.complexTensorInfos.imag;u.complexTensorInfos.real.shape=i,h.shape=i}return{dataId:r.dataId,shape:i,dtype:r.dtype}}const KA={kernelName:wl,backendName:"cpu",kernelFunc:pt};function Gb(n){const{inputs:t,backend:e,attrs:s}=n,{a:r,b:a}=t,{transposeA:o,transposeB:i}=s;xe([r,a],"matMul");const l=r.shape.length,u=a.shape.length,c=o?r.shape[l-2]:r.shape[l-1],h=i?a.shape[u-1]:a.shape[u-2],d=o?r.shape[l-1]:r.shape[l-2],p=i?a.shape[u-2]:a.shape[u-1],f=r.shape.slice(0,-2),g=a.shape.slice(0,-2),m=L(f),y=L(g),b=Pe(r.shape.slice(0,-2),a.shape.slice(0,-2)).concat([d,p]);S(c===h,()=>`Error in matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${r.shape} and ${a.shape} and transposeA=${o} and transposeB=${i} must match.`);const v=i?[y,p,h]:[y,h,p],I=pt({inputs:{x:r},backend:e,attrs:{shape:o?[m,c,d]:[m,d,c]}}),N=pt({inputs:{x:a},backend:e,attrs:{shape:v}}),k=o?I.shape[1]:I.shape[2],_=o?I.shape[2]:I.shape[1],$=i?N.shape[1]:N.shape[2],P=Math.max(m,y),B=e.data.get(I.dataId).values,W=e.data.get(N.dataId).values,U=Ne(I.shape),G=Ne(N.shape),[q,K,H]=o?[U[0],1,U[1]]:[U[0],U[1],1],[X,ee,se]=i?[1,G[1],G[0]]:[G[1],1,G[0]],ie=_*$,oe=Ge([P,_,$],I.dtype),de=oe.values,le=e.blockSize;for(let me=0;me<P;me++){const Ce=me%m,$e=me%y;for(let Te=0;Te<_;Te+=le){const Ve=Math.min(Te+le,_);for(let We=0;We<$;We+=le){const at=Math.min(We+le,$);for(let ft=0;ft<k;ft+=le){const Tt=Math.min(ft+le,k);for(let mt=Te;mt<Ve;mt++)for(let lt=We;lt<at;lt++){let Ct=0;for(let wt=ft;wt<Tt;wt++)Ct+=B[Ce*q+mt*K+wt*H]*W[wt*X+lt*ee+$e*se];de[me*ie+(mt*$+lt)]+=Ct}}}}}return e.disposeIntermediateTensorInfo(I),e.disposeIntermediateTensorInfo(N),e.makeTensorInfo(b,oe.dtype,oe.values)}const XA={kernelName:Vi,backendName:"cpu",kernelFunc:Gb},ZA={kernelName:Fl,backendName:"cpu",kernelFunc:function YA(n){const{inputs:t,backend:e,attrs:s}=n,{a:r,b:a,bias:o,preluActivationWeights:i}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;let d,p,f;const g=[];d=Gb({inputs:{a:r,b:a},attrs:{transposeA:l,transposeB:u},backend:e}),o&&(p=Ta({inputs:{a:d,b:o},backend:e}),g.push(d),d=p),c&&(f=Wu(e,d,c,i,h),g.push(d),d=f);for(const y of g)e.disposeIntermediateTensorInfo(y);return d}};function Hb(n){const t=new Float32Array(n.length);for(let e=0;e<n.length;++e)t[e]=Math.abs(n[e]);return t}const JA={kernelName:Di,backendName:"cpu",kernelFunc:n=>{const{x:t}=n.inputs,e=n.backend;xe(t,"abs");let s=new Float32Array(L(t.shape));return s=Hb(e.data.get(t.dataId).values),e.makeOutput(s,t.shape,t.dtype)}},QA=rt(Ua,n=>Math.acos(n)),eR={kernelName:Ua,backendName:"cpu",kernelFunc:QA},tR=rt(Ga,n=>Math.acosh(n)),nR={kernelName:Ga,backendName:"cpu",kernelFunc:tR},rR={kernelName:Nc,backendName:"cpu",kernelFunc:function sR(n){const{inputs:t,backend:e}=n,s=t;xe(t,"addN");const r=s.map(i=>e.data.get(i.dataId).values),a=Ge(s[0].shape,s[0].dtype),o=a.values;for(let i=0;i<s.length;i++){const l=r[i];for(let u=0;u<o.length;u++)o[u]+=l[u]}return e.makeTensorInfo(a.shape,a.dtype,a.values)}};function rf(n,t,e,s,r){const a=t.length,o=L(t),i=Ne(t),l=Ne(r),u=on(e,L(r));for(let c=0;c<o;++c){const h=na(c,a,i),d=new Array(h.length);for(let f=0;f<d.length;f++)d[f]=h[s[f]];u[hs(d,a,l)]=n[c]}return u}function kn(n){const{inputs:t,attrs:e,backend:s}=n,{x:r}=t,{perm:a}=e;xe(r,"transpose");const i=new Array(r.shape.length);for(let h=0;h<i.length;h++)i[h]=r.shape[a[h]];const u=rf(s.data.get(r.dataId).values,r.shape,r.dtype,a,i);return{dataId:s.write(u,i,r.dtype),shape:i,dtype:r.dtype}}const aR={kernelName:ra,backendName:"cpu",kernelFunc:kn},iR={kernelName:"All",backendName:"cpu",kernelFunc:function oR(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a,keepDims:o}=s;xe(r,"all");const i=Ue(a,r.shape);let l=i;const u=It(l,r.shape.length);let c=r;null!=u&&(c=kn({inputs:{x:r},backend:e,attrs:{perm:u}}),l=Et(l.length,r.shape.length)),tn("all",l,c.shape.length);const[h,d]=Xt(c.shape,l),p=L(d),f=ln(L(h),c.dtype),g=e.data.get(c.dataId).values;for(let y=0;y<f.length;++y){const x=y*p;let b=g[x];for(let w=0;w<p;++w)b=b&&g[x+w];f[y]=b}null!=u&&e.disposeIntermediateTensorInfo(c);const m=e.makeTensorInfo(h,c.dtype,f);if(o){const x=pt({inputs:{x:m},backend:e,attrs:{shape:$t(h,i)}});return e.disposeIntermediateTensorInfo(m),x}return m}},uR={kernelName:"Any",backendName:"cpu",kernelFunc:function lR(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a,keepDims:o}=s;xe(r,"any");const i=Ue(a,r.shape);let l=i;const u=It(l,r.shape.length);let c=r;null!=u&&(c=kn({inputs:{x:r},backend:e,attrs:{perm:u}}),l=Et(l.length,r.shape.length)),tn("any",l,c.shape.length);const[h,d]=Xt(c.shape,l),p=L(d),f=ln(L(h),c.dtype),g=e.data.get(c.dataId).values;for(let y=0;y<f.length;++y){const x=y*p;let b=g[x];for(let w=0;w<p;++w)b=b||g[x+w];f[y]=b}null!=u&&e.disposeIntermediateTensorInfo(c);const m=e.makeTensorInfo(h,c.dtype,f);if(o){const x=pt({inputs:{x:m},backend:e,attrs:{shape:$t(h,i)}});return e.disposeIntermediateTensorInfo(m),x}return m}},hR={kernelName:Fi,backendName:"cpu",kernelFunc:function cR(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a}=s;xe(r,"argMax");let o=Ue(a,r.shape);const i=It(o,r.shape.length);let l=r;const u=[];null!=i&&(l=kn({inputs:{x:r},backend:e,attrs:{perm:i}}),u.push(l),o=Et(o.length,l.shape.length)),o=[o[0]],tn("argMax",o,l.shape.length);const[c,h]=Xt(l.shape,o),p=ln(L(c),"int32"),f=L(h),g=e.data.get(l.dataId).values;for(let m=0;m<p.length;++m){const y=m*f;let x=g[y],b=0;for(let w=0;w<f;++w){const v=g[y+w];v>x&&(x=v,b=w)}p[m]=b}return u.forEach(m=>e.disposeIntermediateTensorInfo(m)),e.makeTensorInfo(c,"int32",p)}},pR={kernelName:Oi,backendName:"cpu",kernelFunc:function dR(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a}=s;xe(r,"argMin");let o=Ue(a,r.shape);const i=It(o,r.shape.length);let l=r;const u=[];null!=i&&(l=kn({inputs:{x:r},backend:e,attrs:{perm:i}}),u.push(l),o=Et(o.length,l.shape.length)),o=[o[0]],tn("argMin",o,l.shape.length);const[c,h]=Xt(l.shape,o),p=ln(L(c),"int32"),f=L(h),g=e.data.get(l.dataId).values;for(let m=0;m<p.length;++m){const y=m*f;let x=g[y],b=0;for(let w=0;w<f;++w){const v=g[y+w];v<x&&(x=v,b=w)}p[m]=b}return u.forEach(m=>e.disposeIntermediateTensorInfo(m)),e.makeTensorInfo(c,"int32",p)}},fR=rt(Ha,n=>Math.asin(n)),mR={kernelName:Ha,backendName:"cpu",kernelFunc:fR},gR=rt(ja,n=>Math.asinh(n)),yR={kernelName:ja,backendName:"cpu",kernelFunc:gR},xR=rt(qa,n=>Math.atan(n)),bR={kernelName:qa,backendName:"cpu",kernelFunc:xR},wR=Dt((n,t)=>Math.atan2(n,t)),vR=Wt(Xa,wR),SR={kernelName:Xa,backendName:"cpu",kernelFunc:vR},IR=rt(Ka,n=>Math.atanh(n)),NR={kernelName:Ka,backendName:"cpu",kernelFunc:IR};function af(n,t,e,s,r,a){const o=r.strideHeight,i=r.strideWidth,l=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,h=r.effectiveFilterWidth,d=r.padInfo.top,p=r.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=Ge(r.outShape,e),m=g.values,y=r.outShape[1]*r.outShape[2]*r.outShape[3],x=r.outShape[2]*r.outShape[3],b=r.outShape[3];for(let w=0;w<r.batchSize;++w){const v=w*y,I=w*s[0];for(let N=0;N<r.inChannels;++N)for(let k=0;k<r.outHeight;++k){const _=k*o-d,$=Math.max(0,_),P=Math.min(r.inHeight,c+_),B=v+k*x;for(let W=0;W<r.outWidth;++W){const U=W*i-p,G=Math.max(0,U),q=Math.min(r.inWidth,h+U);let K=f,H=0,X=0;for(let se=$;se<P;se+=l){const ie=I+se*s[1];for(let oe=G;oe<q;oe+=u){const le=n[ie+oe*s[2]+N];"max"===a&&le>K?K=le:"avg"===a&&(H+=le,X++)}if(isNaN(K))break}m[B+W*b+N]="avg"===a?H/X:K}}}return g}function jb(n,t,e,s,r=!1,a=!1){const o=Ge(s.outShape,"int32"),i=s.strideHeight,l=s.strideWidth,u=s.dilationHeight,c=s.dilationWidth,h=s.effectiveFilterHeight,d=s.effectiveFilterWidth,p=s.padInfo.top,f=s.padInfo.left,g=Ge(t,e,n);for(let m=0;m<s.batchSize;++m)for(let y=0;y<s.inChannels;++y)for(let x=0;x<s.outHeight;++x){const b=x*i-p;let w=b;for(;w<0;)w+=u;const v=Math.min(s.inHeight,h+b);for(let I=0;I<s.outWidth;++I){const N=I*l-f;let k=N;for(;k<0;)k+=c;const _=Math.min(s.inWidth,d+N);let $=Number.NEGATIVE_INFINITY,P=-1;for(let B=w;B<v;B+=u){const W=B-b;for(let U=k;U<_;U+=c){const G=U-N,q=g.get(m,B,U,y);q>$&&($=q,P=r?a?((m*s.inHeight+B)*s.inWidth+U)*s.inChannels+y:(B*s.inWidth+U)*s.inChannels+y:W*d+G)}}o.set(P,m,x,I,y)}}return o}function qb(n,t,e,s,r,a){const o=r.strideDepth,i=r.strideHeight,l=r.strideWidth,u=r.dilationDepth,c=r.dilationHeight,h=r.dilationWidth,d=r.effectiveFilterDepth,p=r.effectiveFilterHeight,f=r.effectiveFilterWidth,g=r.padInfo.front,m=r.padInfo.top,y=r.padInfo.left,x="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,b=Ge(r.outShape,e),w=b.values,v=r.outShape[1]*r.outShape[2]*r.outShape[3]*r.outShape[4],I=r.outShape[2]*r.outShape[3]*r.outShape[4],N=r.outShape[3]*r.outShape[4],k=r.outShape[4];for(let _=0;_<r.batchSize;++_){const $=_*v,P=_*s[0];for(let B=0;B<r.inChannels;++B)for(let W=0;W<r.outDepth;++W){const U=W*o-g;let G=U;for(;G<0;)G+=u;const q=Math.min(r.inDepth,d+U),K=$+W*I;for(let H=0;H<r.outHeight;++H){const X=H*i-m;let ee=X;for(;ee<0;)ee+=c;const se=Math.min(r.inHeight,p+X),ie=K+H*N;for(let oe=0;oe<r.outWidth;++oe){const de=oe*l-y;let le=de;for(;le<0;)le+=h;const me=Math.min(r.inWidth,f+de),Ce=ie+oe*k;let $e=x,Te=0,Ve=0;for(let at=G;at<q;at+=u){const ft=P+at*s[1];for(let Tt=ee;Tt<se;Tt+=c){const mt=ft+Tt*s[2];for(let lt=le;lt<me;lt+=h){const wt=n[mt+lt*s[3]+B];if("max"===a&&wt>$e?$e=wt:"avg"===a&&(Te+=wt,Ve++),isNaN($e))break}if(isNaN($e))break}if(isNaN($e))break}w[Ce+B]="avg"===a?Te/Math.max(Ve,1):$e}}}}return b}const TR={kernelName:Pi,backendName:"cpu",kernelFunc:function kR(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;xe(r,"avgPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:l}=s;S(en(o,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`);const c=Gn(r.shape,a,o,1,i,l);let h;if(1===c.filterWidth&&1===c.filterHeight&&ke(c.inShape,c.outShape))h=_s({inputs:{x:r},backend:e});else{const d=e.data.get(r.dataId).values,p=Ne(r.shape),f=af(d,0,r.dtype,p,c,"avg");h=e.makeTensorInfo(c.outShape,r.dtype,f.values)}return h}},$R={kernelName:Li,backendName:"cpu",kernelFunc:function _R(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:l,dataFormat:u}=s;xe(r,"avgPool3d");const c=Rs(r.shape,a,o,1,i,l,u),d=qb(e.data.get(r.dataId).values,0,r.dtype,Ne(r.shape),c,"avg");return e.makeTensorInfo(d.shape,"float32",d.values)}},AR={kernelName:_c,backendName:"cpu",kernelFunc:function ER(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:a}=t,{filterSize:o,strides:i,pad:l,dimRoundingMode:u}=s;xe([r,a],"avgPool3DGrad");const c=Rs(a.shape,o,i,1,l,u),h=c.strideDepth,d=c.strideHeight,p=c.strideWidth,f=c.filterDepth,g=c.filterHeight,m=c.filterWidth,y=c.dilationDepth,x=c.dilationHeight,b=c.dilationWidth,w=c.effectiveFilterDepth,v=c.effectiveFilterHeight,I=c.effectiveFilterWidth,N=w-1-c.padInfo.front,k=I-1-c.padInfo.left,_=v-1-c.padInfo.top,$=Ge(a.shape,"float32"),P=1/(f*g*m),B=e.bufferSync(r);for(let W=0;W<c.batchSize;++W)for(let U=0;U<c.inChannels;++U)for(let G=0;G<c.inDepth;++G)for(let q=0;q<c.inHeight;++q)for(let K=0;K<c.inWidth;++K){const H=G-N,X=q-_,ee=K-k;let se=0;for(let ie=0;ie<w;ie+=y){const oe=(H+ie)/h;if(!(oe<0||oe>=c.outDepth||Math.floor(oe)!==oe))for(let de=0;de<v;de+=x){const le=(X+de)/d;if(!(le<0||le>=c.outHeight||Math.floor(le)!==le))for(let me=0;me<I;me+=b){const Ce=(ee+me)/p;Ce<0||Ce>=c.outWidth||Math.floor(Ce)!==Ce||(se+=B.get(W,oe,le,Ce,U))}}}$.set(se*P,W,G,q,K,U)}return e.makeTensorInfo($.shape,$.dtype,$.values)}},DR={kernelName:Tc,backendName:"cpu",kernelFunc:function RR(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:a}=t,o=a;xe([r,a],"avgPoolGrad");const{filterSize:i,strides:l,pad:u}=s,c=Gn(o.shape,i,l,1,u),h=c.strideHeight,d=c.strideWidth,p=c.filterHeight,f=c.filterWidth,g=c.dilationHeight,m=c.dilationWidth,y=c.effectiveFilterHeight,x=c.effectiveFilterWidth,b=x-1-c.padInfo.left,w=y-1-c.padInfo.top,v=Ge(o.shape,"float32"),I=1/(p*f),N=e.data.get(r.dataId).values,k=Ge(r.shape,"float32",N);for(let _=0;_<c.batchSize;++_)for(let $=0;$<c.inChannels;++$)for(let P=0;P<c.inHeight;++P)for(let B=0;B<c.inWidth;++B){const W=P-w,U=B-b;let G=0;for(let q=0;q<y;q+=g){const K=(W+q)/h;if(!(K<0||K>=c.outHeight||Math.floor(K)!==K))for(let H=0;H<x;H+=m){const X=(U+H)/d;X<0||X>=c.outWidth||Math.floor(X)!==X||(G+=k.get(_,K,X,$))}}v.set(G*I,_,P,B,$)}return e.makeTensorInfo(v.shape,v.dtype,v.values)}},OR={kernelName:Yi,backendName:"cpu",kernelFunc:function FR(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,scale:a,offset:o,mean:i,variance:l}=t;S(i.shape.length===l.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),S(null==o||i.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),S(null==a||i.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),xe([r,i,l,a,o],"batchNorm");let{varianceEpsilon:u}=s;null==u&&(u=.001);const c=e.data.get(r.dataId).values,h=e.data.get(i.dataId).values,d=e.data.get(l.dataId).values,p=a?e.data.get(a.dataId).values:new Float32Array([1]),f=o?e.data.get(o.dataId).values:new Float32Array([0]),g=new Float32Array(c.length),m=f.length,y=p.length,x=d.length,b=h.length;let w=0,v=0,I=0,N=0;for(let k=0;k<c.length;++k)g[k]=f[w++]+(c[k]-h[v++])*p[I++]/Math.sqrt(d[N++]+u),w>=m&&(w=0),v>=b&&(v=0),I>=y&&(I=0),N>=x&&(N=0);return e.makeTensorInfo(r.shape,r.dtype,g)}};function Kb(n,t,e,s,r){const a=Jh(s,t,e),o=L(e),i=Ne(s);if(a){const h=Qh(t,i);return"string"===r?n.slice(h,h+o):n.subarray(h,h+o)}const u=Ge(s,r,"string"===r?zs(n):n),c=Ge(e,r);for(let h=0;h<c.size;++h){const d=c.indexToLoc(h),p=d.map((f,g)=>f+t[g]);c.set(u.get(...p),...d)}return"string"===r?my(c.values):c.values}function Hr(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{begin:a,size:o}=s;xe(r,"slice");const[i,l]=ql(r,a,o);Yh(r,i,l);const c=Kb(e.data.get(r.dataId).values,i,l,r.shape,r.dtype);return e.makeTensorInfo(l,r.dtype,c)}const PR={kernelName:Cl,backendName:"cpu",kernelFunc:Hr},VR={kernelName:Mi,backendName:"cpu",kernelFunc:function LR(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockShape:a,crops:o}=s;xe([r],"batchToSpaceND");const i=a.reduce((y,x)=>y*x),l=ri(r.shape,a,i),u=ai(l.length,a.length),c=oi(r.shape,a,i),h=Od(o,a.length),d=Pd(c,o,a.length),p=pt({inputs:{x:r},backend:e,attrs:{shape:l}}),f=kn({inputs:{x:p},backend:e,attrs:{perm:u}}),g=pt({inputs:{x:f},backend:e,attrs:{shape:c}}),m=Hr({inputs:{x:g},backend:e,attrs:{begin:h,size:d}});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(g),m}};function of(n,t,e,s,r){const a=L(s),o=ln(r,e);for(let i=0;i<n.length;i++){const l=n[i];if(l<0)throw new Error("Input x must be non-negative!");l>=r||(o[l]+=a>0?t[i]:1)}return o}function Xb(n,t,e,s=!1){const r=n.shape[0],a=n.shape[1],o=Ge([r,e],t.dtype);for(let i=0;i<r;i++)for(let l=0;l<a;l++){const u=n.get(i,l);if(u<0)throw new Error("Input x must be non-negative!");u>=e||o.set(s?1:t.size>0?o.get(i,u)+t.get(i,l):o.get(i,u)+1,i,u)}return o}const zR={kernelName:$c,backendName:"cpu",kernelFunc:function MR(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,weights:a}=t,{size:o}=s,u=of(e.data.get(r.dataId).values,e.data.get(a.dataId).values,a.dtype,a.shape,o);return e.makeTensorInfo([o],a.dtype,u)}},Yb=Dt((n,t)=>n&t),WR={kernelName:Ec,backendName:"cpu",kernelFunc:Wt(Ec,Yb)},GR={kernelName:Wf,backendName:"cpu",kernelFunc:function UR(n){const{inputs:t,backend:e}=n,{s0:s,s1:r}=t,a=e.data.get(s.dataId).values,o=e.data.get(r.dataId).values,i=Pe(Array.from(a),Array.from(o));return e.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},Zb=Ts(n=>Math.ceil(n)),HR=dr(Za,Zb),jR={kernelName:Za,backendName:"cpu",kernelFunc:HR},qR=rt(Ja,(n,t)=>n>t.clipValueMax?t.clipValueMax:n<t.clipValueMin?t.clipValueMin:n),KR={kernelName:Ja,backendName:"cpu",kernelFunc:qR},XR={kernelName:zi,backendName:"cpu",kernelFunc:n=>{const{x:t}=n.inputs,e=n.backend,s=new Float32Array(L(t.shape)),r=e.data.get(t.dataId),o=r.complexTensorInfos.imag,i=e.data.get(r.complexTensorInfos.real.dataId).values,l=e.data.get(o.dataId).values;for(let u=0;u<i.length;u++)s[u]=Math.hypot(i[u],l[u]);return e.makeOutput(s,t.shape,"float32")}};function Jb(n,t,e,s){const r=_t(e,L(t));if(s&&"string"!==e){let a=0;n.forEach(o=>{const i=L(o.shape);r.set(o.vals,a),a+=i})}else{let a=0;n.forEach(o=>{const i="string"===e?zs(o.vals):o.vals;let l=0;for(let u=0;u<o.shape[0];++u){const c=u*t[1]+a;for(let h=0;h<o.shape[1];++h)r[c+h]=i[l++]}a+=o.shape[1]})}return r}function _a(n){const{inputs:t,backend:e}=n,{input:s}=t,r=e.data.get(s.dataId).complexTensorInfos.imag,a=e.data.get(r.dataId).values;return e.makeTensorInfo(r.shape,r.dtype,a)}const YR={kernelName:Xc,backendName:"cpu",kernelFunc:_a};function $a(n){const{inputs:t,backend:e,attrs:s}=n,{axis:r}=s,a=Ue(r,t[0].shape)[0];Rd(t.map(g=>g.shape),a);let i=xs(t.map(g=>g.shape),a);if(0===L(i))return e.makeTensorInfo(i,t[0].dtype,[]);const l=t.filter(g=>L(g.shape)>0);if(1===l.length)return _s({inputs:{x:l[0]},backend:e});if("complex64"===l[0].dtype){const g=l.map(w=>Gr({inputs:{input:w},backend:e})),m=l.map(w=>_a({inputs:{input:w},backend:e})),y=$a({inputs:g,backend:e,attrs:{axis:a}}),x=$a({inputs:m,backend:e,attrs:{axis:a}}),b=$n({inputs:{real:y,imag:x},backend:e});return g.forEach(w=>e.disposeIntermediateTensorInfo(w)),m.forEach(w=>e.disposeIntermediateTensorInfo(w)),e.disposeIntermediateTensorInfo(y),e.disposeIntermediateTensorInfo(x),b}const u=l.map(g=>{const y=[-1,L(g.shape.slice(a))];return pt({inputs:{x:g},backend:e,attrs:{shape:y}})}),c=u.map(g=>({vals:e.data.get(g.dataId).values,shape:g.shape}));i=xs(u.map(g=>g.shape),1);const d=Jb(c,i,t[0].dtype,1===u[0].shape[0]),p=xs(l.map(g=>g.shape),a),f=e.makeTensorInfo(p,t[0].dtype,d);return u.forEach(g=>e.disposeIntermediateTensorInfo(g)),f}const ZR={kernelName:Bi,backendName:"cpu",kernelFunc:$a};function Qb(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:a}=t,{strides:o,pad:i,dataFormat:l,dilations:u,dimRoundingMode:c}=s;xe([r,a],"conv2d");const h=Ds(l),d=Kt(r.shape,a.shape,o,u,i,c,!1,h),p=d.filterHeight,f=d.filterWidth,g=d.dilationHeight,m=d.dilationWidth,y=d.padInfo.left,x=d.padInfo.top,b="channelsLast"===d.dataFormat,w=new Qt(d.outShape,r.dtype),v=Ne(r.shape),I=Ne(a.shape),N=v[0],k=b?v[1]:v[2],_=b?v[2]:1,$=b?1:v[1],P=w.strides[0],B=b?w.strides[1]:w.strides[2],W=b?w.strides[2]:1,U=b?1:w.strides[1],G=e.data.get(r.dataId).values,q=e.data.get(a.dataId).values,K=w.values;for(let H=0;H<d.batchSize;++H){const X=H*N,ee=H*P;for(let se=0;se<d.outHeight;++se){const ie=ee+se*B,oe=se*d.strideHeight-x;for(let de=0;de<p;++de){const le=oe+de*g;if(le<0||le>=d.inHeight)continue;const me=de*I[0],Ce=X+le*k;for(let $e=0;$e<d.outWidth;++$e){const Te=ie+$e*W,Ve=$e*d.strideWidth-y;for(let We=0;We<f;++We){const at=Ve+We*m;if(at<0||at>=d.inWidth)continue;const Tt=Ce+at*_;let mt=me+We*I[1];for(let lt=0;lt<d.inChannels;++lt){const Ct=G[Tt+lt*$];for(let wt=0;wt<d.outChannels;++wt)K[Te+wt*U]+=Ct*q[mt+wt];mt+=d.outChannels}}}}}}return e.makeTensorInfo(w.shape,w.dtype,K)}const JR={kernelName:Wi,backendName:"cpu",kernelFunc:Qb},eD={kernelName:Rc,backendName:"cpu",kernelFunc:function QR(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:a}=t,{strides:o,pad:i,dataFormat:l,dimRoundingMode:u,filterShape:c}=s;xe([r,a],"conv2dBackpropFilter");const h=Ds(l),d=Kt(r.shape,c,o,1,i,u,!1,h),{strideHeight:p,strideWidth:f,filterHeight:g,filterWidth:m}=d,y="channelsLast"===d.dataFormat,x=new Qt(d.filterShape,"float32"),b=d.padInfo.left,w=d.padInfo.top,v=e.data.get(r.dataId).values,I=e.data.get(a.dataId).values,N=new Qt(r.shape,r.dtype,v),k=new Qt(a.shape,a.dtype,I);for(let _=0;_<g;++_){const $=Math.max(0,Math.ceil((w-_)/p)),P=Math.min(d.outHeight,(d.inHeight+w-_)/p);for(let B=0;B<m;++B){const W=Math.max(0,Math.ceil((b-B)/f)),U=Math.min(d.outWidth,(d.inWidth+b-B)/f);for(let G=0;G<d.inChannels;++G)for(let q=0;q<d.outChannels;++q){let K=0;for(let H=0;H<d.batchSize;++H)for(let X=$;X<P;++X){const ee=_+X*p-w;for(let se=W;se<U;++se){const ie=B+se*f-b;K+=y?N.get(H,ee,ie,G)*k.get(H,X,se,q):N.get(H,G,ee,ie)*k.get(H,q,X,se)}}x.set(K,_,B,G,q)}}}return e.makeTensorInfo(x.shape,x.dtype,x.values)}},nD={kernelName:Ui,backendName:"cpu",kernelFunc:function tD(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:a}=t,{inputShape:o,strides:i,pad:l,dataFormat:u,dimRoundingMode:c}=s;xe([r,a],"conv2dBackpropInput");const h=Ne(a.shape),d=Ne(r.shape);let p=Ds(u);const f=Kt(o,a.shape,i,1,l,c,!1,p),g=new Qt(f.inShape,"float32"),m=g.values,y=e.data.get(r.dataId).values,x=e.data.get(a.dataId).values,[b,w,v]=h,{batchSize:I,filterHeight:N,filterWidth:k,inChannels:_,inHeight:$,inWidth:P,outChannels:B,outHeight:W,outWidth:U,strideHeight:G,strideWidth:q}=f;p=f.dataFormat;const K=N-1-f.padInfo.top,H=k-1-f.padInfo.left,X="channelsLast"===p,ee=g.strides[0],se=X?g.strides[1]:g.strides[2],ie=X?g.strides[2]:1,oe=X?1:g.strides[1],de=d[0],le=X?d[1]:d[2],me=X?d[2]:1,Ce=X?1:d[1];for(let $e=0;$e<I;++$e)for(let Te=0;Te<_;++Te)for(let Ve=0;Ve<$;++Ve){const We=Ve-K,at=Math.max(0,Math.ceil(We/G)),ft=Math.min(W,(N+We)/G);for(let Tt=0;Tt<P;++Tt){const mt=Tt-H,lt=Math.max(0,Math.ceil(mt/q)),Ct=Math.min(U,(k+mt)/q);let wt=0;for(let sn=at;sn<ft;++sn){const xr=sn*G-We;for(let zn=lt;zn<Ct;++zn){const cs=de*$e+le*sn+me*zn,Gs=b*(N-1-xr)+w*(k-1-(zn*q-mt))+v*Te;for(let br=0;br<B;++br)wt+=y[cs+Ce*br]*x[Gs+br]}}m[ee*$e+se*Ve+ie*Tt+oe*Te]=wt}}return e.makeTensorInfo(g.shape,g.dtype,g.values)}},rD={kernelName:Gi,backendName:"cpu",kernelFunc:function sD(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:a}=t,{strides:o,pad:i,dilations:l}=s;xe([r,a],"conv3d");const u=tr(r.shape,a.shape,o,l,i),{filterDepth:c,filterHeight:h,filterWidth:d,dilationDepth:p,dilationHeight:f,dilationWidth:g,padInfo:m}=u,y=m.front,x=m.left,b=m.top,w=new Qt(u.outShape,r.dtype),v=e.data.get(r.dataId).values,I=e.data.get(a.dataId).values,N=w.values,k=Ne(r.shape),_=Ne(a.shape);for(let $=0;$<u.batchSize;++$){const P=$*k[0],B=$*w.strides[0];for(let W=0;W<u.outDepth;++W){const U=B+W*w.strides[1],G=W*u.strideDepth-y;for(let q=0;q<c;++q){const K=G+q*p;if(K<0||K>=u.inDepth)continue;const H=q*_[0],X=P+K*k[1];for(let ee=0;ee<u.outHeight;++ee){const se=U+ee*w.strides[2],ie=ee*u.strideHeight-b;for(let oe=0;oe<h;++oe){const de=ie+oe*f;if(de<0||de>=u.inHeight)continue;const le=H+oe*_[1],me=X+de*k[2];for(let Ce=0;Ce<u.outWidth;++Ce){const $e=se+Ce*u.outChannels,Te=Ce*u.strideWidth-x;for(let Ve=0;Ve<d;++Ve){const We=Te+Ve*g;if(We<0||We>=u.inWidth)continue;const ft=me+We*u.inChannels;let Tt=le+Ve*_[2];for(let mt=0;mt<u.inChannels;++mt){const lt=v[ft+mt];for(let Ct=0;Ct<u.outChannels;++Ct)N[$e+Ct]+=lt*I[Tt+Ct];Tt+=u.outChannels}}}}}}}}return e.makeTensorInfo(w.shape,w.dtype,w.values)}},oD={kernelName:Dc,backendName:"cpu",kernelFunc:function aD(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:a}=t,{strides:o,pad:i,filterShape:l}=s;xe([r,a],"conv3dBackpropFilterV2");const u=Ne(r.shape),c=Ne(a.shape),h=tr(r.shape,l,o,1,i),d=h.strideDepth,p=h.strideHeight,f=h.strideWidth,g=h.filterDepth,m=h.filterHeight,y=h.filterWidth,x=new Qt(h.filterShape,"float32"),b=x.values,[w,v,I,N]=x.strides,k=e.data.get(a.dataId).values,[_,$,P,B]=c,W=e.data.get(r.dataId).values,[U,G,q,K]=u,H=h.padInfo.front,X=h.padInfo.left,ee=h.padInfo.top;for(let se=0;se<g;++se){const ie=Math.max(0,Math.ceil((H-se)/d)),oe=Math.min(h.outDepth,(h.inDepth+H-se)/d),de=se*w;for(let le=0;le<m;++le){const me=Math.max(0,Math.ceil((ee-le)/p)),Ce=Math.min(h.outHeight,(h.inHeight+ee-le)/p),$e=le*v+de;for(let Te=0;Te<y;++Te){const Ve=Math.max(0,Math.ceil((X-Te)/f)),We=Math.min(h.outWidth,(h.inWidth+X-Te)/f),at=Te*I+$e;for(let ft=0;ft<h.inChannels;++ft){const Tt=ft*N+at;for(let mt=0;mt<h.outChannels;++mt){let lt=0;for(let Ct=0;Ct<h.batchSize;++Ct){const wt=Ct*U,Us=Ct*_;for(let sn=ie;sn<oe;++sn){const zn=(se+sn*d-H)*G+wt,Qr=sn*$+Us;for(let cs=me;cs<Ce;++cs){const br=(le+cs*p-ee)*q+zn,wr=cs*P+Qr;for(let vr=Ve;vr<We;++vr)lt+=W[(Te+vr*f-X)*K+br+ft]*k[vr*B+wr+mt]}}}b[Tt+mt]=lt}}}}}return e.makeTensorInfo(x.shape,x.dtype,x.values)}},lD={kernelName:Fc,backendName:"cpu",kernelFunc:function iD(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:a}=t,{pad:o,strides:i,inputShape:l}=s;xe([r],"conv3dBackpropInputV2");const u=Ne(r.shape),c=Ne(a.shape),h=tr(l,a.shape,i,1,o),d=new Qt(h.inShape,"float32"),p=d.values,[f,g,m,y]=d.strides,x=e.data.get(r.dataId).values,[b,w,v,I]=u,N=e.data.get(a.dataId).values,[k,_,$,P]=c,{batchSize:B,filterDepth:W,filterHeight:U,filterWidth:G,inChannels:q,inDepth:K,inHeight:H,inWidth:X,outChannels:ee,outDepth:se,outHeight:ie,outWidth:oe,strideDepth:de,strideHeight:le,strideWidth:me}=h,Ce=W-1-h.padInfo.front,$e=U-1-h.padInfo.top,Te=G-1-h.padInfo.left;for(let Ve=0;Ve<B;++Ve)for(let We=0;We<q;++We)for(let at=0;at<K;++at){const ft=at-Ce,Tt=Math.max(0,Math.ceil(ft/de)),mt=Math.min(se,(W+ft)/de);for(let lt=0;lt<H;++lt){const Ct=lt-$e,wt=Math.max(0,Math.ceil(Ct/le)),Us=Math.min(ie,(U+Ct)/le);for(let sn=0;sn<X;++sn){const xr=sn-Te,zn=Math.max(0,Math.ceil(xr/me)),Qr=Math.min(oe,(G+xr)/me);let cs=0;for(let Gs=Tt;Gs<mt;++Gs){const br=Gs*de-ft;for(let wr=wt;wr<Us;++wr){const vr=wr*le-Ct;for(let Ai=zn;Ai<Qr;++Ai){const Df=b*Ve+w*Gs+v*wr+I*Ai,cq=k*(W-1-br)+_*(U-1-vr)+$*(G-1-(Ai*me-xr))+P*We;for(let gc=0;gc<ee;++gc)cs+=x[Df+gc]*N[cq+gc]}}}p[f*Ve+g*at+m*lt+y*sn+We]=cs}}}return e.makeTensorInfo(d.shape,d.dtype,d.values)}},uD=rt(Qa,n=>Math.cos(n)),cD={kernelName:Qa,backendName:"cpu",kernelFunc:uD},hD=rt(eo,n=>Math.cosh(n)),dD={kernelName:eo,backendName:"cpu",kernelFunc:hD},fD={kernelName:Pc,backendName:"cpu",kernelFunc:function pD(n){const{inputs:t,backend:e,attrs:s}=n,{image:r,boxes:a,boxInd:o}=t,{cropSize:i,method:l,extrapolationValue:u}=s,[c,h,d,p]=r.shape,f=a.shape[0],[g,m]=i,y=Ge([f,g,m,p],"float32"),x=e.data.get(a.dataId).values,b=e.data.get(o.dataId).values,w=e.data.get(r.dataId).values,v=Ne(r.shape),I=Ne(y.shape);for(let N=0;N<f;N++){const k=4*N,_=x[k],$=x[k+1],P=x[k+2],B=x[k+3],W=b[N];if(W>=c)continue;const U=g>1?(P-_)*(h-1)/(g-1):0,G=m>1?(B-$)*(d-1)/(m-1):0;for(let q=0;q<g;q++){const K=g>1?_*(h-1)+q*U:.5*(_+P)*(h-1);if(K<0||K>h-1)for(let H=0;H<m;H++)for(let X=0;X<p;X++)y.values[X+H*I[2]+q*I[1]+N*I[0]]=u;else if("bilinear"===l){const H=Math.floor(K),X=Math.ceil(K),ee=K-H;for(let se=0;se<m;se++){const ie=m>1?$*(d-1)+se*G:.5*($+B)*(d-1);if(ie<0||ie>d-1){for(let me=0;me<p;me++)y.values[me+se*I[2]+q*I[1]+N*I[0]]=u;continue}const oe=Math.floor(ie),de=Math.ceil(ie),le=ie-oe;for(let me=0;me<p;me++){let Ce=me+oe*v[2]+H*v[1]+W*v[0];const $e=w[Ce];Ce=me+de*v[2]+H*v[1]+W*v[0];const Te=w[Ce];Ce=me+oe*v[2]+X*v[1]+W*v[0];const Ve=w[Ce];Ce=me+de*v[2]+X*v[1]+W*v[0];const We=w[Ce],at=$e+(Te-$e)*le;Ce=me+se*I[2]+q*I[1]+N*I[0],y.values[Ce]=at+(Ve+(We-Ve)*le-at)*ee}}}else for(let H=0;H<m;++H){const X=m>1?$*(d-1)+H*G:.5*($+B)*(d-1);if(X<0||X>d-1){for(let ie=0;ie<p;ie++)y.values[ie+H*I[2]+q*I[1]+N*I[0]]=u;continue}const ee=Math.round(X),se=Math.round(K);for(let ie=0;ie<p;ie++)y.values[ie+H*I[2]+q*I[1]+N*I[0]]=w[ie+ee*v[2]+se*v[1]+W*v[0]]}}}return e.makeTensorInfo(y.shape,y.dtype,y.values)}},gD={kernelName:Oc,backendName:"cpu",kernelFunc:function mD(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a,exclusive:o,reverse:i}=s;xe(r,"cumprod");const l=It([a],r.shape.length);let u=r;null!=l&&(u=kn({inputs:{x:r},backend:e,attrs:{perm:l}}));const c=Et(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=Tn(u.dtype,"int32"),d=wc(L(u.shape),h),p=e.data.get(u.dataId).values,f=u.shape[u.shape.length-1],g=i?(y,x)=>y+f-x-1:(y,x)=>y+x;for(let y=0;y<p.length;y+=f)for(let x=0;x<f;x++){const b=g(y,x);if(0===x)d[b]=o?1:p[b];else{const w=g(y,x-1);d[b]=o?p[w]*d[w]:p[b]*d[w]}}const m=e.makeTensorInfo(u.shape,h,d);if(null!=l){const x=kn({inputs:{x:m},backend:e,attrs:{perm:sr(l)}});return e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(u),x}return m}},xD={kernelName:Hi,backendName:"cpu",kernelFunc:function yD(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a,exclusive:o,reverse:i}=s;xe(r,"cumsum");const l=It([a],r.shape.length);let u=r;null!=l&&(u=kn({inputs:{x:r},backend:e,attrs:{perm:l}}));const c=Et(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=Tn(u.dtype,"int32"),d=ln(L(u.shape),h),p=e.data.get(u.dataId).values,f=u.shape[u.shape.length-1],g=i?(y,x)=>y+f-x-1:(y,x)=>y+x;for(let y=0;y<p.length;y+=f)for(let x=0;x<f;x++){const b=g(y,x);if(0===x)d[b]=o?0:p[b];else{const w=g(y,x-1);d[b]=o?p[w]+d[w]:p[b]+d[w]}}const m=e.makeTensorInfo(u.shape,h,d);if(null!=l){const x=kn({inputs:{x:m},backend:e,attrs:{perm:sr(l)}});return e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(u),x}return m}},wD={kernelName:Lc,backendName:"cpu",kernelFunc:function bD(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,weights:a}=t,{size:o,binaryOutput:i}=s;if(1===r.shape.length){const c=of(e.data.get(r.dataId).values,e.data.get(a.dataId).values,a.dtype,a.shape,o);return e.makeTensorInfo([o],a.dtype,c)}if(2===r.shape.length){const c=Xb(e.bufferSync(r),e.bufferSync(a),o,i);return e.makeTensorInfo(c.shape,a.dtype,c.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}},SD={kernelName:Vc,backendName:"cpu",kernelFunc:function vD(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockSize:a,dataFormat:o}=s;S("NHWC"===o,()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${o}`);const i=r.shape[0],l=r.shape[1],u=r.shape[2],c=r.shape[3],h=l*a,d=u*a,p=c/(a*a),f=e.data.get(r.dataId).values,g=new Float32Array(i*h*d*p);let m=0;for(let y=0;y<i;++y)for(let x=0;x<h;++x){const b=Math.floor(x/a),w=x%a;for(let v=0;v<d;++v){const I=Math.floor(v/a),k=(w*a+v%a)*p;for(let _=0;_<p;++_)g[m++]=f[_+k+c*(I+u*(b+l*y))]}}return e.makeTensorInfo([i,h,d,p],r.dtype,g)}};function e0(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:a}=t,{strides:o,pad:i,dilations:l,dimRoundingMode:u}=s;xe([r,a],"depthwiseConv2DNative");const c=Ne(r.shape),h=Ne(a.shape);let d=l;null==d&&(d=[1,1]),S(en(o,d),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${d}'`);const p=Kt(r.shape,a.shape,o,d,i,u,!0),{filterHeight:f,filterWidth:g,dilationHeight:m,dilationWidth:y,padInfo:x}=p,b=x.left,w=x.top,v=p.outChannels/p.inChannels,I=new Qt(p.outShape,r.dtype),N=e.data.get(r.dataId).values,k=e.data.get(a.dataId).values,_=I.values;for(let $=0;$<p.batchSize;++$){const P=$*c[0],B=$*I.strides[0];for(let W=0;W<p.outHeight;++W){const U=B+W*I.strides[1],G=W*p.strideHeight-w;for(let q=0;q<f;++q){const K=G+q*m;if(K<0||K>=p.inHeight)continue;const H=q*h[0],X=P+K*c[1];for(let ee=0;ee<p.outWidth;++ee){const se=U+ee*I.strides[2],ie=ee*p.strideWidth-b;for(let oe=0;oe<g;++oe){const de=ie+oe*y;if(de<0||de>=p.inWidth)continue;const me=X+de*p.inChannels;let Ce=se,$e=H+oe*h[1];for(let Te=0;Te<p.inChannels;++Te){const Ve=N[me+Te];for(let We=0;We<v;++We)_[Ce+We]+=Ve*k[$e+We];Ce+=v,$e+=v}}}}}}return e.makeTensorInfo(I.shape,I.dtype,I.values)}const ID={kernelName:ji,backendName:"cpu",kernelFunc:e0},CD={kernelName:Mc,backendName:"cpu",kernelFunc:function ND(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:a}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,filterShape:c}=s;xe([r,a],"depthwiseConv2dNativeBackpropFilter");const h=Kt(r.shape,c,o,i,l,u,!0),{strideHeight:d,strideWidth:p,filterHeight:f,filterWidth:g}=h,m=new Qt(h.filterShape,"float32"),y=h.padInfo.left,x=h.padInfo.top,b=h.outChannels/h.inChannels,w=e.data.get(r.dataId).values,v=new Qt(r.shape,r.dtype,w),I=e.data.get(a.dataId).values,N=new Qt(a.shape,a.dtype,I);for(let k=0;k<f;++k){const _=Math.max(0,Math.ceil((x-k)/d)),$=Math.min(h.outHeight,(h.inHeight+x-k)/d);for(let P=0;P<g;++P){const B=Math.max(0,Math.ceil((y-P)/p)),W=Math.min(h.outWidth,(h.inWidth+y-P)/p);for(let U=0;U<h.outChannels;++U){const G=Math.trunc(U/b),q=U%b;let K=0;for(let H=0;H<h.batchSize;++H)for(let X=_;X<$;++X){const ee=k+X*d-x;for(let se=B;se<W;++se)K+=v.get(H,ee,P+se*p-y,G)*N.get(H,X,se,U)}m.set(K,k,P,G,q)}}}return e.makeTensorInfo(m.shape,m.dtype,m.values)}},TD={kernelName:zc,backendName:"cpu",kernelFunc:function kD(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:a}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,inputShape:c}=s;xe([r,a],"depthwiseConv2DNativeBackpropInput");const h=Ne(r.shape),d=Ne(a.shape),p=Kt(c,a.shape,o,i,l,u,!0),f=new Qt(p.inShape,"float32"),g=f.values,[m,y,x]=f.strides,b=e.data.get(r.dataId).values,[w,v,I]=h,N=e.data.get(a.dataId).values,[k,_,$]=d,{batchSize:P,filterHeight:B,filterWidth:W,inChannels:U,inHeight:G,inWidth:q,outChannels:K,outHeight:H,outWidth:X,strideHeight:ee,strideWidth:se}=p,ie=B-1-p.padInfo.top,oe=W-1-p.padInfo.left,de=K/U;for(let le=0;le<P;++le)for(let me=0;me<U;++me)for(let Ce=0;Ce<G;++Ce){const $e=Ce-ie,Te=Math.max(0,Math.ceil($e/ee)),Ve=Math.min(H,(B+$e)/ee);for(let We=0;We<q;++We){const at=We-oe,ft=Math.max(0,Math.ceil(at/se)),Tt=Math.min(X,(W+at)/se);let mt=0;for(let lt=Te;lt<Ve;++lt){const Ct=lt*ee-$e;for(let wt=ft;wt<Tt;++wt){const sn=w*le+v*lt+I*wt,xr=k*(B-1-Ct)+_*(W-1-(wt*se-at))+$*me;for(let zn=0;zn<de;++zn)mt+=b[sn+(me*de+zn)]*N[xr+zn]}}g[m*le+y*Ce+x*We+me]=mt}}return e.makeTensorInfo(f.shape,f.dtype,f.values)}},$D={kernelName:"Diag",backendName:"cpu",kernelFunc:function _D(n){const{inputs:t,backend:e}=n,{x:s}=t,r=L(s.shape),a=e.data.get(s.dataId).values,o=Ge([r,r],s.dtype),i=o.values;for(let u=0;u<a.length;u++)i[u*r+u]=a[u];const l=[...s.shape,...s.shape];return e.makeTensorInfo(l,o.dtype,o.values)}},ED={kernelName:qi,backendName:"cpu",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s,filter:r}=n,{strides:a,pad:o,dilations:i}=e,l=t,u=l.data.get(s.dataId).values,c=s.shape.length,h=l.data.get(r.dataId).values,d=r.shape.length,{batchSize:p,inHeight:f,inWidth:g,inChannels:m,outHeight:y,outWidth:x,padInfo:b,strideHeight:w,strideWidth:v,filterHeight:I,filterWidth:N,dilationHeight:k,dilationWidth:_,outShape:$}=jo(s.shape,r.shape,a,o,"NHWC",i),P=L($),B=$.length,W=_t(s.dtype,P);for(let G=0;G<p;++G)for(let q=0;q<y;++q){const K=q*w-b.top;for(let H=0;H<x;++H){const X=H*v-b.left;for(let ee=0;ee<m;++ee){let se=Number.MIN_SAFE_INTEGER;for(let oe=0;oe<I;++oe){const de=K+oe*k;if(de>=0&&de<f)for(let le=0;le<N;++le){const me=X+le*_;if(me>=0&&me<g){const Ce=hs([G,de,me,ee],c,Ne(s.shape)),$e=hs([oe,le,ee],d,Ne(r.shape)),Te=u[Ce]+h[$e];Te>se&&(se=Te)}}}W[hs([G,q,H,ee],B,Ne($))]=se}}}return{dataId:l.write(Nr(W,s.dtype),$,s.dtype),shape:$,dtype:s.dtype}}},AD={kernelName:Wc,backendName:"cpu",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s,filter:r,dy:a}=n,{strides:o,pad:i,dilations:l}=e,u=t,c=Qn(s.shape,u.data.get(s.dataId).values),h=Qn(r.shape,u.data.get(r.dataId).values),{batchSize:d,inHeight:p,inWidth:f,inChannels:g,outHeight:m,outWidth:y,padInfo:x,strideHeight:b,strideWidth:w,filterHeight:v,filterWidth:I,dilationHeight:N,dilationWidth:k,outShape:_}=jo(s.shape,r.shape,o,i,"NHWC",l);S(a.rank===_.length,()=>`Error in ${Wc}, dy must have the same rank as output ${_.length}, but got ${a.rank}`);const $=Qn(_,u.data.get(a.dataId).values),P=Vf(r.shape,r.dtype);for(let W=0;W<d;++W)for(let U=0;U<m;++U){const G=U*b-x.top;for(let q=0;q<y;++q){const K=q*w-x.left;for(let H=0;H<g;++H){let X=Number.MIN_SAFE_INTEGER,ee=0,se=0;for(let ie=0;ie<v;++ie){const oe=G+ie*N;if(oe>=0&&oe<p)for(let de=0;de<I;++de){const le=K+de*k;if(le>=0&&le<f){const me=c[W][oe][le][H]+h[ie][de][H];me>X&&(X=me,ee=ie,se=de)}}}P[ee][se][H]+=$[W][U][q][H]}}}return{dataId:u.write(Nr(P,s.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},RD={kernelName:Bc,backendName:"cpu",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s,filter:r,dy:a}=n,{strides:o,pad:i,dilations:l}=e,u=t,c=Qn(s.shape,u.data.get(s.dataId).values),h=Qn(r.shape,u.data.get(r.dataId).values),{batchSize:d,inHeight:p,inWidth:f,inChannels:g,outHeight:m,outWidth:y,padInfo:x,strideHeight:b,strideWidth:w,filterHeight:v,filterWidth:I,dilationHeight:N,dilationWidth:k,outShape:_}=jo(s.shape,r.shape,o,i,"NHWC",l);S(a.rank===_.length,()=>`Error in ${Bc}, dy must have the same rank as output ${_.length}, but got ${a.rank}`);const $=Qn(_,u.data.get(a.dataId).values),P=Vf(s.shape,s.dtype);for(let W=0;W<d;++W)for(let U=0;U<m;++U){const G=U*b-x.top;for(let q=0;q<y;++q){const K=q*w-x.left;for(let H=0;H<g;++H){let X=Number.MIN_SAFE_INTEGER,ee=G<0?0:G,se=K<0?0:K;for(let ie=0;ie<v;++ie){const oe=G+ie*N;if(oe>=0&&oe<p)for(let de=0;de<I;++de){const le=K+de*k;if(le>=0&&le<f){const me=c[W][oe][le][H]+h[ie][de][H];me>X&&(X=me,ee=oe,se=le)}}}P[W][ee][se][H]+=$[W][U][q][H]}}}return{dataId:u.write(Nr(P,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},FD={kernelName:"Draw",backendName:"cpu",kernelFunc:function DD(n){const{inputs:t,backend:e,attrs:s}=n,{image:r}=t,{canvas:a,options:o}=s,{contextOptions:i,imageOptions:l}=o||{},u=l?.alpha||1,c=i?.contextType||"2d";if("2d"!==c)throw new Error(`Context type ${i.contextType} is not supported by the CPU backend.`);const h=a.getContext(c,i?.contextAttributes||{});if(null==h)throw new Error(`Could not get the context with ${c} type.`);const[d,p]=r.shape.slice(0,2),f=2===r.shape.length?1:r.shape[2],g=e.data.get(r.dataId).values,m="float32"===r.dtype?255:1,y=new Uint8ClampedArray(p*d*4);for(let b=0;b<d*p;++b){const w=[0,0,0,255*u];for(let I=0;I<f;I++){const N=g[b*f+I];if("float32"===r.dtype){if(N<0||N>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${N}.`)}else if("int32"===r.dtype&&(N<0||N>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${N}.`);1===f?(w[0]=N*m,w[1]=N*m,w[2]=N*m):w[I]=N*m}const v=4*b;y[v+0]=Math.round(w[0]),y[v+1]=Math.round(w[1]),y[v+2]=Math.round(w[2]),y[v+3]=Math.round(w[3])}a.width=p,a.height=d;const x=new ImageData(y,p,d);return h.putImageData(x,0,0),r}},lf=Dt((n,t)=>n*t),OD=sf((n,t,e,s)=>({real:n*e-t*s,imag:n*s+t*e})),Gu=Wt(wo,lf,OD),PD={kernelName:wo,backendName:"cpu",kernelFunc:Gu};function wi(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a,keepDims:o}=s;let i;xe(r,"sum"),i="bool"===r.dtype?pr({inputs:{x:r},backend:e,attrs:{dtype:"int32"}}):_s({inputs:{x:r},backend:e});const l=i.shape.length,u=Ue(a,i.shape),c=It(u,l);let h=u,d=i;null!=c&&(d=kn({inputs:{x:i},backend:e,attrs:{perm:c}}),h=Et(h.length,l)),tn("sum",h,d.shape.length);const[p,f]=Xt(d.shape,h);let m=Uu(e,p,Tn(d.dtype,"int32"));const y=L(f),x=e.data.get(m.dataId).values,b=e.data.get(d.dataId).values;for(let w=0;w<x.length;++w){const v=w*y;let I=0;for(let N=0;N<y;++N)I+=b[v+N];x[w]=I}if(o){const v=m;m=pt({inputs:{x:m},backend:e,attrs:{shape:$t(m.shape,u)}}),e.disposeIntermediateTensorInfo(v)}return e.disposeIntermediateTensorInfo(i),null!=c&&e.disposeIntermediateTensorInfo(d),m}const LD={kernelName:kl,backendName:"cpu",kernelFunc:wi},MD={kernelName:Uc,backendName:"cpu",kernelFunc:function VD(n){const{inputs:t,backend:e,attrs:s}=n,{equation:r}=s,a=t,{allDims:o,summedDims:i,idDims:l}=jd(r,a.length);Kd(o.length,l,a);const{path:u,steps:c}=Xd(i,l),h=c.length;let d=null,p=o.length;const f=[];for(let g=0;g<h;++g){for(const m of c[g]){const{permutationIndices:y,expandDims:x}=qd(p,l[m]);let b;Yd(y)?b=a[m]:(b=kn({inputs:{x:a[m]},backend:e,attrs:{perm:y}}),f.push(b));const w=b.shape.slice();for(let v=0;v<x.length;++v)w.splice(x[v],0,1);ke(b.shape,w)||(b=pt({inputs:{x:b},backend:e,attrs:{shape:w}}),f.push(b)),null===d?d=b:(d=Gu({inputs:{a:b,b:d},backend:e}),f.push(d))}g<h-1&&(u[g]>=0&&(d=wi({inputs:{x:d},backend:e,attrs:{axis:u[g]-(o.length-p),keepDims:!1}}),f.push(d)),p--)}for(const g of f)g!==d&&e.disposeIntermediateTensorInfo(g);return d}},BD={kernelName:Gc,backendName:"cpu",kernelFunc:function zD(n){const{inputs:t,backend:e}=n,{dy:s,y:r}=t;xe([s,r],"eluGrad");const a=new Float32Array(L(r.shape)),o=e.data.get(r.dataId).values,i=e.data.get(s.dataId).values;for(let l=0;l<o.length;++l){const u=o[l];a[l]=u>=0?i[l]:i[l]*(u+1)}return e.makeTensorInfo(r.shape,"float32",a)}},t0=Dt((n,t)=>n===t?1:0),n0=Wt(Ki,t0,null,"bool"),WD={kernelName:Ki,backendName:"cpu",kernelFunc:n0},UD=Vd,GD=Md,HD=zd,jD=Bd,qD=Wd,KD=Ud,XD=rt(so,n=>{const t=Math.sign(n),e=Math.abs(n),s=1/(1+UD*e);return t*(1-((((KD*s+qD)*s+jD)*s+HD)*s+GD)*s*Math.exp(-e*e))}),YD={kernelName:so,backendName:"cpu",kernelFunc:XD},s0=Ts(n=>Math.exp(n)),r0=dr(ro,s0,"float32"),ZD={kernelName:ro,backendName:"cpu",kernelFunc:r0};function Hu(n){const{inputs:t,backend:e,attrs:s}=n,{input:r}=t,{dim:a}=s,o=r.shape.length,i=r.shape.slice();let l=a;return a<0&&(S(-(o+1)<=a,()=>`Axis must be in the interval [${-(o+1)}, ${o}]`),l=o+a+1),i.splice(l,0,1),pt({inputs:{x:r},backend:e,attrs:{shape:i}})}const JD={kernelName:Xi,backendName:"cpu",kernelFunc:Hu},a0=Ts(n=>Math.expm1(n)),QD=dr(ao,a0),eF={kernelName:ao,backendName:"cpu",kernelFunc:QD},tF=Dt((n,t)=>n/t),uf=Wt(to,tF),cf={kernelName:to,backendName:"cpu",kernelFunc:uf},o0=Dt((n,t)=>n-t),nF=sf((n,t,e,s)=>({real:n-e,imag:t-s})),hf=Wt(Oo,o0,nF),sF={kernelName:Oo,backendName:"cpu",kernelFunc:hf};function i0(n,t,e){const s=n.shape,r=s[0],a=s[1],o=e.data.get(n.dataId),i=o.complexTensorInfos.real,l=o.complexTensorInfos.imag,u=[r,a],c=L(u),h=on("float32",c),d=on("float32",c);for(let m=0;m<r;m++){const y=Hr({inputs:{x:i},backend:e,attrs:{begin:[m,0],size:[1,a]}}),x=Hr({inputs:{x:l},backend:e,attrs:{begin:[m,0],size:[1,a]}}),b=$n({inputs:{real:y,imag:x},backend:e}),{real:w,imag:v}=rF(b,t,e),I=Ms(w,v);for(let N=0;N<a;N++){const k=Gd(I,N);h[m*a+N]=k.real,d[m*a+N]=k.imag}e.disposeIntermediateTensorInfo(y),e.disposeIntermediateTensorInfo(x),e.disposeIntermediateTensorInfo(b)}const p=e.makeTensorInfo(u,"float32",h),f=e.makeTensorInfo(u,"float32",d),g=$n({inputs:{real:p,imag:f},backend:e});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),g}function rF(n,t,e){const s=L(n.shape),r=e.data.get(n.dataId),a=e.data.get(r.complexTensorInfos.real.dataId).values,o=e.data.get(r.complexTensorInfos.imag.dataId).values;if(function aF(n){return 0==(n&n-1)}(s)){const i=df(a,o,s,t,e),l=[n.shape[0],n.shape[1]];if(t){const u=e.makeTensorInfo(l,"float32",i.real),c=e.makeTensorInfo(l,"float32",i.imag),h=e.makeTensorInfo([],"float32",qs(s,"float32")),d=_s({inputs:{x:h},backend:e}),p=cf.kernelFunc({inputs:{a:u,b:h},backend:e}),f=cf.kernelFunc({inputs:{a:c,b:d},backend:e}),g=e.data.get(p.dataId).values,m=e.data.get(f.dataId).values;return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),{real:g,imag:m}}return i}{const l=function oF(n,t,e){const s=new Float32Array(2*t);for(let r=0;r<t;r++){let a=0,o=0;for(let i=0;i<t;i++){const l=Qg(r*i,t,e),u=Gd(n,i);a+=u.real*l.real-u.imag*l.imag,o+=u.real*l.imag+u.imag*l.real}e&&(a/=t,o/=t),Zg(s,a,o,r)}return s}(Ms(a,o),s,t);return Kg(l)}}function df(n,t,e,s,r){if(1===e)return{real:n,imag:t};const a=Ms(n,t),o=e/2,i=Xg(a),l=i.real,u=i.imag,c=[l.length],h=r.makeTensorInfo(c,"float32",l),d=r.makeTensorInfo(c,"float32",u),p=$n({inputs:{real:h,imag:d},backend:r}),f=Yg(a),g=f.real,m=f.imag,y=[g.length],x=r.makeTensorInfo(y,"float32",g),b=r.makeTensorInfo(y,"float32",m),w=$n({inputs:{real:x,imag:b},backend:r}),v=df(l,u,o,s,r),I=v.real,N=v.imag,k=[I.length],_=r.makeTensorInfo(k,"float32",I),$=r.makeTensorInfo(k,"float32",N),P=$n({inputs:{real:_,imag:$},backend:r}),B=df(g,m,o,s,r),W=B.real,U=B.imag,G=[W.length],q=r.makeTensorInfo(G,"float32",W),K=r.makeTensorInfo(G,"float32",U),H=$n({inputs:{real:q,imag:K},backend:r}),X=Jg(e,s),ee=[X.real.length],se=r.makeTensorInfo(ee,"float32",X.real),ie=r.makeTensorInfo(ee,"float32",X.imag),oe=$n({inputs:{real:se,imag:ie},backend:r}),de=Gu({inputs:{a:oe,b:H},backend:r}),le=Ta({inputs:{a:P,b:de},backend:r}),me=hf({inputs:{a:P,b:de},backend:r}),Ce=Gr({inputs:{input:le},backend:r}),$e=Gr({inputs:{input:me},backend:r}),Te=_a({inputs:{input:le},backend:r}),Ve=_a({inputs:{input:me},backend:r}),We=$a({inputs:[Ce,$e],backend:r,attrs:{axis:0}}),at=$a({inputs:[Te,Ve],backend:r,attrs:{axis:0}}),ft=r.data.get(We.dataId).values,Tt=r.data.get(at.dataId).values;return r.disposeIntermediateTensorInfo(h),r.disposeIntermediateTensorInfo(d),r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(x),r.disposeIntermediateTensorInfo(b),r.disposeIntermediateTensorInfo(w),r.disposeIntermediateTensorInfo(_),r.disposeIntermediateTensorInfo($),r.disposeIntermediateTensorInfo(P),r.disposeIntermediateTensorInfo(q),r.disposeIntermediateTensorInfo(K),r.disposeIntermediateTensorInfo(H),r.disposeIntermediateTensorInfo(se),r.disposeIntermediateTensorInfo(ie),r.disposeIntermediateTensorInfo(oe),r.disposeIntermediateTensorInfo(de),r.disposeIntermediateTensorInfo(le),r.disposeIntermediateTensorInfo(me),r.disposeIntermediateTensorInfo(Ce),r.disposeIntermediateTensorInfo(Te),r.disposeIntermediateTensorInfo($e),r.disposeIntermediateTensorInfo(Ve),r.disposeIntermediateTensorInfo(We),r.disposeIntermediateTensorInfo(at),{real:ft,imag:Tt}}const lF={kernelName:"FFT",backendName:"cpu",kernelFunc:function iF(n){const{inputs:t,backend:e}=n,{input:s}=t,r=L(s.shape),a=s.shape[s.shape.length-1],i=pt({inputs:{x:s},backend:e,attrs:{shape:[r/a,a]}}),l=i0(i,!1,e),u=pt({inputs:{x:l},backend:e,attrs:{shape:s.shape}});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(l),u}};function pf(n){const{backend:t,attrs:e}=n,{shape:s,value:r,dtype:a}=e,o=a||ta(r),i=_t(o,L(s));return function cF(n,t,e){n.fill(t)}(i,r),t.makeTensorInfo(s,o,i)}const uF={kernelName:jc,backendName:"cpu",kernelFunc:pf},hF={kernelName:qc,backendName:"cpu",kernelFunc:({inputs:n,backend:e})=>{const{image:s}=n,r=e,a=on(s.dtype,L(s.shape)),[o,i,l,u]=s.shape,c=r.data.get(s.dataId).values;for(let d=0;d<o;d++){const p=d*l*i*u;for(let f=0;f<i;f++){const g=f*(l*u);for(let m=0;m<l;m++){const y=m*u;for(let x=0;x<u;x++){const b=Math.round(l-m-1),w=p+g+y+x;let v=c[w];b>=0&&b<l&&(v=c[p+g+b*u+x]),a[w]=v}}}}return{dataId:r.write(a,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},l0=Ts(n=>Math.floor(n)),dF=dr(oo,l0),pF={kernelName:oo,backendName:"cpu",kernelFunc:dF},fF=Dt((n,t)=>Math.floor(n/t)),mF=Wt(lo,fF,null,"int32"),gF={kernelName:lo,backendName:"cpu",kernelFunc:mF},xF={kernelName:Ol,backendName:"cpu",kernelFunc:function yF(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:a,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s;let g=Qb({inputs:{x:r,filter:a},backend:e,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d}});if(o){const m=g;if("NCHW"===c&&1===o.shape.length&&1!==o.shape[0]){const y=pt({inputs:{x:o},backend:e,attrs:{shape:[o.shape[0],1,1]}});g=Ta({inputs:{a:g,b:y},backend:e}),e.disposeIntermediateTensorInfo(y)}else g=Ta({inputs:{a:g,b:o},backend:e});e.disposeIntermediateTensorInfo(m)}if(p){const m=g;if("NCHW"===c&&"prelu"===p&&1===i.shape.length&&1!==i.shape[0]){const y=pt({inputs:{x:i},backend:e,attrs:{shape:[i.shape[0],1,1]}});g=Wu(e,g,p,y,f),e.disposeIntermediateTensorInfo(y)}else g=Wu(e,g,p,i,f);e.disposeIntermediateTensorInfo(m)}return g}},wF={kernelName:Pl,backendName:"cpu",kernelFunc:function bF(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:a,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s;let g=e0({inputs:{x:r,filter:a},backend:e,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d}});if(o){const m=g;g=Ta({inputs:{a:g,b:o},backend:e}),e.disposeIntermediateTensorInfo(m)}if(p){const m=g;g=Wu(e,g,p,i,f),e.disposeIntermediateTensorInfo(m)}return g}};function u0(n,t,e,s,r,a,o,i,l){const u=Ge([s,a],e);for(let c=0;c<s;c++){const h=[];let d=0;for(let p=0;p<r;p++){const f=n[c*r+p];d+=f*o[p],h.push(f)}if(d<0||d>=l/a)throw new Error(`Invalid indices: ${h} does not index into ${i}`);for(let p=0;p<a;p++)u.values[c*a+p]=t.get(...t.indexToLoc(d*a+p))}return u}const SF={kernelName:Gf,backendName:"cpu",kernelFunc:function vF(n){const{inputs:t,backend:e}=n,{params:s,indices:r}=t,a=L(s.shape),o=r.shape,i=o[o.length-1],[l,u,c,h]=Ld(s,r);if(0===u)return e.makeTensorInfo(l,s.dtype,[]);const f=u0(e.data.get(r.dataId).values,e.bufferSync(s),s.dtype,u,i,c,h,s.shape,a);return e.makeTensorInfo(l,s.dtype,f.values)}};function c0(n,t,e){const s=Ge(e,n.dtype);for(let r=0;r<s.size;++r){const o=s.indexToLoc(r).slice(),u=t.locToIndex([o[0],o[2]]);o[2]=t.values[u];const c=n.locToIndex(o);0<=c&&c<n.values.length&&(s.values[r]=n.values[c])}return s}const NF={kernelName:Zi,backendName:"cpu",kernelFunc:function IF(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,indices:a}=t,{axis:o,batchDims:i}=s;xe([r,a],"gatherV2");const l=Ue(o,r.shape)[0],u=e.data.get(a.dataId).values,c=r.shape[l];for(let w=0;w<u.length;++w){const v=u[w];S(v<=c-1&&v>=0,()=>`GatherV2: the index value ${v} is not in [0, ${c-1}]`)}let h=i;null==i&&(h=0);const d=L(a.shape),p=Qd(r,a,l,h),f=pt({inputs:{x:r},backend:e,attrs:{shape:[p.batchSize,p.outerSize,p.dimSize,p.sliceSize]}}),g=pt({inputs:{x:a},backend:e,attrs:{shape:[p.batchSize,d/p.batchSize]}}),m=[p.batchSize,p.outerSize,d/p.batchSize,p.sliceSize],y=e.bufferSync(g),b=c0(e.bufferSync(f),y,m);return e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(g),e.makeTensorInfo(p.outputShape,b.dtype,b.values)}},h0=Dt((n,t)=>n>t?1:0),CF=Wt(Ji,h0,null,"bool"),kF={kernelName:Ji,backendName:"cpu",kernelFunc:CF},d0=Dt((n,t)=>n>=t?1:0),TF=Wt(uo,d0,null,"bool"),_F={kernelName:uo,backendName:"cpu",kernelFunc:TF},EF={kernelName:Kc,backendName:"cpu",kernelFunc:function $F(n){const{inputs:t,backend:e}=n,{input:s}=t,r=L(s.shape),a=s.shape[s.shape.length-1],i=pt({inputs:{x:s},backend:e,attrs:{shape:[r/a,a]}}),l=i0(i,!0,e),u=pt({inputs:{x:l},backend:e,attrs:{shape:s.shape}});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(l),u}},AF=rt(ho,n=>Number.isFinite(n)?1:0,"bool"),RF={kernelName:ho,backendName:"cpu",kernelFunc:AF},DF=rt(po,n=>Math.abs(n)===1/0?1:0,"bool"),FF={kernelName:po,backendName:"cpu",kernelFunc:DF},OF=rt(fo,n=>Number.isNaN(n)?1:0,"bool"),PF={kernelName:fo,backendName:"cpu",kernelFunc:OF},p0=Dt((n,t)=>n<t?1:0),LF=Wt(el,p0,null,"bool"),VF={kernelName:el,backendName:"cpu",kernelFunc:LF},f0=Dt((n,t)=>n<=t?1:0),MF=Wt(tl,f0,null,"bool"),zF={kernelName:tl,backendName:"cpu",kernelFunc:MF};function m0(n,t,e){const s=(t-n)/(e-1),r=ln(e,"float32");r[0]=n;for(let a=1;a<r.length;a++)r[a]=r[a-1]+s;return r}const WF={kernelName:Hf,backendName:"cpu",kernelFunc:function BF(n){const{backend:t,attrs:e}=n,{start:s,stop:r,num:a}=e,o=m0(s,r,a);return t.makeTensorInfo([o.length],"float32",o)}},g0=Ts(n=>Math.log(n)),UF=dr(mo,g0),GF={kernelName:mo,backendName:"cpu",kernelFunc:UF},HF=rt(go,n=>Math.log1p(n)),jF={kernelName:go,backendName:"cpu",kernelFunc:HF},qF=Dt((n,t)=>n&&t),KF=Wt(nl,qF,null,"bool"),XF={kernelName:nl,backendName:"cpu",kernelFunc:KF},YF=rt(sl,n=>n?0:1,"bool"),ZF={kernelName:sl,backendName:"cpu",kernelFunc:YF},JF=Dt((n,t)=>n||t),QF=Wt(rl,JF,null,"bool"),eO={kernelName:rl,backendName:"cpu",kernelFunc:QF},nO={kernelName:al,backendName:"cpu",kernelFunc:function tO(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{depthRadius:a,bias:o,alpha:i,beta:l}=s;xe(r,"LRN");const u=r.shape[3],c=u-1,h=e.data.get(r.dataId).values,d=L(r.shape),p=new Float32Array(d);function f(g){const m=g%u;let y=g-m+Math.max(0,m-a);const x=g-m+Math.min(m+a,c);let b=0;for(;y<=x;y++){const w=h[y];b+=w*w}return b}for(let g=0;g<d;g++){const m=f(g),y=h[g]*Math.pow(o+i*m,-l);p[g]=y}return e.makeTensorInfo(r.shape,r.dtype,p)}},rO={kernelName:Yc,backendName:"cpu",kernelFunc:function sO(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,y:a,dy:o}=t,{depthRadius:i,bias:l,alpha:u,beta:c}=s;xe(o,"LRNGrad");const h=L(o.shape),d=o.shape[3],p=e.data.get(o.dataId).values,f=e.data.get(r.dataId).values,g=e.data.get(a.dataId).values,m=new Float32Array(h),y=h;for(let x=0;x<y;x++){const b=x%d,w=x-b+Math.max(0,b-i),v=x-b+Math.min(d,b+i+1);let I=0;for(let N=w;N<v;N++)I+=Math.pow(f[N],2);I=u*I+l;for(let N=w;N<v;N++){let k=-2*u*c*f[N]*g[x]/I;x===N&&(k+=Math.pow(I,-c)),k*=p[x],m[N]+=k}}return e.makeTensorInfo(o.shape,r.dtype,m)}};function y0(n,t,e,s){const r=on(s,L(e));for(let a=0;a<r.length;++a){const o=a*t;let i=n[o];for(let l=0;l<t;++l){const u=n[o+l];(Number.isNaN(u)||u>i)&&(i=u)}r[a]=i}return r}function x0(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{reductionIndices:a,keepDims:o}=s,i=e;let l=r.shape;const u=l.length,c=Ue(a,l);let h=c;const d=It(h,u);let p=i.data.get(r.dataId).values;if(null!=d){const w=new Array(u);for(let v=0;v<w.length;v++)w[v]=l[d[v]];p=rf(p,l,r.dtype,d,w),h=Et(h.length,u),l=w}xe(r,"max"),tn("max",h,u);const[f,g]=Xt(l,h),y=y0(p,L(g),f,r.dtype),x=i.write(y,f,r.dtype);let b=f;return o&&(b=$t(f,c)),{dataId:x,shape:b,dtype:r.dtype}}const aO={kernelName:ol,backendName:"cpu",kernelFunc:x0},b0=Dt((n,t)=>Math.max(n,t)),oO=Wt(yo,b0),iO={kernelName:yo,backendName:"cpu",kernelFunc:oO},uO={kernelName:il,backendName:"cpu",kernelFunc:function lO(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;xe(r,"maxPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:l}=s;S(en(o,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`);const c=Gn(r.shape,a,o,1,i,l);let h;if(1===c.filterWidth&&1===c.filterHeight&&ke(c.inShape,c.outShape))h=_s({inputs:{x:r},backend:e});else{const d=e.data.get(r.dataId).values,p=Ne(r.shape),f=af(d,0,r.dtype,p,c,"max");h=e.makeTensorInfo(c.outShape,r.dtype,f.values)}return h}},hO={kernelName:ll,backendName:"cpu",kernelFunc:function cO(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:l,dataFormat:u}=s;xe(r,"maxPool3d");const c=Rs(r.shape,a,o,1,i,l,u),d=qb(e.data.get(r.dataId).values,0,r.dtype,Ne(r.shape),c,"max");return e.makeTensorInfo(d.shape,"float32",d.values)}},pO={kernelName:Jc,backendName:"cpu",kernelFunc:function dO(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:a}=t,{filterSize:o,strides:i,pad:l,dimRoundingMode:u}=s;xe([r,a],"maxPool3DGrad");const c=Rs(a.shape,o,i,1,l,u),d=function CR(n,t){const e=Ge(t.outShape,"int32"),s=t.strideDepth,r=t.strideHeight,a=t.strideWidth,o=t.dilationDepth,i=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,d=t.padInfo.front,p=t.padInfo.top,f=t.padInfo.left;for(let g=0;g<t.batchSize;++g)for(let m=0;m<t.inChannels;++m)for(let y=0;y<t.outDepth;++y){const x=y*s-d;let b=x;for(;b<0;)b+=o;const w=Math.min(t.inDepth,u+x);for(let v=0;v<t.outHeight;++v){const I=v*r-p;let N=I;for(;N<0;)N+=i;const k=Math.min(t.inHeight,c+I);for(let _=0;_<t.outWidth;++_){const $=_*a-f;let P=$;for(;P<0;)P+=l;const B=Math.min(t.inWidth,h+$);let W=Number.NEGATIVE_INFINITY,U=-1;for(let G=b;G<w;G+=o){const q=G-x;for(let K=N;K<k;K+=i){const H=K-I;for(let X=P;X<B;X+=l){const ee=X-$,se=n.get(g,G,K,X,m);se>=W&&(W=se,U=q*c*h+H*c+ee)}}}e.set(U,g,y,v,_,m)}}}return e}(e.bufferSync(a),c),p=c.strideDepth,f=c.strideHeight,g=c.strideWidth,m=c.dilationDepth,y=c.dilationHeight,x=c.dilationWidth,b=c.effectiveFilterDepth,w=c.effectiveFilterHeight,v=c.effectiveFilterWidth,I=b-1-c.padInfo.front,N=v-1-c.padInfo.left,k=w-1-c.padInfo.top,_=Ge(a.shape,"float32"),$=e.bufferSync(r);for(let P=0;P<c.batchSize;++P)for(let B=0;B<c.inChannels;++B)for(let W=0;W<c.inDepth;++W)for(let U=0;U<c.inHeight;++U)for(let G=0;G<c.inWidth;++G){const q=W-I,K=U-k,H=G-N;let X=0;for(let ee=0;ee<b;ee+=m){const se=(q+ee)/p;if(!(se<0||se>=c.outDepth||Math.floor(se)!==se))for(let ie=0;ie<w;ie+=y){const oe=(K+ie)/f;if(!(oe<0||oe>=c.outHeight||Math.floor(oe)!==oe))for(let de=0;de<v;de+=x){const le=(H+de)/g;if(le<0||le>=c.outWidth||Math.floor(le)!==le)continue;const $e=b*w*v-1-d.get(P,se,oe,le,B)===ee*w*v+ie*v+de?1:0;0!==$e&&(X+=$.get(P,se,oe,le,B)*$e)}}}_.set(X,P,W,U,G,B)}return e.makeTensorInfo(_.shape,_.dtype,_.values)}},mO={kernelName:Zc,backendName:"cpu",kernelFunc:function fO(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:a,output:o}=t,i=a;xe([a,o],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,d=Gn(i.shape,l,u,1,c,h),p=e.data.get(i.dataId).values,f=Ge(d.outShape,i.dtype,jb(p,i.shape,i.dtype,d).values),g=d.strideHeight,m=d.strideWidth,y=d.dilationHeight,x=d.dilationWidth,b=d.effectiveFilterHeight,w=d.effectiveFilterWidth,v=w-1-d.padInfo.left,I=b-1-d.padInfo.top,N=Ge(i.shape,"float32"),k=e.data.get(r.dataId).values,_=Ge(r.shape,"float32",k);for(let $=0;$<d.batchSize;++$)for(let P=0;P<d.inChannels;++P)for(let B=0;B<d.inHeight;++B)for(let W=0;W<d.inWidth;++W){const U=B-I,G=W-v;let q=0;for(let K=0;K<b;K+=y){const H=(U+K)/g;if(!(H<0||H>=d.outHeight||Math.floor(H)!==H))for(let X=0;X<w;X+=x){const ee=(G+X)/m;if(ee<0||ee>=d.outWidth||Math.floor(ee)!==ee)continue;const oe=b*w-1-f.get($,H,ee,P)===K*w+X?1:0;0!==oe&&(q+=_.get($,H,ee,P)*oe)}}N.set(q,$,B,W,P)}return e.makeTensorInfo(N.shape,N.dtype,N.values)}},yO={kernelName:jf,backendName:"cpu",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{x:s}=n,{filterSize:r,strides:a,pad:o,includeBatchInIndex:i}=t,l=e;xe(s,"MaxPoolWithArgmax");const u=l.data.get(s.dataId).values,c=Gn(s.shape,r,a,[1,1],o),[h,d]=function gO(n,t,e,s,r){const o=af(n,0,e,Ne(t),r,"max"),i=jb(n,t,e,r,!0,s);return[o.values,i.values]}(u,s.shape,s.dtype,i,c),p=l.write(h,c.outShape,s.dtype),f=l.write(d,c.outShape,s.dtype);return[{dataId:p,shape:c.outShape,dtype:s.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}},bO={kernelName:ul,backendName:"cpu",kernelFunc:function xO(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a,keepDims:o}=s,i=Ue(a,r.shape),c=L(Xt(r.shape,i)[1]),h=[],d=e.makeTensorInfo([],"float32",new Float32Array([c]));h.push(d);const p=pr({inputs:{x:r},backend:e,attrs:{dtype:"float32"}});h.push(p);const f=uf({inputs:{a:p,b:d},backend:e});h.push(f);const g=wi({inputs:{x:f},backend:e,attrs:{axis:a,keepDims:o}});return h.forEach(m=>e.disposeIntermediateTensorInfo(m)),g}},vO={kernelName:cl,backendName:"cpu",kernelFunc:function wO(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a,keepDims:o}=s;xe(r,"min");const i=Ue(a,r.shape);let l=i;const u=It(l,r.shape.length);let c=r;null!=u&&(c=kn({inputs:{x:r},backend:e,attrs:{perm:u}}),l=Et(l.length,r.shape.length)),tn("min",l,c.shape.length);const[h,d]=Xt(c.shape,l),p=L(d),f=ln(L(h),c.dtype),g=e.data.get(c.dataId).values;for(let y=0;y<f.length;++y){const x=y*p;let b=g[x];for(let w=0;w<p;++w){const v=g[x+w];(Number.isNaN(v)||v<b)&&(b=v)}f[y]=b}null!=u&&e.disposeIntermediateTensorInfo(c);const m=e.makeTensorInfo(h,c.dtype,f);if(o){const x=pt({inputs:{x:m},backend:e,attrs:{shape:$t(h,i)}});return e.disposeIntermediateTensorInfo(m),x}return m}},w0=Dt((n,t)=>Math.min(n,t)),SO=Wt(xo,w0),IO={kernelName:xo,backendName:"cpu",kernelFunc:SO},CO={kernelName:hl,backendName:"cpu",kernelFunc:function NO(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{paddings:a,mode:o}=s;xe(r,"mirrorPad");const i=a.map((b,w)=>b[0]+r.shape[w]+b[1]),l=a.map(b=>b[0]),u=a.map((b,w)=>b[0]+r.shape[w]),c="reflect"===o?0:1,h=e.data.get(r.dataId).values,d=r.shape.length,p=Ne(r.shape),f=L(i),g=i.length,m=Ne(i),y=on(r.dtype,f);for(let b=0;b<f;b++){let w=na(b,g,m);for(let I=0;I<g;I++)w[I]<l[I]?w[I]=2*l[I]-w[I]-c:w[I]>=u[I]&&(w[I]=2*(u[I]-1)-w[I]+c);w=w.map((I,N)=>I-l[N]);const v=hs(w,d,p);y[b]=h[v]}return{dataId:e.write(y,i,r.dtype),shape:i,dtype:r.dtype}}},kO=Dt((n,t)=>{const e=n%t;return n<0&&t<0||n>=0&&t>=0?e:(e+t)%t}),TO=Wt(bo,kO),_O={kernelName:bo,backendName:"cpu",kernelFunc:TO};function v0(n){const{inputs:t,backend:e,attrs:s}=n,{logits:r}=t,{dim:a}=s,o=r.shape.length;let i=a;if(-1===i&&(i=o-1),i!==o-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${o} and dim was ${i}`);const l=Ue([i],r.shape),u=x0({inputs:{x:r},backend:e,attrs:{reductionIndices:l,keepDims:!1}}),c=$t(u.shape,l),h=pt({inputs:{x:u},backend:e,attrs:{shape:c}}),d=hf({inputs:{a:r,b:h},backend:e}),p=r0({inputs:{x:d},backend:e}),f=wi({inputs:{x:p},backend:e,attrs:{axis:l,keepDims:!1}}),g=pt({inputs:{x:f},backend:e,attrs:{shape:c}}),m=uf({inputs:{a:p,b:g},backend:e});return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(g),m}const $O={kernelName:$l,backendName:"cpu",kernelFunc:v0},AO={kernelName:qf,backendName:"cpu",kernelFunc:function EO(n){const{inputs:t,backend:e,attrs:s}=n,{logits:r}=t,{numSamples:a,seed:o,normalized:i}=s;xe(r,"multinomial");const l=i?r:v0({inputs:{logits:r},backend:e,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],h=e.data.get(l.dataId).values,d=[u,a],p=ln(L(d),"int32");for(let f=0;f<u;++f){const g=f*c,m=new Float32Array(c-1);m[0]=h[g];for(let b=1;b<m.length;++b)m[b]=m[b-1]+h[g+b];const y=fd.alea(o.toString()),x=f*a;for(let b=0;b<a;++b){const w=y();p[x+b]=m.length;for(let v=0;v<m.length;v++)if(w<m[v]){p[x+b]=v;break}}}return i||e.disposeIntermediateTensorInfo(l),e.makeTensorInfo(d,"int32",p)}};function S0(n,t,e){const s=qs(-1,e);return lf([],t,s,n,e)}const DO={kernelName:dl,backendName:"cpu",kernelFunc:function RO(n){const{inputs:t,backend:e}=n,{x:s}=t;xe(s,"neg");const r=e.data.get(s.dataId).values,[a,o]=S0(r,s.shape,s.dtype);return e.makeTensorInfo(o,s.dtype,a)}},FO=Cd,PO={kernelName:Qc,backendName:"cpu",kernelFunc:function OO(n){const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l}=s;xe(r,"NonMaxSuppression");const u=e.data.get(r.dataId).values,c=e.data.get(a.dataId).values,{selectedIndices:h}=FO(u,c,o,i,l);return e.makeTensorInfo([h.length],"int32",new Int32Array(h))}},LO=kd,MO={kernelName:eh,backendName:"cpu",kernelFunc:function VO(n){const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,padToMaxOutputSize:u}=s;xe(r,"NonMaxSuppressionPadded");const c=e.data.get(r.dataId).values,h=e.data.get(a.dataId).values,{selectedIndices:d,validOutputs:p}=LO(c,h,o,i,l,u);return[e.makeTensorInfo([d.length],"int32",new Int32Array(d)),e.makeTensorInfo([],"int32",new Int32Array([p]))]}},zO=Td,WO={kernelName:th,backendName:"cpu",kernelFunc:function BO(n){const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=s;xe(r,"NonMaxSuppressionWithScore");const c=e.data.get(r.dataId).values,h=e.data.get(a.dataId).values,d=o,p=i,f=l,g=u,{selectedIndices:m,selectedScores:y}=zO(c,h,d,p,f,g);return[e.makeTensorInfo([m.length],"int32",new Int32Array(m)),e.makeTensorInfo([y.length],"float32",new Float32Array(y))]}},I0=Dt((n,t)=>n!==t?1:0),UO=Wt(pl,I0,null,"bool"),GO={kernelName:pl,backendName:"cpu",kernelFunc:UO},jO={kernelName:ml,backendName:"cpu",kernelFunc:function HO(n){const{inputs:t,backend:e,attrs:s}=n,{indices:r}=t,{dtype:a,depth:o,onValue:i,offValue:l}=s;xe(r,"oneHot");const u=L(r.shape),c=new Float32Array(u*o);c.fill(l);const h=e.data.get(r.dataId).values;for(let d=0;d<u;++d)h[d]>=0&&h[d]<o&&(c[d*o+h[d]]=i);return e.makeTensorInfo([...r.shape,o],a,c)}};function ju(n){const{inputs:t,backend:e}=n,{x:s}=t;if("string"===s.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===s.dtype){const r=Gr({inputs:{input:s},backend:e}),a=ju({inputs:{x:r},backend:e}),o=_a({inputs:{input:s},backend:e}),i=ju({inputs:{x:o},backend:e}),l=$n({inputs:{real:a,imag:i},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(i),l}return pf({backend:e,attrs:{shape:s.shape,value:0,dtype:s.dtype}})}const qO={kernelName:Dl,backendName:"cpu",kernelFunc:ju},KO={kernelName:fl,backendName:"cpu",kernelFunc:function N0(n){const{inputs:t,backend:e}=n,{x:s}=t;if("string"===s.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===s.dtype){const r=Gr({inputs:{input:s},backend:e}),a=N0({inputs:{x:r},backend:e}),o=_a({inputs:{input:s},backend:e}),i=ju({inputs:{x:o},backend:e}),l=$n({inputs:{real:a,imag:i},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(i),l}return pf({backend:e,attrs:{shape:s.shape,value:1,dtype:s.dtype}})}};function C0(n){const{inputs:t,backend:e,attrs:s}=n,{axis:r}=s;if(1===t.length)return Hu({inputs:{input:t[0]},backend:e,attrs:{dim:r}});const a=t[0].shape,o=t[0].dtype;t.forEach(c=>{Re(a,c.shape,"All tensors passed to stack must have matching shapes"),S(o===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});const i=[],u=$a({inputs:t.map(c=>{const h=Hu({inputs:{input:c},backend:e,attrs:{dim:r}});return i.push(h),h}),backend:e,attrs:{axis:r}});return i.forEach(c=>e.disposeIntermediateTensorInfo(c)),u}const XO={kernelName:gl,backendName:"cpu",kernelFunc:C0},k0={kernelName:yl,backendName:"cpu",kernelFunc:function YO(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{paddings:a,constantValue:o}=s;xe(r,"pad");const i=a.map((x,b)=>x[0]+r.shape[b]+x[1]),l=a.map(x=>x[0]),u=e.data.get(r.dataId).values,c=L(r.shape),h=r.shape.length,d=Ne(r.shape),p=L(i),f=i.length,g=Ne(i),m=on(r.dtype,p);0!==o&&m.fill(o);for(let x=0;x<c;x++)m[hs(na(x,h,d).map((I,N)=>I+l[N]),f,g)]=u[x];return{dataId:e.write(m,i,r.dtype),shape:i,dtype:r.dtype}}},ZO=Dt((n,t)=>Math.pow(n,t)),JO=Wt(vo,ZO),QO={kernelName:vo,backendName:"cpu",kernelFunc:JO};function T0(n,t,e,s){const[r,a]=Xt(n,s),o=Tn(t,"int32"),i=ln(L(r),o),l=L(a);for(let u=0;u<i.length;++u){const c=u*l;let h=1;for(let d=0;d<l;++d)h*=e[c+d];i[u]=h}return{outVals:i,outShape:r,outDtype:o}}const tP={kernelName:bl,backendName:"cpu",kernelFunc:function eP(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a,keepDims:o}=s;xe(r,"prod");const i=r.shape.length,l=Ue(a,r.shape),u=It(l,i);let c=l,h=r;const d=[];null!=u&&(h=kn({inputs:{x:r},backend:e,attrs:{perm:u}}),d.push(h),c=Et(c.length,i));const p=e.data.get(h.dataId).values,{outVals:f,outShape:g,outDtype:m}=T0(h.shape,h.dtype,p,c);let y=g;return o&&(y=$t(g,l)),d.forEach(x=>e.disposeIntermediateTensorInfo(x)),e.makeTensorInfo(y,m,f)}};function _0(n,t){const e=n.slice(0,t);for(;e.length<t;)e.push(1);for(let s=t;s<n.length;s++)e[t-1]*=n[s];return e}function $0(n,t,e,s,r,a,o,i){if(0===n.length)throw new Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw new Error("Split tensors must not be scalars");if(function nP(n,t,e){n.forEach((s,r)=>{if(s<0||s>=e){const a=na(r,t.length,Ne(t)).join(",");throw new Error(`indices[${a}] = ${s} is not in [0, ${e})`)}})}(a,o,t[0][0]-1),0===s.length)throw new Error("params.rank must be nonzero");const u=s[0],{outSplits:c,valueSlices:h,numValues:d}=function rP(n,t,e,s){const r=[];let a=0;const i=new Array(t.length-1+e.length).fill(null).map(()=>[0]);!function sP(n,t){for(let e=0;e<n.length;++e){const s=n[e],r=e===n.length-1?t:n[e+1].length;if(0===s.length)throw new Error("Ragged splits may not be empty");if(s[0]<0)throw new Error("Ragged splits must be non-negative");if(s[s.length-1]>r)throw new Error("Ragged splits must not point past values");for(let a=1;a<s.length;++a)if(s[a-1]>s[a])throw new Error("Ragged splits must be sorted in ascending order")}}(e,s);let l=1;for(let u=0;u<t.length-1;++u){l*=t[u];const c=t[u+1];for(let h=1;h<l+1;++h)i[u].push(h*c)}for(let u=0;u<n.length;++u){let c=n[u],h=n[u]+1;for(let d=0;d<e.length;++d){const p=e[d],f=d+t.length-1;if(f>=0){const g=i[f],m=g[g.length-1]-p[c];for(let y=c;y<h;++y)i[f].push(p[y+1]+m)}c=p[c],h=p[h]}h!==c&&(r.push([c,h]),a+=h-c)}return{outSplits:i,valueSlices:r,numValues:a}}(a,o,n,u),p=function aP(n){const t=[];for(let e=0;e<n.length;++e){const r=_t("int32",n[e].length);t.push(r),n[e].forEach((a,o)=>r[o]=a)}return t}(c),f=function iP(n,t,e,s,r){const a=t.slice();a[0]=r;const o=_t(e,L(a)),i=n.length;return function oP(n,t,e,s,r,a){const o=_0(t,2)[1],i=_0(a,2)[1];let l=0;for(const u of e)for(let c=u[0];c<u[1];++c){for(let h=0;h<s;++h)r[l*i+h]=n[c*o+h];++l}}(n,t,s,0===i?0:i/t[0],o,a),[o,a]}(e,s,r,h,d);return[p,f[0],f[1]]}const uP={kernelName:Kf,backendName:"cpu",kernelFunc:function lP(n){const{inputs:t,backend:e,attrs:s}=n,{paramsNestedSplits:r,paramsDenseValues:a,indices:o}=t,l=r.map(y=>e.data.get(y.dataId).values),u=r.map(y=>y.shape),c=e.data.get(a.dataId).values,h=e.data.get(o.dataId).values,[d,p,f]=$0(l,u,c,a.shape,a.dtype,h,o.shape),g=d.map(y=>e.makeTensorInfo([y.length],"int32",y)),m=e.makeTensorInfo(f,a.dtype,p);return g.concat([m])}},E0=2147483647;function A0(n,t,e,s,r,a,o){if(t.length>1)throw new Error("starts must be a scalar or vector");if(r.length>1)throw new Error("limits must be a scalar or vector");if(o.length>1)throw new Error("deltas must be a scalar or vector");const i=0===t.length,l=0===r.length,u=0===o.length,c=[];i||c.push(t[0]),l||c.push(r[0]),u||c.push(o[0]);for(let m=1;m<c.length;++m)if(c[m]!==c[m-1])throw new Error("starts, limits, and deltas must have the same shape");const h=0===c.length?1:c[0],d=_t("int32",h+1);d[0]=0;for(let m=0;m<h;++m){const y=i?n[0]:n[m],x=l?s[0]:s[m],b=u?a[0]:a[m];if(0===b)throw new Error("Requires delta != 0");let w;if(b>0&&x<y||b<0&&x>y)w=0;else if(w=Math.ceil(Math.abs((x-y)/b)),w>E0)throw new Error(`Requires ((limit - start) / delta) <= ${E0}`);d[m+1]=d[m]+w}const f=_t(e,d[h]);let g=0;for(let m=0;m<h;++m){const y=d[m+1]-d[m];let x=i?n[0]:n[m];const b=u?a[0]:a[m];for(let w=0;w<y;++w)f[g++]=x,x+=b}return[d,f]}const hP={kernelName:Xf,backendName:"cpu",kernelFunc:function cP(n){const{inputs:t,backend:e}=n,{starts:s,limits:r,deltas:a}=t,o=e.data.get(s.dataId).values,i=e.data.get(r.dataId).values,l=e.data.get(a.dataId).values,[u,c]=A0(o,s.shape,s.dtype,i,r.shape,l,a.shape);return[e.makeTensorInfo([u.length],"int32",u),e.makeTensorInfo([c.length],s.dtype,c)]}};var Yn=bs;class qu{constructor(t,e,s,r,a,o,i,l,u,c){this.shape=t,this.shapeShape=e,this.values=s,this.valuesShape=r,this.valuesDType=a,this.defaultValue=o,this.defaultValueShape=i,this.rowPartitionValues=l,this.rowPartitionValuesShapes=u,this.rowPartitionTypes=Gg(c),this.raggedRank=Hg(this.rowPartitionTypes)}getRowPartitionTypeByDimension(t){return this.rowPartitionTypes[0]===Yn.FIRST_DIM_SIZE?this.rowPartitionTypes[t+1]:this.rowPartitionTypes[t]}getRowPartitionTensor(t){return this.rowPartitionTypes[0]===Yn.FIRST_DIM_SIZE?this.rowPartitionValues[t+1]:this.rowPartitionValues[t]}getMaxWidth(t){const e=this.getRowPartitionTensor(t-1);switch(this.getRowPartitionTypeByDimension(t-1)){case Yn.VALUE_ROWIDS:return qu.getMaxWidthValueRowID(e);case Yn.ROW_SPLITS:return qu.getMaxWidthRowSplit(e);default:throw new Error(`Cannot handle partition type ${Yn[this.getRowPartitionTypeByDimension(t-1)]}`)}}static getMaxWidthRowSplit(t){const e=t.length;if(0===e||1===e)return 0;let s=0;for(let r=0;r<e-1;++r){const a=t[r+1]-t[r];a>s&&(s=a)}return s}static getMaxWidthValueRowID(t){const e=t.length;if(0===e)return 0;let s=0,r=t[0],a=0;for(let o=1;o<e;++o){const i=t[o];i!==r&&(r=i,a=Math.max(o-s,a),s=o)}return Math.max(e-s,a)}tensorShapeFromTensor(t,e,s=!0){if(0===e.length){if(-1===t[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return D0(t,s)}calculateOutputSize(t){const e=this.valuesShape;jg(this.defaultValueShape,e);const r=this.tensorShapeFromTensor(this.shape,this.shapeShape),o=Ug(this.raggedRank,r,e);o[0]<0&&(o[0]=t);for(let i=1;i<=this.raggedRank;++i)o[i]<0&&(o[i]=this.getMaxWidth(i));return o}calculateFirstParentOutputIndex(t,e,s){const r=Math.min(t,s),a=[];let o=0;for(let i=0;i<r;++i,o+=e)a.push(o);for(let i=r;i<t;++i)a.push(-1);return S(a.length===t,()=>"Final length of result must be equal to firstDimension."),a}calculateOutputIndexRowSplit(t,e,s,r){const a=t.length,o=[];for(let i=0;i<a-1;++i){const l=t[i+1]-t[i];let u=Math.min(r,l),c=e[i];-1===c&&(u=0);for(let h=0;h<u;++h)o.push(c),c+=s;for(let h=0;h<l-u;++h)o.push(-1)}if(a>0&&o.length!==t[a-1])throw new Error("Invalid row split size.");return o}calculateOutputIndexValueRowID(t,e,s,r){const a=t.length,o=[];if(0===a)return[];let i=0,l=t[0];if(l>=e.length)throw new Error(`Got currentValueRowId=${l}, which is not less than ${e.length}`);let u=e[l];o.push(u);for(let c=1;c<a;++c){const h=t[c];if(h===l)u>=0&&(++i,i<r?u+=s:u=-1);else{if(i=0,l=h,h>=e.length)throw new Error(`Got nextValueRowId=${h} which is not less than ${e.length}`);u=e[h]}o.push(u)}if(o.length!==t.length)throw new Error("Invalid row ids.");return o}calculateOutputIndex(t,e,s,r){const a=this.getRowPartitionTensor(t),o=this.getRowPartitionTypeByDimension(t);switch(o){case Yn.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(a,e,s,r);case Yn.ROW_SPLITS:if(a.length-1>e.length)throw new Error(`Row partition size is greater than output size: ${a.length-1} > ${e.length}`);return this.calculateOutputIndexRowSplit(a,e,s,r);default:throw new Error(`Unsupported partition type: ${Yn[o]}`)}}getFirstDimensionSize(){const t=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const e=this.rowPartitionTypes[0];switch(e){case Yn.FIRST_DIM_SIZE:return t[0];case Yn.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case Yn.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${Yn[e]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),s=this.calculateOutputSize(e),r=new Array(this.raggedRank+1);r[r.length-1]=1;for(let l=r.length-2;l>=0;--l)r[l]=r[l+1]*s[l+1];const a=D0(s,!1),o=_t(this.valuesDType,L(a));if(r[0]*s[0]>0){let l=this.calculateFirstParentOutputIndex(e,r[0],s[0]);for(let u=1;u<=this.raggedRank;++u)l=this.calculateOutputIndex(u-1,l,r[u],s[u]);this.setOutput(this.raggedRank,l,o,a)}return[a,o]}setOutput(t,e,s,r){if(0===s.length)return;const a=this.values,o=s;let i=r.slice();i=i.slice(t+1);const l=L(i),u=e.length;let c=this.defaultValue;if(c.length!==l&&1!==c.length){const f=this.defaultValueShape;z(()=>{const g=F(c,f);c=Xo(g,i).dataSync()})}let h=0,d=0,p=0;for(let f=0;f<=u;++f){let g=f<u?e[f]:-1;if(g!==p){if(d<p){const m=a.subarray(h*l);R0(o.subarray(d*l),m,(p-d)*l)}if(f>=u&&(g=Math.floor(s.length/l)),g>p)if(1===this.defaultValue.length)o.subarray(p*l,g*l).fill(this.defaultValue[0]),p=g;else for(;g>p;)R0(o.slice(p*l),c,l),++p;g<0?(h=f+1,d=p):(h=f,d=p,p=d+1)}else++p}}}function R0(n,t,e){for(let s=0;s<e;s++)n[s]=t[s]}function D0(n,t){const e=[];for(let s of n){if(s<0){if(!t)throw new Error(`Dimension ${s} must be >= 0`);if(s<-1)throw new Error(`Dimension ${s} must be >= -1`);s=-1}e.push(s)}return e}function F0(n,t,e,s,r,a,o,i,l,u){return new qu(n,t,e,s,r,a,o,i,l,u).compute()}const pP={kernelName:Yf,backendName:"cpu",kernelFunc:function dP(n){const{inputs:t,backend:e,attrs:s}=n,{shape:r,values:a,defaultValue:o,rowPartitionTensors:i}=t,{rowPartitionTypes:l}=s,u=e.data.get(r.dataId).values,c=e.data.get(a.dataId).values,h=e.data.get(o.dataId).values,d=i.map(m=>e.data.get(m.dataId).values),p=i.map(m=>m.shape),[f,g]=F0(u,r.shape,c,a.shape,a.dtype,h,o.shape,d,p,l);return e.makeTensorInfo(f,a.dtype,g)}};function O0(n,t,e,s){if(n===t||n<t&&e<0||t<n&&e>1)return ln(0,s);const l=ln(Math.abs(Math.ceil((t-n)/e)),s);t<n&&1===e&&(e=-1),l[0]=n;for(let u=1;u<l.length;u++)l[u]=l[u-1]+e;return l}const mP={kernelName:nh,backendName:"cpu",kernelFunc:function fP(n){const{backend:t,attrs:e}=n,{start:s,stop:r,dtype:a,step:o}=e,i=O0(s,r,o,a);return t.makeTensorInfo([i.length],a,i)}},gP=rt(So,n=>1/n),yP={kernelName:So,backendName:"cpu",kernelFunc:gP},bP={kernelName:Sl,backendName:"cpu",kernelFunc:function xP(n){const{inputs:t,backend:e,attrs:s}=n,{images:r}=t,{alignCorners:a,halfPixelCenters:o,size:i}=s;xe(r,"resizeBilinear");const l=Ne(r.shape),[u,c]=i,[h,d,p,f]=r.shape,g=e.data.get(r.dataId).values,m=new Float32Array(L([h,u,c,f])),y=[a&&u>1?d-1:d,a&&c>1?p-1:p],x=[a&&u>1?u-1:u,a&&c>1?c-1:c];let b=0;const w=y[0]/x[0],v=y[1]/x[1];for(let I=0;I<h;I++)for(let N=0;N<u;N++){let k;k=o?w*(N+.5)-.5:w*N;const _=Math.max(0,Math.floor(k)),$=k-_,P=Math.min(d-1,Math.ceil(k)),B=I*l[0]+_*l[1],W=I*l[0]+P*l[1];for(let U=0;U<c;U++){let G;G=o?v*(U+.5)-.5:v*U;const q=Math.max(0,Math.floor(G)),K=G-q,H=Math.min(p-1,Math.ceil(G)),X=B+q*l[2],ee=W+q*l[2],se=B+H*l[2],ie=W+H*l[2];for(let oe=0;oe<f;oe++){const de=g[X+oe],le=g[ee+oe],$e=de+(g[se+oe]-de)*K;m[b++]=$e+(le+(g[ie+oe]-le)*K-$e)*$}}}return e.makeTensorInfo([h,u,c,f],"float32",m)}},vP={kernelName:ah,backendName:"cpu",kernelFunc:function wP(n){const{inputs:t,backend:e,attrs:s}=n,{images:r,dy:a}=t,{alignCorners:o}=s;xe([a,r],"resizeBilinearGrad");const i=Ne(r.shape),[l,u,c,h]=r.shape,[,d,p]=a.shape,f=new Float32Array(l*u*c*h),g=[o&&d>1?u-1:u,o&&p>1?c-1:c],m=[o&&d>1?d-1:d,o&&p>1?p-1:p],y=g[0]/m[0],x=g[1]/m[1],b=e.data.get(a.dataId).values;let w=0;for(let v=0;v<l;v++){const I=v*i[0];for(let N=0;N<d;N++){const k=N*y,_=Math.floor(k),$=Math.min(Math.ceil(k),u-1),P=I+_*i[1],B=I+$*i[1],W=k-_,U=1-W;for(let G=0;G<p;G++){const q=G*x,K=Math.floor(q),H=Math.min(Math.ceil(q),c-1),X=q-K,ee=1-X,se=P+K*i[2],ie=P+H*i[2],oe=B+K*i[2],de=B+H*i[2],le=U*ee,me=U*X,Ce=W*ee,$e=W*X;for(let Te=0;Te<h;Te++){const Ve=b[w++];f[se+Te]+=Ve*le,f[ie+Te]+=Ve*me,f[oe+Te]+=Ve*Ce,f[de+Te]+=Ve*$e}}}}return e.makeTensorInfo([l,c,u,h],"float32",f)}},IP={kernelName:vl,backendName:"cpu",kernelFunc:function SP(n){const{inputs:t,backend:e,attrs:s}=n,{images:r}=t,{alignCorners:a,halfPixelCenters:o,size:i}=s;xe(r,"resizeNearestNeighbor");const l=Ne(r.shape),[u,c]=i,[h,d,p,f]=r.shape,g=e.data.get(r.dataId).values,m=new Float32Array(h*u*c*f),y=[a&&u>1?d-1:d,a&&c>1?p-1:p],x=[a&&u>1?u-1:u,a&&c>1?c-1:c],b=y[0]/x[0],w=y[1]/x[1];let v=0;for(let I=0;I<h;I++){const N=I*l[0];for(let k=0;k<u;k++){const _=o?b*(k+.5):b*k;let $=Math.min(d-1,a?Math.round(_):Math.floor(_));o&&($=Math.max(0,$));const P=N+$*l[1];for(let B=0;B<c;B++){const W=o?w*(B+.5):w*B;let U=Math.min(p-1,a?Math.round(W):Math.floor(W));o&&(U=Math.max(0,U));const G=P+U*l[2];for(let q=0;q<f;q++)m[v++]=g[G+q]}}}return e.makeTensorInfo([h,u,c,f],r.dtype,m)}},CP={kernelName:rh,backendName:"cpu",kernelFunc:function NP(n){const{inputs:t,backend:e,attrs:s}=n,{images:r,dy:a}=t,{alignCorners:o}=s;xe([a,r],"resizeNearestNeighborGrad");const i=Ne(r.shape),l=Ne(a.shape),[u,c,h,d]=r.shape,[,p,f]=a.shape,g=new Float32Array(u*c*h*d),m=e.data.get(a.dataId).values,y=[o&&p>1?c-1:c,o&&f>1?h-1:h],x=[o&&p>1?p-1:p,o&&f>1?f-1:f],b=y[0]/x[0],w=y[1]/x[1],v=1/b,I=1/w,N=2*Math.ceil(v)+2,k=2*Math.ceil(I)+2;for(let _=0;_<u;_++){const $=_*i[0];for(let P=0;P<c;P++){const B=$+P*i[1],W=Math.floor(P*v),U=Math.floor(W-N/2);for(let G=0;G<h;G++){const q=B+G*i[2],K=Math.floor(G*I),H=Math.floor(K-k/2);for(let X=0;X<d;X++){let ee=0;for(let se=0;se<N;se++){const ie=se+U;if(ie<0||ie>=p)continue;const oe=$+ie*l[1],de=ie*b;if(P===Math.min(c-1,o?Math.round(de):Math.floor(de)))for(let me=0;me<k;me++){const Ce=me+H;if(Ce<0||Ce>=f)continue;const $e=oe+Ce*l[2],Te=Ce*w;G===Math.min(h-1,o?Math.round(Te):Math.floor(Te))&&(ee+=m[$e+X])}}g[q+X]=ee}}}}return e.makeTensorInfo(r.shape,r.dtype,g)}},TP={kernelName:Il,backendName:"cpu",kernelFunc:function kP(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{dims:a}=s;xe(r,"reverse");const o=r.shape.length,i=Ue(a,r.shape);if(0===o)return _s({inputs:{x:r},backend:e});const l=new Qt(r.shape,r.dtype),u=e.bufferSync(r);for(let c=0;c<l.size;c++){const h=l.indexToLoc(c),d=h.slice();i.forEach(p=>d[p]=r.shape[p]-1-d[p]),l.set(u.get(...d),...h)}return e.makeTensorInfo(l.shape,l.dtype,l.values)}},_P={kernelName:xh,backendName:"cpu",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{image:s}=n,{radians:r,fillValue:a,center:o}=t,i=e,l=on(s.dtype,L(s.shape)),[u,c,h,d]=s.shape,[p,f]=Fd(o,c,h),m=Math.sin(r),y=Math.cos(r),x=i.data.get(s.dataId).values;for(let w=0;w<u;w++){const v=w*h*c*d;for(let I=0;I<c;I++){const N=I*(h*d);for(let k=0;k<h;k++){const _=k*d;for(let $=0;$<d;$++){const P=[u,I,k,$],B=P[2],W=P[1];let U=(B-p)*y-(W-f)*m,G=(B-p)*m+(W-f)*y;U=Math.round(U+p),G=Math.round(G+f);let q=a;"number"!=typeof a&&(q=3===$?255:a[$]),U>=0&&U<h&&G>=0&&G<c&&(q=x[v+G*(h*d)+U*d+$]),l[v+N+_+$]=q}}}}return{dataId:i.write(l,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},$P=rt(Co,n=>{const t=Math.floor(n);return n-t<.5?Math.floor(n):n-t>.5?Math.ceil(n):t%2==0?t:t+1}),EP={kernelName:Co,backendName:"cpu",kernelFunc:$P},P0=Ts(n=>1/Math.sqrt(n)),AP=dr(ko,P0),RP={kernelName:ko,backendName:"cpu",kernelFunc:AP};function jr(n,t,e,s,r,a,o,i,l,u){const c=[s/r,r],h=n.values,d=t.values;if(0===s)return Ge(e,t.dtype);const p=l instanceof Qt?l:Ge(c,t.dtype);"string"==typeof l||"number"==typeof l?p.values.fill(l):"boolean"==typeof l&&p.values.fill(+l);for(let f=0;f<a;f++){const g=[];let m=0;for(let y=0;y<o;y++){const x=h[f*o+y];g.push(x),m+=x*i[y]}if(m<0||m>=s/r)throw new Error(`Invalid indices: ${g} does not index into ${e}`);for(let y=0;y<r;y++)u?p.values[m*r+y]+=d[f*r+y]:p.values[m*r+y]=0===t.rank?d[0]:d[f*r+y]}return p}const FP={kernelName:Zf,backendName:"cpu",kernelFunc:function DP(n){const{inputs:t,backend:e,attrs:s}=n,{indices:r,updates:a}=t,{shape:o}=s,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=Pr(0,r,o),g=jr(e.bufferSync(r),e.bufferSync(a),o,h,u,l,i,c,0,!0);return e.makeTensorInfo(o,g.dtype,g.values)}};function OP(n,t){let e=0,s=n.length,r=0;for(;e<s;)r=Math.floor((e+s)/2),n[r]<t?e=r+1:s=r;return s}function PP(n,t){let e=0,s=n.length,r=0;for(;e<s;)r=Math.floor((e+s)/2),n[r]<=t?e=r+1:s=r;return s}const MP={kernelName:Qf,backendName:"cpu",kernelFunc:function VP(n){const{inputs:t,backend:e,attrs:s}=n,{sortedSequence:r,values:a}=t,{side:o}=s,u=function LP(n,t,e,s,r,a){const o=_t("int32",e*r);for(let i=0;i<e;++i){const l=n.slice(i*s,(i+1)*s),u=i*r;for(let c=0;c<r;++c)o[u+c]="left"===a?OP(l,t[c+u]):PP(l,t[c+u])}return o}(e.data.get(r.dataId).values,e.data.get(a.dataId).values,r.shape[0],r.shape[1],a.shape[1],o);return e.makeTensorInfo(a.shape,"int32",u)}},BP={kernelName:Nl,backendName:"cpu",kernelFunc:function zP(n){const{inputs:t,backend:e}=n,{condition:s,t:r,e:a}=t;xe([s,r,a],"select");const o=s.shape.length,i=e.data.get(s.dataId).values,l=e.data.get(r.dataId).values,u=e.data.get(a.dataId).values,c=Tn(r.dtype,a.dtype),h=ln(L(r.shape),c);let d=0;const p=0===o||o>1||1===r.shape.length?1:L(r.shape.slice(1));for(let f=0;f<i.length;f++)for(let g=0;g<p;g++)h[d++]=1===i[f]?l[f]:u[f];return e.makeTensorInfo(r.shape,c,h)}},WP=cu,UP=hu,GP=rt(To,n=>n>=0?UP*n:WP*(Math.exp(n)-1)),HP={kernelName:To,backendName:"cpu",kernelFunc:GP},jP=rt(Eo,n=>n<0?-1:n>0?1:0),qP={kernelName:Eo,backendName:"cpu",kernelFunc:jP},KP=rt(_o,n=>Math.sin(n)),XP={kernelName:_o,backendName:"cpu",kernelFunc:KP},YP=rt($o,n=>Math.sinh(n)),ZP={kernelName:$o,backendName:"cpu",kernelFunc:YP},L0=Math.log(1.1920928955078125e-7)+2,JP=rt(Ro,n=>{const t=n>-L0,e=n<L0,s=Math.exp(n);let r;return r=e?s:t?n:Math.log(1+s),r}),QP={kernelName:Ro,backendName:"cpu",kernelFunc:JP},tL={kernelName:Tl,backendName:"cpu",kernelFunc:function eL(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockShape:a,paddings:o}=s;xe([r],"spaceToBatchND");const i=L(a),l=[[0,0]];l.push(...o);for(let I=1+a.length;I<r.shape.length;++I)l.push([0,0]);const u=k0.kernelFunc({inputs:{x:r},backend:e,attrs:{paddings:l,constantValue:0}}),c=ri(u.shape,a,i,!1),h=ai(c.length,a.length,!1),d=oi(u.shape,a,i,!1),g=pt({inputs:{x:u},backend:e,attrs:{shape:c}}),x=kn({inputs:{x:g},backend:e,attrs:{perm:h}}),v=pt({inputs:{x},backend:e,attrs:{shape:d}});return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(x),v}};function V0(n,t,e,s,r,a,o){const i=t[0],l=a[0],u=new Array(l),c=new Array(i),h=t[1];if(0===l){if(0!==i)throw new Error(ny(i));return[_t(e,0),[0,h],_t(r,0),u,c]}let d=!0,p=0;const f=new Array(l).fill(0);for(let m=0;m<i;++m){const y=n[m*h];if(y<0)throw new Error(sy(m,y));if(y>=l)throw new Error(ry(m,y,l));++f[y],d=d&&y>=p,p=y}let g=!0;for(let m=0;m<l;++m){const y=0===f[m];u[m]=y,g=g&&!y,f[m]=Math.max(f[m],1),m>0&&(f[m]+=f[m-1])}if(g&&d){const m=n,y=s;for(let x=0;x<i;++x)c[x]=x;return[m,[i,h],y,u,c]}{const m=f[l-1],y=_t(e,m*h),x=_t(r,m),b=new Array(l).fill(0);for(let w=0;w<i;++w){const v=n[w*h],N=(0===v?0:f[v-1])+b[v];b[v]++;for(let k=0;k<h;++k)y[N*h+k]=n[w*h+k];x[N]=s[w],c[w]=N}for(let w=0;w<l;++w)if(0===b[w]){const I=0===w?0:f[w-1];y[I*h+0]=w;for(let N=1;N<h;++N)y[I*h+N]=0;x[I]=o}return[y,[m,h],x,u,c]}}const sL={kernelName:oh,backendName:"cpu",kernelFunc:function nL(n){const{inputs:t,backend:e}=n,{indices:s,values:r,denseShape:a,defaultValue:o}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${a.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n        ${r.shape}`);if(0!==o.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${o.shape}`);const i=e.data.get(s.dataId).values,l=e.data.get(r.dataId).values,u=e.data.get(a.dataId).values,c=e.data.get(o.dataId).values[0],[h,d,p,f,g]=V0(i,s.shape,s.dtype,l,r.dtype,u,c);return[e.makeTensorInfo(d,s.dtype,h),e.makeTensorInfo([d[0]],r.dtype,p),e.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(m=>Number(m)))),e.makeTensorInfo([g.length],s.dtype,new Int32Array(g))]}};function M0(n,t,e,s,r){const a=L(s),o=t[0],i=r.length,l=[];let u=1,c=-1;for(let m=0;m<i;++m){const y=r[m];if(-1===y){if(-1!==c)throw new Error(ay(c,m));c=m,l.push(1)}else{if(y<0)throw new Error(oy(m,y));u*=y,l.push(y)}}if(-1!==c){if(u<=0)throw new Error("reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero");const m=Math.trunc(a/u);if(u*m!==a)throw new Error(ly(s,l));l[c]=m}if(L(l)!==a)throw new Error(uy(s,l));const d=s.length,p=[];if(d>0){p[d-1]=1;for(let m=d-2;m>=0;--m)p[m]=p[m+1]*s[m+1]}const f=[];if(i>0){f[i-1]=1;for(let m=i-2;m>=0;--m)f[m]=f[m+1]*l[m+1]}const g=_t(e,o*i);for(let m=0;m<o;++m){let y=0;for(let x=0;x<d;++x)y+=n[m*d+x]*p[x];for(let x=0;x<i;++x)g[m*i+x]=Math.trunc(y/f[x]),y%=f[x]}return[g,[o,i],l]}const aL={kernelName:ih,backendName:"cpu",kernelFunc:function rL(n){const{inputs:t,backend:e}=n,{inputIndices:s,inputShape:r,newShape:a}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${r.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const o=Array.from(e.data.get(r.dataId).values),i=e.data.get(s.dataId).values,l=Array.from(e.data.get(a.dataId).values),[u,c,h]=M0(i,s.shape,s.dtype,o,l);return[e.makeTensorInfo(c,s.dtype,u),e.makeTensorInfo([h.length],a.dtype,new Int32Array(h))]}};function ff(n,t,e,s,r,a=!1,o=0){const i=s.length,l=[t[0],n.length/t[0]],u=l[1],h=i>0?r[i-1]+1:0;if(h<0)throw new Error("segment ids must be >= 0");const d=t.slice();d[0]=h;const f=_t(e,d.reduce((b,w)=>b*w,1));if(0===i)return h>0&&f.fill(o),[f,d];if(h<=0)throw new Error("segment ids must be >= 0");let g=0,m=1,y=0,x=r[g];for(;;){let b=0;if(m<i){if(b=r[m],x===b){++m;continue}if(x>=b)throw new Error("segment ids are not increasing")}if(x<0||x>=h)throw new Error(hy(x,h));x>y&&f.fill(o,y*u,x*u);for(let w=g;w<m;++w){const v=s[w];if(v<0||v>=l[0])throw new Error(dy(w,s[w],l[0]));for(let I=0;I<u;I++)f[x*u+I]+=n[v*u+I]}if(a)for(let w=0;w<u;w++)f[x*u+w]/=m-g;if(g=m,++m,y=x+1,x=b,m>i)break}return y<h&&f.fill(o,y*u,h*u),[f,d]}const iL={kernelName:lh,backendName:"cpu",kernelFunc:function oL(n){const{inputs:t,backend:e}=n,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${a.shape}`);if(r.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const o=e.data.get(s.dataId).values,i=e.data.get(r.dataId).values,l=e.data.get(a.dataId).values,[u,c]=ff(o,s.shape,s.dtype,i,l,!0);return e.makeTensorInfo(c,s.dtype,u)}},uL={kernelName:uh,backendName:"cpu",kernelFunc:function lL(n){const{inputs:t,backend:e}=n,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${a.shape}`);if(r.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const o=e.data.get(s.dataId).values,i=e.data.get(r.dataId).values,l=e.data.get(a.dataId).values,[u,c]=ff(o,s.shape,s.dtype,i,l);return e.makeTensorInfo(c,s.dtype,u)}},hL={kernelName:em,backendName:"cpu",kernelFunc:function cL(n){const{inputs:t,backend:e,attrs:s}=n,{sparseIndices:r,sparseValues:a,defaultValue:o}=t,{outputShape:i}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:d}=Pr(0,r,i),p=!1,f=e.bufferSync(r);let g;switch(a.dtype){case"bool":g=jr(f,e.bufferSync(a),i,d,c,u,l,h,!!e.data.get(o.dataId).values[0],p);break;case"float32":case"int32":g=jr(f,e.bufferSync(a),i,d,c,u,l,h,e.data.get(o.dataId).values[0],p);break;case"string":g=jr(f,e.bufferSync(a),i,d,c,u,l,h,Xs(e.data.get(o.dataId).values[0]),p);break;default:throw new Error(`Unsupported type ${a.dtype}`)}return e.makeTensorInfo(i,g.dtype,g.values)}},pL={kernelName:_l,backendName:"cpu",kernelFunc:function dL(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{numOrSizeSplits:a,axis:o}=s,i=Ue(o,r.shape)[0],l=Zd(r,a,i),u=new Array(r.shape.length).fill(0),c=r.shape.slice();return l.map(h=>{const d=[...c];d[i]=h;const p=Hr({inputs:{x:r},backend:e,attrs:{begin:u,size:d}});return u[i]+=h,p})}},fL=Ts(n=>Math.sqrt(n)),mL=rt(Do,n=>Math.sqrt(n)),gL={kernelName:Do,backendName:"cpu",kernelFunc:mL},yL={kernelName:ch,backendName:"cpu",kernelFunc:({inputs:n,backend:t})=>{const{x:e}=n,s=t;xe(e,"square");const r=s.data.get(e.dataId).values,a=new Float32Array(r.length);for(let i=0;i<r.length;++i){const l=r[i];a[i]=l*l}return{dataId:s.write(a,e.shape,e.dtype),shape:e.shape,dtype:e.dtype}}},xL=Dt((n,t)=>{const e=n-t;return e*e}),bL=Wt(Fo,xL),wL={kernelName:Fo,backendName:"cpu",kernelFunc:bL},z0=Ts((n,t)=>{const{pattern:e,replaceGlobal:s,rewrite:r}=t;return n.replace(new RegExp(e,s?"g":""),r)}),SL={kernelName:El,backendName:"cpu",kernelFunc:dr(El,z0)},IL=rt(Mo,(n,t)=>{const e=t;return isNaN(n)?NaN:n>0?1:e.alpha}),NL={kernelName:Mo,backendName:"cpu",kernelFunc:IL};function B0(n,t,e,s){const r=Ge(n,t.dtype);for(let a=0;a<r.size;a++){const o=r.indexToLoc(a),i=new Array(o.length);for(let l=0;l<i.length;l++)i[l]=o[l]*e[l]+s[l];r.set(t.get(...i),...o)}return r}const kL={kernelName:hh,backendName:"cpu",kernelFunc:function CL(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{begin:a,end:o,strides:i,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:d}=s;xe(r,"stridedSlice");const{finalShapeSparse:p,finalShape:f,isIdentity:g,sliceDim0:m,isSimpleSlice:y,begin:x,end:b,strides:w}=ed(r.shape,a,o,i,l,u,c,h,d);let v;if(g)v=pt({inputs:{x:r},backend:e,attrs:{shape:f}});else if(m||y){S(r.shape.length>=1,()=>`Input must have rank at least 1, got: ${r.shape.length}`);const I=Zh(x,b,w),N=Hr({inputs:{x:r},backend:e,attrs:{begin:x,size:I}});v=pt({inputs:{x:N},backend:e,attrs:{shape:f}}),e.disposeIntermediateTensorInfo(N)}else{const N=B0(p,e.bufferSync(r),w,x);v=e.makeTensorInfo(f,N.dtype,N.values)}return v}};class TL{constructor(t,e,s,r,a,o){this.separator=Ks(t),this.nGramWidths=e,this.leftPad=Ks(s),this.rightPad=Ks(r),this.padWidth=a,this.preserveShort=o}getPadWidth(t){return Math.min(this.padWidth<0?t-1:this.padWidth,t-1)}getNumNGrams(t,e){const s=this.getPadWidth(e);return Math.max(0,t+2*s-e+1)}createNGrams(t,e,s,r,a,o){for(let i=0;i<a;++i){const l=this.getPadWidth(o),u=Math.max(0,l-i),c=Math.max(0,l-(a-(i+1))),h=o-(u+c),d=e+(u>0?0:i-l);let p=0;p+=u*this.leftPad.length;for(let x=0;x<h;++x)p+=t[d+x].length;p+=c*this.rightPad.length,p+=(u+c+h-1)*this.separator.length,s[r+i]=new Uint8Array(p);const g=s[r+i];let m=0;const y=x=>x.forEach(b=>g[m++]=b);for(let x=0;x<u;++x)y(this.leftPad),y(this.separator);for(let x=0;x<h-1;++x)y(t[d+x]),y(this.separator);if(h>0){y(t[d+h-1]);for(let x=0;x<c;++x)y(this.separator),y(this.rightPad)}else{for(let x=0;x<c-1;++x)y(this.rightPad),y(this.separator);y(this.rightPad)}}}compute(t,e){const s=t.length,r=e.length;if(r>0){let l=e[0];if(0!==l)throw new Error(`First split value must be 0, got ${l}`);for(let u=1;u<r;++u){let c=e[u]>=l;if(c=c&&e[u]<=s,!c)throw new Error(`Invalid split value ${e[u]}, must be in [${l}, ${s}]`);l=e[u]}if(l!==s)throw new Error(`Last split value must be data size. Expected ${s}, got ${l}`)}const a=r-1,o=_t("int32",r);if(0===s||0===r){const l=new Array(s);for(let u=0;u<=a;++u)o[u]=0;return[l,o]}o[0]=0;for(let l=1;l<=a;++l){const u=e[l]-e[l-1];let c=0;this.nGramWidths.forEach(h=>{c+=this.getNumNGrams(u,h)}),this.preserveShort&&u>0&&0===c&&(c=1),o[l]=o[l-1]+c}const i=new Array(o[a]);for(let l=0;l<a;++l){const u=e[l];let c=o[l];if(this.nGramWidths.forEach(h=>{const p=this.getNumNGrams(e[l+1]-e[l],h);this.createNGrams(t,u,i,c,p,h),c+=p}),this.preserveShort&&c===o[l]){const h=e[l+1]-e[l];if(0===h)continue;this.createNGrams(t,u,i,c,1,h+2*this.padWidth)}}return[i,o]}}function W0(n,t,e,s,r,a,o,i){return new TL(e,s,r,a,o,i).compute(n,t)}const $L={kernelName:dh,backendName:"cpu",kernelFunc:function _L(n){const{inputs:t,backend:e,attrs:s}=n,{separator:r,nGramWidths:a,leftPad:o,rightPad:i,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,d=e.data.get(c.dataId).values,p=e.data.get(h.dataId).values,[f,g]=W0(d,p,r,a,o,i,l,u);return[e.makeTensorInfo([f.length],"string",f),e.makeTensorInfo(h.shape,"int32",g)]}};function EL(n,t,e,s){if(!n.length)return;if(0===t.length){for(let a=0;a<n.length;++a)s.push(n.subarray(a,a+1));return}if(1===t.length){const a=t[0];let o=n.indexOf(a);for(;-1!==o;){const i=n.subarray(0,o);(!e||0!==i.length)&&s.push(i),o=(n=n.subarray(o+1)).indexOf(a)}return void((!e||0!==n.length)&&s.push(n))}let r=0;for(let a=0;a<n.length+1;a++)if(a===n.length||-1!==t.indexOf(n[a])){const o=n.subarray(r,a);(!e||0!==o.length)&&s.push(o),r=a+1}}function U0(n,t,e){const s=n.length,r=[];let a=0,o=0;const i=new Array(s);for(let d=0;d<s;++d){const p=r.length;EL(n[d],t,e,r);const f=r.length-p;i[d]=f,a+=f,o=Math.max(o,f)}const l=_t("int32",2*a),u=new Array(a),c=[s,o];let h=0;for(let d=0;d<s;++d)for(let p=0;p<i[d];++p)l[2*h]=d,l[2*h+1]=p,u[h]=r[h],++h;return[l,u,c]}const RL={kernelName:ph,backendName:"cpu",kernelFunc:function AL(n){const{inputs:t,backend:e,attrs:s}=n,{skipEmpty:r}=s,{input:a,delimiter:o}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==o.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);const i=e.data.get(a.dataId).values,l=e.data.get(o.dataId).values[0],[u,c,h]=U0(i,l,r),d=c.length;return[e.makeTensorInfo([d,2],"int32",u),e.makeTensorInfo([d],"string",c),e.makeTensorInfo([2],"int32",new Int32Array(h))]}};function G0(n,t){const e=_t("int32",n.length);for(let s=0;s<n.length;++s)e[s]=L1(n[s]).modulo(t).getLowBitsUnsigned();return e}const FL={kernelName:fh,backendName:"cpu",kernelFunc:function DL(n){const{inputs:t,backend:e,attrs:s}=n,{numBuckets:r}=s,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const i=G0(e.data.get(a.dataId).values,r);return e.makeTensorInfo(a.shape,"int32",i)}},OL=rt(Po,n=>Math.tan(n)),PL={kernelName:Po,backendName:"cpu",kernelFunc:OL},LL=rt(Lo,n=>Math.tanh(n));function H0(n,t){const e=new Array(n.rank);for(let r=0;r<e.length;r++)e[r]=n.shape[r]*t[r];const s=Ge(e,n.dtype);for(let r=0;r<s.values.length;++r){const a=s.indexToLoc(r),o=new Array(n.rank);for(let l=0;l<o.length;l++)o[l]=a[l]%n.shape[l];const i=n.locToIndex(o);s.values[r]=n.values[i]}return s}const vi=(n,t)=>{const e=t.value-n.value;return 0===e?n.index-t.index:e};function j0(n,t,e=0,s=n.length-1){for(;s>e;){if(s-e>600){const i=s-e+1,l=t-e+1,u=Math.log(i),c=.5*Math.exp(2*u/3),h=.5*Math.sqrt(u*c*(i-c)/i)*Math.sign(l-i/2);j0(n,t,Math.max(e,Math.floor(t-l*c/i+h)),Math.min(s,Math.floor(t+(i-l)*c/i+h)))}const r=n[t];let a=e,o=s;for(Y(n,e,t),vi(n[s],r)>0&&Y(n,e,s);a<o;){for(Y(n,a,o),a++,o--;vi(n[a],r)<0;)a+=1;for(;vi(n[o],r)>0;)o-=1}0===vi(n[e],r)?Y(n,e,o):(o+=1,Y(n,o,s)),o<=t&&(e=o+1),t<=o&&(s=o-1)}}function q0(n,t,e,s,r){const a=t[t.length-1],[o,i]=[n.length/a,a],l=on(e,o*s),u=on("int32",o*s);for(let h=0;h<o;h++){const d=h*i,p=n.subarray(d,d+i);let f=new Array(p.length);p.forEach((x,b)=>f[b]={value:x,index:b}),s<f.length&&(j0(f,s),f=f.slice(0,s)),r&&f.sort(vi);const g=h*s,m=l.subarray(g,g+s),y=u.subarray(g,g+s);for(let x=0;x<s;x++)m[x]=f[x].value,y[x]=f[x].index}const c=t.slice();return c[c.length-1]=s,[Ge(c,e,l),Ge(c,"int32",u)]}function K0(n,t,e){switch(e){case"reflect":return function qL(n,t){let e=n;if(e<0)if(t<=1)e=0;else{const s=2*t;e<s&&(e=s*Math.trunc(-e/s)+e),e=e<-t?e+s:-e-1}else if(e>t-1)if(t<=1)e=0;else{const s=2*t;e-=s*Math.trunc(e/s),e>=t&&(e=s-e-1)}return qe(0,e,t-1)}(n,t);case"wrap":return function KL(n,t){let e=n;return e<0?t<=1?e=0:e+=t*(Math.trunc(-e/(t-1))+1):e>t-1&&(t<=1?e=0:e-=t*Math.trunc(e/(t-1))),qe(0,e,t-1)}(n,t);case"nearest":return function YL(n,t){return qe(0,n,t-1)}(n,t);default:return function XL(n,t){return n}(n)}}function Si(n,t,e,s,r,a,o,i,l,u,c){return 0<=i&&i<t&&0<=l&&l<e?n[o*s+i*r+l*a+u]:c}function ZL(n,t,e,s,r,a,o,i,l,u,c){return Si(n,t,e,s,r,a,o,Math.round(i),Math.round(l),u,c)}function JL(n,t,e,s,r,a,o,i,l,u,c){const h=Math.floor(i),d=Math.floor(l),p=h+1,f=d+1;return(p-i)*((f-l)*Si(n,t,e,s,r,a,o,h,d,u,c)+(l-d)*Si(n,t,e,s,r,a,o,h,f,u,c))+(i-h)*((f-l)*Si(n,t,e,s,r,a,o,p,d,u,c)+(l-d)*Si(n,t,e,s,r,a,o,p,f,u,c))}function X0(n,t,e,s){const r=Ue(t,e)[0],a=[1,e[0],1];for(let f=0;f<r;f++)a[0]*=e[f];a[1]=e[r];for(let f=r+1;f<e.length;f++)a[2]*=e[f];const o=new Map,i=new Int32Array(e[r]),l=new Qt(a,s,n),u=[],c=1===a[0]&&1===a[2];for(let f=0;f<e[r];f++){let g;if(c)g=n[f].toString();else{const y=[];for(let x=0;x<a[0];x++)for(let b=0;b<a[2];b++)y.push(l.get(x,f,b));g=y.join(",")}const m=o.get(g);if(null!=m)i[f]=m;else{const y=o.size;o.set(g,y),i[f]=y,u.push(f)}}const h=a.slice();h[1]=o.size;const d=new Qt(h,s);u.forEach((f,g)=>{for(let m=0;m<a[0];m++)for(let y=0;y<a[2];y++)d.set(l.get(m,f,y),m,g,y)});const p=e.slice();return p[r]=h[1],{outputValues:d.values,outputShape:p,indices:i}}const aV=[ZA,JA,eR,nR,qA,rR,iR,uR,hR,pR,mR,yR,bR,SR,NR,TR,$R,AR,DR,XA,OR,VR,zR,WR,GR,HA,jR,KR,UA,XR,ZR,JR,eD,nD,rD,oD,lD,cD,dD,fD,gD,xD,wD,SD,ID,CD,TD,$D,ED,AD,RD,FD,MD,FA,BD,WD,YD,ZD,JD,eF,lF,uF,hF,pF,gF,xF,wF,SF,NF,kF,_F,OA,EF,YR,RF,FF,PF,PA,VF,zF,WF,GF,jF,XF,ZF,eO,nO,rO,aO,iO,uO,hO,pO,mO,yO,bO,vO,IO,CO,_O,AO,PD,DO,PO,MO,WO,GO,jO,KO,XO,k0,QO,VA,tP,uP,hP,pP,mP,GA,cf,yP,MA,zA,KA,bP,vP,IP,CP,TP,_P,EP,RP,FP,MP,BP,HP,WA,qP,XP,ZP,PR,$O,QP,tL,sL,aL,iL,uL,hL,pL,gL,yL,wL,SL,NL,kL,$L,RL,FL,sF,LD,PL,{kernelName:Lo,backendName:"cpu",kernelFunc:LL},{kernelName:Jf,backendName:"cpu",kernelFunc:function ML(n){const{inputs:t,backend:e}=n,{tensor:s,indices:r,updates:a}=t,{sliceRank:o,numUpdates:i,sliceSize:l,strides:u,outputSize:c}=Pr(0,r,s.shape),d=e.bufferSync(r),p=e.bufferSync(a),f=e.bufferSync(s),g=jr(d,p,s.shape,c,l,i,o,u,f,!1);return e.makeTensorInfo(s.shape,g.dtype,g.values)}},{kernelName:Vo,backendName:"cpu",kernelFunc:function BL(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{reps:a}=s;xe(r,"tile");const o=H0(e.bufferSync(r),a);return e.makeTensorInfo(o.shape,o.dtype,o.values)}},{kernelName:mh,backendName:"cpu",kernelFunc:function UL(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{k:a,sorted:o}=s;xe(r,"topk");const i=e.data.get(r.dataId).values,[l,u]=q0(i,r.shape,r.dtype,a,o);return[e.makeTensorInfo(l.shape,l.dtype,l.values),e.makeTensorInfo(u.shape,u.dtype,u.values)]}},{kernelName:gh,backendName:"cpu",kernelFunc:function HL(n){const{inputs:t,attrs:e,backend:s}=n,{image:r,transforms:a}=t,{interpolation:o,fillMode:i,fillValue:l,outputShape:u}=e,[c,h,d,p]=r.shape,[f,g]=u??[h,d],m=[c,f,g,p],y=Ne(r.shape),x=y[0],b=y[1],w=y[2],v=Ne(m),I=v[0],N=v[1],k=v[2],_=on(r.dtype,L(m));_.fill(l);const $=s.data.get(r.dataId).values,P=s.data.get(a.dataId).values;for(let W=0;W<c;++W){const U=1===a.shape[0]?P:P.subarray(8*W,8*W+8);for(let G=0;G<f;++G)for(let q=0;q<g;++q)for(let K=0;K<p;++K){let H;const X=U[6]*q+U[7]*G+1;if(0===X)continue;const se=(U[3]*q+U[4]*G+U[5])/X,ie=K0((U[0]*q+U[1]*G+U[2])/X,d,i),oe=K0(se,h,i);switch(o){case"nearest":H=ZL($,h,d,x,b,w,W,oe,ie,K,l);break;case"bilinear":H=JL($,h,d,x,b,w,W,oe,ie,K,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${o}`)}_[W*I+G*N+q*k+K]=H}return s.makeTensorInfo(m,r.dtype,_)}return{dataId:s.write(_,m,r.dtype),shape:r.shape,dtype:r.dtype}}},aR,{kernelName:yh,backendName:"cpu",kernelFunc:function QL(n){const{inputs:t,attrs:e,backend:s}=n,{axis:r}=e,{x:a}=t;xe(a,"unique");const o=s.data.get(a.dataId).values,{outputValues:i,outputShape:l,indices:u}=X0(o,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,i),s.makeTensorInfo([u.length],"int32",u)]}},{kernelName:Al,backendName:"cpu",kernelFunc:function tV(n){const{inputs:t,backend:e,attrs:s}=n,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const o=r.shape.length,i=r.shape[a],l=new Array(o-1);let u=0;for(let p=0;p<o;p++)p!==a&&(l[u++]=r.shape[p]);const c=new Array(o).fill(0),h=r.shape.slice();h[a]=1;const d=new Array(i);for(let p=0;p<d.length;p++){c[a]=p;const f=Hr({inputs:{x:r},backend:e,attrs:{begin:c,size:h}});d[p]=pt({inputs:{x:f},backend:e,attrs:{shape:l}}),e.disposeIntermediateTensorInfo(f)}return d}},{kernelName:Rl,backendName:"cpu",kernelFunc:function sV(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,segmentIds:a}=t,{numSegments:o}=s;xe(r,"unsortedSegmentSum");const u=[],c=[],h=r.shape.length-a.shape.length;let d=a;for(let f=0;f<h;++f){const g=Hu({inputs:{input:d},backend:e,attrs:{dim:f+1}});d=g,c.push(g)}for(let f=0;f<o;++f){const g=qs(f,"int32"),m=e.makeTensorInfo([],"int32",g),y=n0({inputs:{a:m,b:d},backend:e}),x=pr({inputs:{x:y},backend:e,attrs:{dtype:"float32"}}),b=Gu({inputs:{a:x,b:r},backend:e}),w=wi({inputs:{x:b},backend:e,attrs:{axis:0,keepDims:!1}});u.push(w),c.push(m),c.push(y),c.push(x),c.push(b),c.push(w)}const p=C0({inputs:u,backend:e,attrs:{axis:0}});return c.forEach(f=>e.disposeIntermediateTensorInfo(f)),p}},qO];for(const n of aV)wh(n);const fr={},Ku={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function us(n,t){if(!(n in fr)||null!=t){const s=function lV(n,t){if(1!==n&&2!==n)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const e=t??function iV(n){if(!M().getBool("IS_SAFARI")&&typeof OffscreenCanvas<"u"&&2===n)return new OffscreenCanvas(300,150);if(typeof document<"u")return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(n);return e.addEventListener("webglcontextlost",s=>{s.preventDefault(),delete fr[n]},!1),M().getBool("SOFTWARE_WEBGL_ENABLED")&&(Ku.failIfMajorPerformanceCaveat=!1),1===n?e.getContext("webgl",Ku)||e.getContext("experimental-webgl",Ku):e.getContext("webgl2",Ku)}(n,t);if(null===s)return console.log("Could not get context for WebGL version",n),null;fr[n]=s}const e=fr[n];return null==e||e.isContextLost()?(delete fr[n],us(n)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),fr[n])}var Xu=function(n){return n[n.DENSE=0]="DENSE",n[n.SHARED_BATCH=1]="SHARED_BATCH",n}(Xu||{}),Zn=function(n){return n[n.RENDER=0]="RENDER",n[n.UPLOAD=1]="UPLOAD",n[n.PIXELS=2]="PIXELS",n[n.DOWNLOAD=3]="DOWNLOAD",n}(Zn||{}),cn=function(n){return n[n.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",n[n.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",n[n.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",n[n.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",n[n.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16",n}(cn||{});function Ii(n,t){return[t,n]}function Yu(n){const t=L(n);return an(Math.ceil(t/4))}function Ea(n,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(n/2))]}function mf(n,t){const e=n;let s,r,a,o,i,l,u,c,h,d;return 2===M().getNumber("WEBGL_VERSION")?(s=e.R32F,r=e.R16F,a=e.RGBA16F,o=e.RGBA32F,i=e.RED,u=4,c=1,h=e.HALF_FLOAT,d=e.FLOAT,l=e.RGBA8):(s=n.RGBA,r=n.RGBA,a=n.RGBA,o=e.RGBA,i=n.RGBA,u=4,c=4,h=null!=t?t.HALF_FLOAT_OES:null,d=n.FLOAT,l=n.RGBA),{internalFormatFloat:s,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:o,textureFormatFloat:i,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:d}}function ce(n,t){const e=t();return M().getBool("DEBUG")&&function hV(n){const t=n.getError();if(t!==n.NO_ERROR)throw new Error("WebGL Error: "+function mV(n,t){switch(t){case n.NO_ERROR:return"NO_ERROR";case n.INVALID_ENUM:return"INVALID_ENUM";case n.INVALID_VALUE:return"INVALID_VALUE";case n.INVALID_OPERATION:return"INVALID_OPERATION";case n.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case n.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case n.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(n,t))}(n),e}function fV(n){return!!(M().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===n||5.96e-8<Math.abs(n)&&Math.abs(n)<65504)}function Zu(n,t){return Ws(n,()=>n.getExtension(t),'Extension "'+t+'" not supported on this browser.')}const xV=/ERROR: [0-9]+:([0-9]+):/g;function Y0(n,t){const e=xV.exec(t);if(null==e)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(n);const s=+e[1],r=n.split("\n"),a=r.length.toString().length+2,o=r.map((h,d)=>ea((d+1).toString(),a)+h);let i=0;for(let h=0;h<o.length;h++)i=Math.max(o[h].length,i);const l=o.slice(0,s-1),u=o.slice(s-1,s),c=o.slice(s);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${ea(u[0],i)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}function gf(n,t){if(ce(n,()=>n.validateProgram(t)),!1===n.getProgramParameter(t,n.VALIDATE_STATUS))throw console.log(n.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function Z0(n,t,e,s,r,a,o){const i=n.getAttribLocation(t,e);return-1!==i&&(ce(n,()=>n.bindBuffer(n.ARRAY_BUFFER,s)),ce(n,()=>n.vertexAttribPointer(i,r,n.FLOAT,!1,a,o)),ce(n,()=>n.enableVertexAttribArray(i)),!0)}function $V(n,t,e,s){ce(n,()=>function kV(n,t,e){(function Q0(n,t){const e=n.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=t+n.TEXTURE0;if(s<n.TEXTURE0||s>e)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${e}].`)})(n,e),ce(n,()=>n.activeTexture(n.TEXTURE0+e)),ce(n,()=>n.bindTexture(n.TEXTURE_2D,t))}(n,t,s)),ce(n,()=>n.uniform1i(e,s))}function yf(n,t,e){ce(n,()=>n.bindFramebuffer(n.FRAMEBUFFER,e)),ce(n,()=>n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,t,0))}function J0(n,t){ce(n,()=>n.bindFramebuffer(n.FRAMEBUFFER,t)),ce(n,()=>n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,null,0))}function Ju(n){const t=n.checkFramebufferStatus(n.FRAMEBUFFER);if(t!==n.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function EV(n,t){switch(t){case n.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case n.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case n.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case n.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(n,t))}function Ws(n,t,e){const s=ce(n,()=>t());if(null==s)throw new Error(e);return s}function Aa(n,t=2){return L(n.slice(0,n.length-t))}function Ra(n){if(0===n.length)throw Error("Cannot get rows and columns of an empty shape array.");return[n.length>1?n[n.length-2]:1,n[n.length-1]]}function Qu(n){let t=[1,1,1];return 0===n.length||1===n.length&&1===n[0]||(t=[Aa(n),...Ra(n)]),t}function ec(n){return n%2==0}function tc(n,t){if(ke(n=n.slice(-2),t=t.slice(-2))||!n.length||!t.length||0===n[0]||0===n[1]||0===t[0]||0===t[1])return!0;if(n.length!==t.length){const e=n[n.length-1],s=t[t.length-1];if(e===s||ec(e)&&ec(s)&&(1===n[0]||1===t[0]))return!0}return n[1]===t[1]&&ec(n[0])&&ec(t[0])}let nc,sc;function Jn(n,t){return null!=n.getExtension(t)}function ew(n){try{if(null!=us(n))return!0}catch(t){return console.log("Error when getting WebGL context: ",t),!1}return!1}function xf(n){const t=mf(n),e=n.createTexture();n.bindTexture(n.TEXTURE_2D,e),n.texImage2D(n.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const a=n.createFramebuffer();n.bindFramebuffer(n.FRAMEBUFFER,a),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,e,0);const o=n.checkFramebufferStatus(n.FRAMEBUFFER)===n.FRAMEBUFFER_COMPLETE;return n.bindTexture(n.TEXTURE_2D,null),n.bindFramebuffer(n.FRAMEBUFFER,null),n.deleteTexture(e),n.deleteFramebuffer(a),o}function Ni(n,t){Array.isArray(n)||(n=[n]),n.forEach(e=>{null!=e&&S("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the WebGL backend.`)})}const we=M();function yn(){let n,t,e,s,r,a,o,i,l,u;return 2===M().getNumber("WEBGL_VERSION")?(n="#version 300 es",t="in",e="out",s="in",r="texture",a="outputColor",o="out vec4 outputColor;",i=M().getBool("WEBGL2_ISNAN_CUSTOM")?"\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ":"",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(n="",t="attribute",e="varying",s="varying",r="texture2D",a="gl_FragColor",o="",i="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:n,attribute:t,varyingVs:e,varyingFs:s,texture2D:r,output:a,defineOutput:o,defineSpecialNaN:i,defineSpecialInf:l,defineRound:u}}function qr(n,t,e="index"){const s=Ne(t);return s.map((r,a)=>`int ${n[a]} = ${e} / ${r}; ${a===s.length-1?`int ${n[a+1]} = ${e} - ${n[a]} * ${r}`:`index -= ${n[a]} * ${r}`};`).join("")}function rc(n,t,e="index"){const s=Ne(t);return s.map((r,a)=>`int ${n[a]} = ${e} / outShapeStrides[${a}]; ${a===s.length-1?`int ${n[a+1]} = ${e} - ${n[a]} * outShapeStrides[${a}]`:`index -= ${n[a]} * outShapeStrides[${a}]`};`).join("")}function bf(n){const t=Ne(n).map(e=>e.toString());return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}we.registerFlag("HAS_WEBGL",()=>we.getNumber("WEBGL_VERSION")>0),we.registerFlag("WEBGL_VERSION",()=>ew(2)?2:ew(1)?1:0),we.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),we.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===we.get("WEBGL_VERSION")),we.registerFlag("WEBGL_CPU_FORWARD",()=>!0),we.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),we.registerFlag("WEBGL_PACK",()=>we.getBool("HAS_WEBGL")),we.registerFlag("WEBGL_PACK_NORMALIZATION",()=>we.getBool("WEBGL_PACK")),we.registerFlag("WEBGL_PACK_CLIP",()=>we.getBool("WEBGL_PACK")),we.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>we.getBool("WEBGL_PACK")),we.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>we.getBool("WEBGL_PACK")),we.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>we.getBool("WEBGL_PACK")),we.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>we.getBool("WEBGL_PACK")),we.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>we.getBool("WEBGL_PACK")),we.registerFlag("WEBGL_PACK_REDUCE",()=>we.getBool("WEBGL_PACK")),we.registerFlag("WEBGL_LAZILY_UNPACK",()=>we.getBool("WEBGL_PACK")),we.registerFlag("WEBGL_CONV_IM2COL",()=>we.getBool("WEBGL_PACK")),we.registerFlag("WEBGL_PACK_CONV2DTRANSPOSE",()=>we.getBool("WEBGL_PACK")),we.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>function RV(n){if(null==nc){const t=us(n);nc=t.getParameter(t.MAX_TEXTURE_SIZE)}return nc}(we.getNumber("WEBGL_VERSION"))),we.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>function DV(n){if(null==sc){const t=us(n);sc=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,sc)}(we.getNumber("WEBGL_VERSION"))),we.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const n=we.getNumber("WEBGL_VERSION");return 0===n?0:function FV(n){if(0===n)return 0;let t;const e=us(n);return t=Jn(e,"EXT_disjoint_timer_query_webgl2")&&2===n?2:Jn(e,"EXT_disjoint_timer_query")?1:0,t}(n)}),we.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>we.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!vm()),we.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>function OV(n){if(0===n)return!1;const t=us(n);if(1===n){if(!Jn(t,"OES_texture_float"))return!1}else if(!Jn(t,"EXT_color_buffer_float"))return!1;return xf(t)}(we.getNumber("WEBGL_VERSION"))),we.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!we.getBool("WEBGL_FORCE_F16_TEXTURES")&&we.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),we.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>function PV(n){if(0===n)return!1;const t=us(n);if(1!==n){if(Jn(t,"EXT_color_buffer_float"))return xf(t);const s="EXT_color_buffer_half_float";if(Jn(t,s)){const r=t.getExtension(s);return function LV(n,t){const e=mf(n,t),s=n.createTexture();n.bindTexture(n.TEXTURE_2D,s),n.texImage2D(n.TEXTURE_2D,0,e.internalFormatHalfFloat,1,1,0,e.textureFormatFloat,e.textureTypeHalfFloat,null);const o=n.createFramebuffer();n.bindFramebuffer(n.FRAMEBUFFER,o),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,s,0);const i=n.checkFramebufferStatus(n.FRAMEBUFFER)===n.FRAMEBUFFER_COMPLETE;return n.bindTexture(n.TEXTURE_2D,null),n.bindFramebuffer(n.FRAMEBUFFER,null),n.deleteTexture(s),n.deleteFramebuffer(o),i}(t,r)}return!1}return!(!Jn(t,"OES_texture_float")||!Jn(t,"WEBGL_color_buffer_float"))&&xf(t)}(we.getNumber("WEBGL_VERSION"))),we.registerFlag("WEBGL_FENCE_API_ENABLED",()=>function VV(n){return 2===n&&null!=us(n).fenceSync}(we.getNumber("WEBGL_VERSION"))),we.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>we.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0),we.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,n=>{if("number"!=typeof n)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but got ${n}.`);if(n<0&&-1!==n)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${n}.`)}),we.registerFlag("WEBGL_FLUSH_THRESHOLD",()=>vm()?1:-1,n=>{if("number"!=typeof n)throw new Error(`WEBGL_FLUSH_THRESHOLD must be a number but got ${n}.`);if(n<0&&-1!==n)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${n}.`)}),we.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",()=>128),we.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",()=>!1),we.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e5),we.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",()=>128),we.registerFlag("WEBGL_EXP_CONV",()=>!1),we.registerFlag("SOFTWARE_WEBGL_ENABLED",()=>we.getBool("IS_TEST")),we.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",()=>1/0),we.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",()=>!1),we.registerFlag("WEBGL2_ISNAN_CUSTOM",()=>!1),we.registerFlag("ENGINE_COMPILE_ONLY",()=>!1);const tw="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:nw}=Ae;function BV(n,t,e){const s=[];if(n.forEach(p=>{const f=L(p.shapeInfo.logicalShape);if(p.shapeInfo.isUniform?s.push(`uniform float ${p.name}${f>1?`[${f}]`:""};`):(s.push(`uniform sampler2D ${p.name};`),s.push(`uniform int offset${p.name};`)),e.enableShapeUniforms){const{uniformShape:g}=vf(e.packedInputs,p.shapeInfo.logicalShape,p.shapeInfo.texShape);switch(g.length){case 1:s.push(`uniform int ${p.name}Shape;`);break;case 2:s.push(`uniform ivec2 ${p.name}Shape;`);break;case 3:s.push(`uniform ivec3 ${p.name}Shape;`);break;case 4:s.push(`uniform ivec4 ${p.name}Shape;`)}s.push(`uniform ivec2 ${p.name}TexShape;`)}}),e.enableShapeUniforms){switch(t.logicalShape.length){case 1:s.push("uniform int outShape;");break;case 2:s.push("uniform ivec2 outShape;"),s.push("uniform int outShapeStrides;");break;case 3:s.push("uniform ivec3 outShape;"),s.push("uniform ivec2 outShapeStrides;");break;case 4:s.push("uniform ivec4 outShape;"),s.push("uniform ivec3 outShapeStrides;")}s.push("uniform ivec2 outTexShape;")}e.customUniforms&&e.customUniforms.forEach(p=>{s.push(`uniform ${p.type} ${p.name}${p.arrayIndex?`[${p.arrayIndex}]`:""};`)});const r=s.join("\n"),a=n.map(p=>function WV(n,t,e=!1,s){let r="";r+=e?sw(n,s):Da(n,s);return n.shapeInfo.logicalShape.length<=t.logicalShape.length&&(r+=e?function vM(n,t){const e=n.name,s=e.charAt(0).toUpperCase()+e.slice(1),r="get"+s+"AtOutCoords",a=n.shapeInfo.logicalShape.length,o=t.logicalShape.length,i=nw(n.shapeInfo.logicalShape,t.logicalShape),l=it(o),u=o-a;let c;const h=["x","y","z","w","u","v"];c=0===a?"":o<2&&i.length>=1?"coords = 0;":i.map(x=>`coords.${h[x+u]} = 0;`).join("\n");let d="";d=o<2&&a>0?"coords":n.shapeInfo.logicalShape.map((x,b)=>`coords.${h[b+u]}`).join(", ");let p="return outputValue;";const g=1===L(n.shapeInfo.logicalShape),y=1===L(t.logicalShape);if(1!==a||g||y){if(g&&!y)p=1===o?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(i.length){const x=a-2,b=a-1;i.indexOf(x)>-1&&i.indexOf(b)>-1?p="return vec4(outputValue.x);":i.indexOf(x)>-1?p="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":i.indexOf(b)>-1&&(p="return vec4(outputValue.xx, outputValue.zz);")}}else p="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${r}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${s}(${d});\n      ${p}\n    }\n  `}(n,t):function SM(n,t){const e=n.name,s=e.charAt(0).toUpperCase()+e.slice(1),r="get"+s+"AtOutCoords",i=n.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!n.shapeInfo.isUniform&&i===l&&null==n.shapeInfo.flatOffset&&ke(n.shapeInfo.texShape,t.texShape))return`\n      float ${r}() {\n        return sampleTexture(${e}, resultUV);\n      }\n    `;const u=it(l),c=nw(n.shapeInfo.logicalShape,t.logicalShape),h=l-i;let d;const p=["x","y","z","w","u","v"];d=0===i?"":l<2&&c.length>=1?"coords = 0;":c.map(g=>`coords.${p[g+h]} = 0;`).join("\n");let f="";return f=l<2&&i>0?"coords":n.shapeInfo.logicalShape.map((g,m)=>`coords.${p[m+h]}`).join(", "),`\n    float ${r}() {\n      ${u} coords = getOutputCoords();\n      ${d}\n      return get${s}(${f});\n    }\n  `}(n,t)),r}(p,t,e.packedInputs,e.enableShapeUniforms)).join("\n"),o=t.texShape,i=yn(),l=function HV(n){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${n.texture2D}(textureSampler, uv).r;\n    }\n  `}(i);let u,c,h=function KV(n){return`${n.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${n.varyingFs} vec2 resultUV;\n    ${n.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${n.defineSpecialNaN}\n    ${n.defineSpecialInf}\n    ${n.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${XV}\n    ${YV}\n    ${ZV}\n  `}(i);return t.isPacked?(u=function UV(n,t,e){switch(n.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function QV(n,t,e){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===s[0]?e?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${s[1]}.0);\n      }\n    `:1===s[1]?e?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${s[0]}.0);\n      }\n    `:e?"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);\n    }\n  `}(0,t,e);case 2:return function iM(n,t,e){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(ke(n,t))return e?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));\n      }\n    `;const r=Math.ceil(n[1]/2);return e?"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(n,t,e);case 3:return function tM(n,t,e){if(e)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(n[2]/2),a=r*Math.ceil(n[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(n,t,e);default:return function sM(n,t,e){if(e)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(n[n.length-1]/2),a=r*Math.ceil(n[n.length-2]/2);let o=a,i="",l="b, r, c";for(let u=2;u<n.length-1;u++)o*=n[n.length-u-1],i=`\n      int b${u} = index / ${o};\n      index -= b${u} * ${o};\n    `+i,l=`b${u}, `+l;return`\n    ivec${n.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${n.length}(${l});\n    }\n  `}(n,t,e)}}(t.logicalShape,o,e.enableShapeUniforms),c=function qV(n){return`\n    void setOutput(vec4 val) {\n      ${n.output} = val;\n    }\n  `}(i)):(u=function GV(n,t,e){switch(n.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function eM(n,t,e){return 1===t[0]?e?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `:1===t[1]?e?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `:e?"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,e);case 2:return function lM(n,t,e){return ke(n,t)?e?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `:1===n[1]?e?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===n[0]?e?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:e?"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${n[1]};\n      int c = index - r * ${n[1]};\n      return ivec2(r, c);\n    }\n  `}(n,t,e);case 3:return function nM(n,t,e){if(e)return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${rc(["r","c","d"],n)}\n    return ivec3(r, c, d);\n  }\n`;const s=qr(["r","c","d"],n);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec3(r, c, d);\n    }\n  `}(n,t,e);case 4:return function rM(n,t,e){if(e)return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${rc(["r","c","d","d2"],n)}\n      return ivec4(r, c, d, d2);\n    }\n  `;const s=qr(["r","c","d","d2"],n);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec4(r, c, d, d2);\n    }\n  `}(n,t,e);case 5:return function aM(n,t){const e=qr(["r","c","d","d2","d3"],n);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${e}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(n,t);case 6:return function oM(n,t){const e=qr(["r","c","d","d2","d3","d4"],n);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${e}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(n,t);default:throw new Error(`${n.length}-D output sampling is not yet supported`)}}(t.logicalShape,o,e.enableShapeUniforms),c=function jV(n){return`\n    void setOutput(float val) {\n      ${n.output} = vec4(val, 0, 0, 0);\n    }\n  `}(i)),e.packedInputs&&(h+=JV),[h,l,c,r,u,a,e.userCode].join("\n")}function Da(n,t=!1){const e=n.shapeInfo.logicalShape;switch(e.length){case 0:return function cM(n,t){const e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1);if(n.shapeInfo.isUniform)return`float ${s}() {return ${e};}`;const[r,a]=n.shapeInfo.texShape;if(1===r&&1===a)return`\n      float ${s}() {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const o=Kr(e);if(t)return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], ${o});\n      return sampleTexture(${e}, uv);\n    }\n  `;const[i,l]=n.shapeInfo.texShape;return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${i}, ${l}, ${o});\n      return sampleTexture(${e}, uv);\n    }\n  `}(n,t);case 1:return function dM(n,t){const e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1);if(n.shapeInfo.isUniform)return`\n      float ${s}(int index) {\n        ${Fa(n)}\n      }\n    `;const r=n.shapeInfo.texShape,a=r[0],o=r[1];if(1===o&&1===a)return`\n      float ${s}(int index) {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const i=Kr(e);return 1===o?t?`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / float(${e}TexShape[0]));\n        return sampleTexture(${e}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${a}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `:1===a?t?`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / float(${e}TexShape[1]), 0.5);\n        return sampleTexture(${e}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${o}.0, 0.5);\n        return sampleTexture(${e}, uv);\n      }\n    `:t?`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], index + ${i});\n      return sampleTexture(${e}, uv);\n    }\n  `:`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${a}, ${o}, index + ${i});\n      return sampleTexture(${e}, uv);\n    }\n  `}(n,t);case 2:return function fM(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=n.shapeInfo.texShape;if(null!=a&&ke(e,a))return t?`\n      float ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${a[1]}.0, ${a[0]}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;const{newShape:o,keptDims:i}=Hs(e);if(o.length<e.length){const p=["row","col"];return`\n      ${Da(Oa(n,o),t)}\n      float ${r}(int row, int col) {\n        return ${r}(${Pa(p,i)});\n      }\n    `}if(n.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));\n        ${Fa(n)}\n      }\n    `;const u=a[0],c=a[1],h=Kr(s);return 1===c?t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${s}TexShape[0]));\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `:1===u?t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${s}TexShape[1]), 0.5);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${s}, uv);\n    }\n  `:t?`\n      float ${r}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s}Shape[1] + col + ${h};\n        vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${e[1]} + col + ${h};\n    vec2 uv = uvFromFlat(${u}, ${c}, index);\n    return sampleTexture(${s}, uv);\n  }\n`}(n,t);case 3:return function gM(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e[1]*e[2],o=e[2],{newShape:i,keptDims:l}=Hs(e);if(i.length<e.length){const m=["row","col","depth"];return`\n        ${Da(Oa(n,i),t)}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${Pa(m,l)});\n        }\n      `}if(n.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${a}, ${o}, 1)));\n        ${Fa(n)}\n      }\n    `;const c=n.shapeInfo.texShape,h=c[0],d=c[1],p=n.shapeInfo.flatOffset;if(d===a&&null==p)return t?`\n      float ${r}(int row, int col, int depth) {\n        int stride1 = ${s}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${o}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${d}.0, ${h}.0);\n          return sampleTexture(${s}, uv);\n        }\n      `;if(d===o&&null==p)return t?`\n      float ${r}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${s}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}.0, ${h}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;const f=Kr(s);return t?`\n    float ${r}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${s}Shape[1] * ${s}Shape[2];\n      int stride1 = ${s}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${f};\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n      return sampleTexture(${s}, uv);\n    }\n    `:`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${a} + col * ${o} + depth + ${f};\n        vec2 uv = uvFromFlat(${h}, ${d}, index);\n        return sampleTexture(${s}, uv);\n      }\n  `}(n,t);case 4:return function xM(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e[3],o=e[2]*a,i=e[1]*o,{newShape:l,keptDims:u}=Hs(e);if(l.length<e.length){const b=["row","col","depth","depth2"];return`\n      ${Da(Oa(n,l),t)}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${Pa(b,u)});\n      }\n    `}if(n.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${o}, ${a}, 1)));\n        ${Fa(n)}\n      }\n    `;const c=n.shapeInfo.flatOffset,h=n.shapeInfo.texShape,d=h[0],p=h[1],f=`int stride2 = ${s}Shape[3];`,g=`int stride1 = ${s}Shape[2] * stride2;`,m=`int stride0 = ${s}Shape[1] * stride1;`;if(p===i&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        ${f}\n        ${g}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${o}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;if(p===a&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${s}Shape[1] * ${s}Shape[2], ${s}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${e[1]*e[2]}, ${e[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;const y=Kr(s);return t?`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${f}\n      ${g}\n      ${m}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index + ${y});\n      return sampleTexture(${s}, uv);\n    }\n  `:`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${o} +\n          depth * ${a} + depth2;\n      vec2 uv = uvFromFlat(${d}, ${p}, index + ${y});\n      return sampleTexture(${s}, uv);\n    }\n  `}(n,t);case 5:return function bM(n){const t=n.shapeInfo.logicalShape,e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),r=t[4],a=t[3]*r,o=t[2]*a,i=t[1]*o,{newShape:l,keptDims:u}=Hs(t);if(l.length<t.length){const m=["row","col","depth","depth2","depth3"];return`\n      ${Da(Oa(n,l))}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${Pa(m,u)});\n      }\n    `}if(n.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${i}, ${o}, ${a}, ${r})) +\n          depth3;\n        ${Fa(n)}\n      }\n    `;const c=n.shapeInfo.flatOffset,h=n.shapeInfo.texShape,d=h[0],p=h[1];if(p===i&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${o}, ${a}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;if(p===r&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${o} + depth * ${a} +\n          depth2 * ${r} + depth3 + ${Kr(e)};\n      vec2 uv = uvFromFlat(${d}, ${p}, index);\n      return sampleTexture(${e}, uv);\n    }\n  `}(n);case 6:return function wM(n){const t=n.shapeInfo.logicalShape,e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),{newShape:r,keptDims:a}=Hs(t);if(r.length<t.length){const y=["row","col","depth","depth2","depth3","depth4"];return`\n      ${Da(Oa(n,r))}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${Pa(y,a)});\n      }\n    `}const o=t[5],i=t[4]*o,l=t[3]*i,u=t[2]*l,c=t[1]*u;if(n.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${i})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${o}, 1)));\n        ${Fa(n)}\n      }\n    `;const h=n.shapeInfo.flatOffset,d=n.shapeInfo.texShape,p=d[0],f=d[1];if(f===c&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${i}, ${o})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${p}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;if(f===o&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${p}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${i} + depth3 * ${o} + depth4 + ${Kr(e)};\n      vec2 uv = uvFromFlat(${p}, ${f}, index);\n      return sampleTexture(${e}, uv);\n    }\n  `}(n);default:throw new Error(`${e.length}-D input sampling is not yet supported`)}}function sw(n,t){switch(n.shapeInfo.logicalShape.length){case 0:return function uM(n){const t=n.name;return`\n    vec4 ${"get"+t.charAt(0).toUpperCase()+t.slice(1)}() {\n      return ${yn().texture2D}(${t}, halfCR);\n    }\n  `}(n);case 1:return function hM(n,t){const e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),r=n.shapeInfo.texShape,a=yn();if(t)return`\n    vec4 ${s}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${a.texture2D}(${e}, uv);\n    }\n  `;const o=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];return`\n    vec4 ${s}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${o[0]}, ${o[1]}, index);\n      return ${a.texture2D}(${e}, uv);\n    }\n  `}(n,t);case 2:return function pM(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=n.shapeInfo.texShape,o=a[0],i=a[1],l=yn();if(null!=a&&ke(e,a))return t?`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `:`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${o}.0);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `;if(t)return`\n    vec4 ${r}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `;const u=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(e[1]/2)}, ${u[0]}, ${u[1]}, row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `}(n,t);case 3:return function mM(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=n.shapeInfo.texShape,o=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];if(1===e[0]){const p=[1,2],g=["b","row","col"];return`\n        ${sw(Oa(n,e.slice(1)),t)}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${Pa(g,p)});\n        }\n      `}const i=yn();if(t)return`\n    vec4 ${r}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${i.texture2D}(${s}, uv);\n    }\n  `;const l=o[0],u=o[1],c=Math.ceil(e[2]/2);return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${l}, ${u}, ${c*Math.ceil(e[1]/2)}, ${c}, b, row, col);\n      return ${i.texture2D}(${s}, uv);\n    }\n  `}(n,t);default:return function yM(n,t){const e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),r=yn();if(t)return`\n    vec4 ${s}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${e}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${e}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${e}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${r.texture2D}(${e}, uv);\n    }\n  `;const a=n.shapeInfo.logicalShape,o=a.length,i=n.shapeInfo.texShape,l=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],u=l[0],c=l[1],h=Math.ceil(a[o-1]/2);let d=h*Math.ceil(a[o-2]/2),p="int b, int row, int col",f=`b * ${d} + (row / 2) * ${h} + (col / 2)`;for(let g=2;g<o-1;g++)p=`int b${g}, `+p,d*=a[o-g-1],f=`b${g} * ${d} + `+f;return`\n    vec4 ${s}(${p}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});\n      return ${r.texture2D}(${e}, uv);\n    }\n  `}(n,t)}}const XV="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",YV="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",ZV="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",JV="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function Kr(n){return`offset${n}`}function Fa(n){const t=n.name,e=L(n.shapeInfo.logicalShape);return e<2?`return ${t};`:`\n    for (int i = 0; i < ${e}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function it(n){if(n<=1)return"int";if(2===n)return"ivec2";if(3===n)return"ivec3";if(4===n)return"ivec4";if(5===n)return"ivec5";if(6===n)return"ivec6";throw Error(`GPU for rank ${n} is not yet supported`)}function vf(n,t,e){const{newShape:s,keptDims:r}=Hs(t),a=t.length,o=n&&3===a&&1===t[0],i=o?t.slice(1):s,l=!n&&a>1&&!ke(t,e)&&s.length<a||o;return{useSqueezeShape:l,uniformShape:l?i:t,keptDims:r}}function Oa(n,t){const e=JSON.parse(JSON.stringify(n));return e.shapeInfo.logicalShape=t,e}function Pa(n,t){return t.map(e=>n[e]).join(", ")}function aw(n,t,e){const s=[],r=[];let a,o,i,l=null,u=null;u=n.getUniformLocation(e,"NAN",!1),1===M().getNumber("WEBGL_VERSION")&&(l=n.getUniformLocation(e,"INFINITY",!1));const c=!1;for(const h of t.variableNames){const d={name:h,uniform:n.getUniformLocation(e,h,c),offset:n.getUniformLocation(e,`offset${h}`,c)};t.enableShapeUniforms&&(d.shape=n.getUniformLocation(e,`${h}Shape`,c),d.texShape=n.getUniformLocation(e,`${h}TexShape`,c)),s.push(d)}if(t.enableShapeUniforms&&(a=n.getUniformLocation(e,"outShape",c),i=n.getUniformLocation(e,"outShapeStrides",c),o=n.getUniformLocation(e,"outTexShape",c)),t.customUniforms)for(const h of t.customUniforms)r.push(n.getUniformLocation(e,h.name,c));return{variablesLocations:s,customUniformLocations:r,infLoc:l,nanLoc:u,outShapeLocation:a,outShapeStridesLocation:i,outTexShapeLocation:o}}function ow(n,t){if(n.length!==t.length)throw Error(`Binary was compiled with ${n.length} inputs, but was executed with ${t.length} inputs`);n.forEach((e,s)=>{const r=e.logicalShape,a=t[s],o=a.shape;if(!ke(r,o))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${o} must match`);if(e.isUniform&&a.isUniform)return;const i=e.texShape,l=a.isUniform?null:a.texData.texShape;if(!ke(i,l))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${l} must match`)})}function hn(n){return M().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&n<=4}class kM{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=Xu.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const e=yn();this.outputShape=t,this.enableShapeUniforms=hn(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?rc(["r","c","d"],t):qr(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${e.output} = result;\n      }\n    `}}class TM{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=Xu.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const e=yn();this.outputShape=t,this.enableShapeUniforms=hn(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?rc(["r","c","d"],t):qr(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${e.output} = result;\n      }\n    `}}class _M{constructor(t){this.variableNames=["A"],this.outTexUsage=Zn.DOWNLOAD;const e=yn();this.outputShape=t,this.userCode=`\n      ${tw}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${e.output} = encode_float(x);\n      }\n    `}}class $M{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=Zn.DOWNLOAD;const e=yn();this.outputShape=t,this.userCode=`\n      ${tw}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${e.output} = encode_float(x);\n      }\n    `}}const EM={R:0,G:1,B:2,A:3};class iw{constructor(t,e=!1,s="RGBA"){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const r=yn();this.outputShape=t,this.enableShapeUniforms=hn(this.outputShape.length);let a="result";e&&(a="floor(result * 255. + 0.5)");let o="";for(let i=0;i<s.length;i++)o+=`\n          if(offset == ${i}) {\n            result = values[${EM[s[i]]}];\n          }`;this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":bf(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int flatIndex = getFlatIndex(coords);\n        float result = 0.;\n        int offset = imod(flatIndex, ${s.length});\n\n        flatIndex = idiv(flatIndex, ${s.length}, 1.);\n\n        int r = flatIndex / texShape[1];\n        if (r < texShape[0]) {\n          int c = imod(flatIndex, texShape[1]);\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n          vec4 values = ${r.texture2D}(A, uv);\n          ${o}\n        }\n        ${r.output} = vec4(${a}, 0., 0., 0.);\n      }\n    `}}class AM{constructor(t,e=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const s=yn();this.outputShape=t,this.enableShapeUniforms=hn(this.outputShape.length);let r="",a="result";e&&(a="floor(result * 255. + 0.5)");for(let o=0;o<=1;o++)for(let i=0;i<=1;i++){const l=2*o+i;r+=`\n          localCoords = coords;\n          if(localCoords[2] + ${i} < ${this.enableShapeUniforms?"outShape[2]":`${t[2]}`}) {\n          localCoords[2] += ${i};\n          if (localCoords[1] + ${o} < ${this.enableShapeUniforms?"outShape[1]":`${t[1]}`}) {\n            localCoords[1] += ${o};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${s.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${l}] = values[0];\n            } else if (offset == 1) {\n              result[${l}] = values[1];\n            } else if (offset == 2) {\n              result[${l}] = values[2];\n            } else {\n              result[${l}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":bf(t)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${r}\n\n          ${s.output} = ${a};\n        }\n    `}}function Ci(n,t,e,s,r,a){!function NV(n,t){const e=M().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(n<=0||t<=0)throw new Error(`Requested texture size [${n}x${t}] is invalid.`);if(n>e||t>e)throw new Error(`Requested texture size [${n}x${t}] greater than WebGL maximum on this browser / GPU [${e}x${e}].`)}(t,e);const o=function IV(n){return Ws(n,()=>n.createTexture(),"Unable to create WebGLTexture.")}(n),i=n.TEXTURE_2D;return ce(n,()=>n.bindTexture(i,o)),ce(n,()=>n.texParameteri(i,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE)),ce(n,()=>n.texParameteri(i,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE)),ce(n,()=>n.texParameteri(i,n.TEXTURE_MIN_FILTER,n.NEAREST)),ce(n,()=>n.texParameteri(i,n.TEXTURE_MAG_FILTER,n.NEAREST)),1===M().getNumber("WEBGL_VERSION")?ce(n,()=>n.texImage2D(i,0,s,t,e,0,r,a,null)):ce(n,()=>n.texStorage2D(i,1,s,t,e)),ce(n,()=>n.bindTexture(n.TEXTURE_2D,null)),{texture:o,texShape:[e,t]}}function lw(n){return n.internalFormatFloat}function uw(n){return n.internalFormatHalfFloat}function cw(n){return n.downloadTextureFormat}function hw(n){return n.internalFormatPackedFloat}function dw(n){return n.internalFormatPackedHalfFloat}class Sf{constructor(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.itemsToPoll=[];const e=M().getNumber("WEBGL_VERSION");if(null!=t?(this.gl=t,function oV(n,t){fr[n]=t}(e,t)):this.gl=us(e),t=this.gl,2===M().getNumber("WEBGL_VERSION")){const a=t;this.createVertexArray=()=>ce(a,()=>a.createVertexArray()),this.bindVertexArray=o=>ce(a,()=>a.bindVertexArray(o)),this.deleteVertexArray=o=>ce(a,()=>a.deleteVertexArray(o)),this.getVertexArray=()=>ce(a,()=>a.getParameter(a.VERTEX_ARRAY_BINDING))}else if(null!=t){const a=t.getExtension("OES_vertex_array_object");if(null==a)throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");this.createVertexArray=()=>ce(t,()=>a.createVertexArrayOES()),this.bindVertexArray=o=>ce(t,()=>a.bindVertexArrayOES(o)),this.deleteVertexArray=o=>ce(t,()=>a.deleteVertexArrayOES(o)),this.getVertexArray=()=>ce(t,()=>t.getParameter(a.VERTEX_ARRAY_BINDING_OES))}let s="WEBGL_color_buffer_float";const r="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===M().getNumber("WEBGL_VERSION")){const o="OES_texture_half_float";if(this.textureFloatExtension=Zu(this.gl,"OES_texture_float"),Jn(this.gl,o))this.textureHalfFloatExtension=Zu(this.gl,o);else if(M().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(s),Jn(this.gl,r))this.colorBufferHalfFloatExtension=Zu(this.gl,r);else if(M().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(s="EXT_color_buffer_float",Jn(this.gl,s))this.colorBufferFloatExtension=this.gl.getExtension(s);else{if(!Jn(this.gl,r))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(r)}this.vertexBuffer=function DM(n){return function vV(n,t){const e=Ws(n,()=>n.createBuffer(),"Unable to create WebGLBuffer");return ce(n,()=>n.bindBuffer(n.ARRAY_BUFFER,e)),ce(n,()=>n.bufferData(n.ARRAY_BUFFER,t,n.STATIC_DRAW)),e}(n,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}(this.gl),this.indexBuffer=function FM(n){return function SV(n,t){const e=Ws(n,()=>n.createBuffer(),"Unable to create WebGLBuffer");return ce(n,()=>n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,e)),ce(n,()=>n.bufferData(n.ELEMENT_ARRAY_BUFFER,t,n.STATIC_DRAW)),e}(n,new Uint16Array([0,1,2,2,1,3]))}(this.gl),this.framebuffer=function CV(n){return Ws(n,()=>n.createFramebuffer(),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=mf(this.gl,this.textureHalfFloatExtension)}get debug(){return M().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const t=this.gl;ce(t,()=>t.finish()),ce(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,null)),ce(t,()=>t.deleteFramebuffer(this.framebuffer)),ce(t,()=>t.bindBuffer(t.ARRAY_BUFFER,null)),ce(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)),ce(t,()=>t.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(t,e){return this.throwIfDisposed(),function OM(n,t,e,s){const[r,a]=Ii(t,e);return Ci(n,r,a,lw(s),s.textureFormatFloat,n.FLOAT)}(this.gl,t,e,this.textureConfig)}createFloat16MatrixTexture(t,e){return this.throwIfDisposed(),function PM(n,t,e,s){const[r,a]=Ii(t,e);return Ci(n,r,a,uw(s),s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createUnsignedBytesMatrixTexture(t,e){return this.throwIfDisposed(),function LM(n,t,e,s){const[r,a]=Ii(t,e);return Ci(n,r,a,cw(s),n.RGBA,n.UNSIGNED_BYTE)}(this.gl,t,e,this.textureConfig)}uploadPixelDataToTexture(t,e){this.throwIfDisposed(),function WM(n,t,e){ce(n,()=>n.bindTexture(n.TEXTURE_2D,t)),e.data instanceof Uint8Array?2===M().getNumber("WEBGL_VERSION")?ce(n,()=>n.texSubImage2D(n.TEXTURE_2D,0,0,0,e.width,e.height,n.RGBA,n.UNSIGNED_BYTE,e.data)):ce(n,()=>n.texImage2D(n.TEXTURE_2D,0,n.RGBA,e.width,e.height,0,n.RGBA,n.UNSIGNED_BYTE,e.data)):2===M().getNumber("WEBGL_VERSION")?ce(n,()=>n.texSubImage2D(n.TEXTURE_2D,0,0,0,n.RGBA,n.UNSIGNED_BYTE,e)):ce(n,()=>n.texImage2D(n.TEXTURE_2D,0,n.RGBA,n.RGBA,n.UNSIGNED_BYTE,e)),ce(n,()=>n.bindTexture(n.TEXTURE_2D,null))}(this.gl,t,e)}uploadDenseMatrixToTexture(t,e,s,r){this.throwIfDisposed(),function BM(n,t,e,s,r,a){let o,i,l;ce(n,()=>n.bindTexture(n.TEXTURE_2D,t)),r instanceof Uint8Array?(o=new Uint8Array(e*s*4),i=n.UNSIGNED_BYTE,l=n.RGBA):(o=new Float32Array(e*s*4),i=n.FLOAT,l=a.internalFormatPackedFloat),o.set(r),2===M().getNumber("WEBGL_VERSION")?ce(n,()=>n.texSubImage2D(n.TEXTURE_2D,0,0,0,e,s,n.RGBA,i,o)):ce(n,()=>n.texImage2D(n.TEXTURE_2D,0,l,e,s,0,n.RGBA,i,o)),ce(n,()=>n.bindTexture(n.TEXTURE_2D,null))}(this.gl,t,e,s,r,this.textureConfig)}createFloat16PackedMatrixTexture(t,e){return this.throwIfDisposed(),function MM(n,t,e,s){const[r,a]=Ea(t,e);return Ci(n,r,a,dw(s),n.RGBA,s.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createPackedMatrixTexture(t,e){return this.throwIfDisposed(),function VM(n,t,e,s){const[r,a]=Ea(t,e);return Ci(n,r,a,hw(s),n.RGBA,n.FLOAT)}(this.gl,t,e,this.textureConfig)}deleteMatrixTexture(t){this.throwIfDisposed(),this.outputTexture===t&&(J0(this.gl,this.framebuffer),this.outputTexture=null),ce(this.gl,()=>this.gl.deleteTexture(t))}downloadByteEncodedFloatMatrixFromOutputTexture(t,e,s){return this.downloadMatrixDriver(t,()=>function HM(n,t,e,s){const[r,a]=Ii(t,e),i=new Uint8Array(function uV(n,t){return n*t}(t*e,4));return ce(n,()=>n.readPixels(0,0,r,a,s.downloadTextureFormat,n.UNSIGNED_BYTE,i)),new Float32Array(i.buffer)}(this.gl,e,s,this.textureConfig))}downloadPackedMatrixFromBuffer(t,e,s,r,a,o){return function jM(n,t,e,s,r,a,o,i){const l=n,u=new Float32Array(function cV(n,t){const[e,s]=Ea(n,t);return e*s*4}(a,o));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}(this.gl,t,0,0,0,a,o)}downloadFloat32MatrixFromBuffer(t,e){return function GM(n,t,e){const s=n,r=new Float32Array(e);return s.bindBuffer(s.PIXEL_PACK_BUFFER,t),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,r),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),r}(this.gl,t,e)}createBufferFromTexture(t,e,s){this.bindTextureToFrameBuffer(t);const r=function UM(n,t,e,s){const r=n.createBuffer();ce(n,()=>n.bindBuffer(n.PIXEL_PACK_BUFFER,r));const i=16*t*e;return ce(n,()=>n.bufferData(n.PIXEL_PACK_BUFFER,i,n.STREAM_READ)),ce(n,()=>n.readPixels(0,0,e,t,n.RGBA,n.FLOAT,0)),ce(n,()=>n.bindBuffer(n.PIXEL_PACK_BUFFER,null)),r}(this.gl,e,s);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const t=this.createFence(this.gl);return this.pollFence(t)}createFence(t){let e,s;if(M().getBool("WEBGL_FENCE_API_ENABLED")){const r=t,a=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),s=()=>{const o=r.clientWaitSync(a,0,0);return o===r.ALREADY_SIGNALED||o===r.CONDITION_SATISFIED},e=a}else M().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),s=()=>this.isQueryAvailable(e,M().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):s=()=>!0;return{query:e,isFencePassed:s}}downloadMatrixFromPackedTexture(t,e,s){return this.downloadMatrixDriver(t,()=>function qM(n,t,e){const s=new Float32Array(t*e*4);return ce(n,()=>n.readPixels(0,0,e,t,n.RGBA,n.FLOAT,s)),s}(this.gl,e,s))}createProgram(t){this.throwIfDisposed();const e=this.gl;null==this.vertexShader&&(this.vertexShader=function RM(n){const t=yn();return function gV(n,t){const e=Ws(n,()=>n.createShader(n.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(ce(n,()=>n.shaderSource(e,t)),ce(n,()=>n.compileShader(e)),!1===n.getShaderParameter(e,n.COMPILE_STATUS))throw console.log(n.getShaderInfoLog(e)),new Error("Failed to compile vertex shader.");return e}(n,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}(e));const s=function bV(n){return Ws(n,()=>n.createProgram(),"Unable to create WebGLProgram.")}(e);ce(e,()=>e.attachShader(s,this.vertexShader)),ce(e,()=>e.attachShader(s,t)),function wV(n,t){if(ce(n,()=>n.linkProgram(t)),!M().get("ENGINE_COMPILE_ONLY")&&!1===n.getProgramParameter(t,n.LINK_STATUS))throw console.log(n.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(e,s);const r=Object.assign(s,{vao:this.createVertexArray()});return this.debug&&gf(e,r),r}buildVao(t){this.setProgram(t),this.bindVertexArray(t.vao);const e=this.gl;ce(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this.indexBuffer)),function zM(n,t,e){ce(n,()=>n.bindBuffer(n.ARRAY_BUFFER,e)),Z0(n,t,"clipSpacePos",e,3,20,0)&&Z0(n,t,"uv",e,2,20,12)}(e,t,this.vertexBuffer)}deleteProgram(t){this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&(ce(this.gl,()=>this.gl.deleteProgram(t)),this.deleteVertexArray(t.vao))}setProgram(t){this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&gf(this.gl,this.program),ce(this.gl,()=>this.gl.useProgram(t))}getUniformLocation(t,e,s=!0){return this.throwIfDisposed(),s?function TV(n,t,e){return Ws(n,()=>n.getUniformLocation(t,e),'uniform "'+e+'" not present in program.')}(this.gl,t,e):function _V(n,t,e){return n.getUniformLocation(t,e)}(this.gl,t,e)}getAttributeLocation(t,e){return this.throwIfDisposed(),ce(this.gl,()=>this.gl.getAttribLocation(t,e))}getUniformLocationNoThrow(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)}setInputMatrixTexture(t,e,s){this.throwIfDisposed(),this.throwIfNoProgram(),$V(this.gl,t,e,s)}setOutputMatrixTexture(t,e,s){this.setOutputMatrixTextureDriver(t,s,e)}setOutputPackedMatrixTexture(t,e,s){this.throwIfDisposed();const[r,a]=Ea(e,s);this.setOutputMatrixTextureDriver(t,r,a)}setOutputMatrixWriteRegion(t,e,s,r){this.setOutputMatrixWriteRegionDriver(s,t,r,e)}setOutputPackedMatrixWriteRegion(t,e,s,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&gf(this.gl,this.program),Ju(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const t=this.gl;if(this.debug){const e=this.getVertexArray();console.assert(e===this.program.vao,"VAO changed between setProgram and executeProgram!"),this.debugValidate()}ce(t,()=>t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),ce(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=Zu(this.gl,2===M().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===M().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const s=this.gl,r=this.getQueryTimerExtensionWebGL2(),a=s.createQuery();return s.beginQuery(r.TIME_ELAPSED_EXT,a),a}const t=this.getQueryTimerExtensionWebGL1(),e=t.createQueryEXT();return t.beginQueryEXT(t.TIME_ELAPSED_EXT,e),e}endQuery(){if(2===M().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,s=this.getQueryTimerExtensionWebGL2();return void e.endQuery(s.TIME_ELAPSED_EXT)}const t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}waitForQueryAndGetTime(t){var e=this;return O(function*(){return yield Ff(()=>e.disposed||e.isQueryAvailable(t,M().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),e.getQueryTime(t,M().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))})()}getQueryTime(t,e){if(0===e)return null;if(2===e){const s=this.gl;return s.getQueryParameter(t,s.QUERY_RESULT)/1e6}{const s=this.getQueryTimerExtensionWebGL1();return s.getQueryObjectEXT(t,s.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(t,e){if(0===e)return!0;if(2===e){const s=this.gl,r=this.getQueryTimerExtensionWebGL2(),a=s.getQueryParameter(t,s.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),a&&!this.disjoint}{const s=this.getQueryTimerExtensionWebGL1(),r=s.getQueryObjectEXT(t,s.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(s.GPU_DISJOINT_EXT)),r&&!this.disjoint}}pollFence(t){return new Promise(e=>{this.addItemToPoll(()=>t.isFencePassed(),()=>e())})}pollItems(){const t=function KM(n){let t=0;for(;t<n.length&&n[t]();++t);return t-1}(this.itemsToPoll.map(e=>e.isDoneFn));for(let e=0;e<=t;++e){const{resolveFn:s}=this.itemsToPoll[e];s()}this.itemsToPoll=this.itemsToPoll.slice(t+1)}addItemToPoll(t,e){if(this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1)return;let s;"setTimeoutCustom"in M().platform&&(s=M().platform.setTimeoutCustom.bind(M().platform)),Ff(()=>(this.pollItems(),0===this.itemsToPoll.length),()=>0,null,s)}bindTextureToFrameBuffer(t){this.throwIfDisposed(),yf(this.gl,t,this.framebuffer),this.debug&&Ju(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(yf(this.gl,this.outputTexture,this.framebuffer),this.debug&&Ju(this.gl)):J0(this.gl,this.framebuffer)}downloadMatrixDriver(t,e){this.bindTextureToFrameBuffer(t);const s=e();return this.unbindTextureToFrameBuffer(),s}setOutputMatrixTextureDriver(t,e,s){this.throwIfDisposed();const r=this.gl;yf(r,t,this.framebuffer),this.debug&&Ju(r),this.outputTexture=t,ce(r,()=>r.viewport(0,0,e,s)),ce(r,()=>r.scissor(0,0,e,s))}setOutputMatrixWriteRegionDriver(t,e,s,r){this.throwIfDisposed(),ce(this.gl,()=>this.gl.scissor(t,e,s,r))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{addImpl:XM,bincountImpl:pw,bincountReduceImpl:YM,bitwiseAndImpl:ZM,castImpl:JM,ceilImpl:QM,concatImpl:ez,equalImpl:tz,expImpl:nz,expm1Impl:sz,floorImpl:rz,gatherNdImpl:az,gatherV2Impl:oz,greaterImpl:iz,greaterEqualImpl:lz,lessImpl:uz,lessEqualImpl:cz,linSpaceImpl:hz,logImpl:dz,maxImpl:pz,maximumImpl:fz,minimumImpl:mz,multiplyImpl:gz,negImpl:yz,notEqualImpl:xz,prodImpl:bz,raggedGatherImpl:wz,raggedRangeImpl:vz,raggedTensorToTensorImpl:Sz,rangeImpl:Iz,rsqrtImpl:Nz,scatterImpl:Cz,sigmoidImpl:kz,simpleAbsImpl:fw,sliceImpl:Tz,sparseFillEmptyRowsImpl:_z,sparseReshapeImpl:$z,sparseSegmentReductionImpl:mw,sqrtImpl:Ez,staticRegexReplaceImpl:Az,stridedSliceImpl:Rz,stringNGramsImpl:Dz,stringSplitImpl:Fz,stringToHashBucketFastImpl:Oz,subImpl:Pz,tileImpl:Lz,topKImpl:Vz,transposeImpl:If,uniqueImpl:Mz}=gt;function gw(n,t){return["x","y","z","w","u","v"].slice(0,t).map(e=>`${n}.${e}`)}function xn(n,t){return 1===t?[n]:gw(n,t)}class Bz{constructor(t){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t,this.rank=t.length,this.enableShapeUniforms=hn(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=xn("rc",this.rank),s=it(this.rank),r=this.getOutOfBoundsCondition(e),a=this.getSetup(e),o=this.getOutput(e);this.userCode=`\n        void main() {\n          ${s} rc = getOutputCoords();\n\n          if(${r}) {\n            setOutput(vec4(0));\n          } else {\n            ${a}\n\n            setOutput(vec4(${o}));\n          }\n        }\n      `}}getSourceCoordsArr(t){const e=[];for(let s=0;s<=1;s++)for(let r=0;r<=1;r++){let a=`${0===s?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let o=2;o<this.rank;o++)a=`${t[t.length-1-o]},`+a;e.push(a)}return e}getOutOfBoundsCondition(t){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let e="";for(let s=this.rank-2;s<this.rank;s++)e+=`${t[s]} >= ${this.enableShapeUniforms?`outShape[${s}]`:this.outputShape[s]}`,s<this.rank-1&&(e+="||");return e}getSetup(t){if(1===this.rank)return"";const e=t.slice(-2);return`\n      int r = ${e[0]};\n      int c = ${e[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1]};\n      bool rEdge = rp1 >= ${this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2]};\n    `}getOutput(t){const e=this.getSourceCoordsArr(t);return 1===this.rank?`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`:`getA(${e[0]}),\n            cEdge ? 0. : getA(${e[1]}),\n            rEdge ? 0. : getA(${e[2]}),\n            rEdge || cEdge ? 0. : getA(${e[3]})`}}class yw{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=t,this.enableShapeUniforms=hn(this.outputShape.length);let s="";for(let r=0;r<4;r++){let a="thisRC = rc;";r%2==1&&(a+="thisRC.z += 1;"),r>1&&(a+="thisRC.y += 1;"),s+=`\n        ${a}\n        ${r>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${r}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${r>0?"}":""}\n      `}this.userCode=`\n      ${function Wz(n,t){return`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${t?function zV(n,t,e="index"){const r=function MV(n,t){const e=n.length,s=n.map(a=>`${t}[${a}]`),r=new Array(e-1);r[e-2]=s[e-1];for(let a=e-3;a>=0;--a)r[a]=`(${r[a+1]} * ${s[a+1]})`;return r}(n.map((a,o)=>o),t);return r.map((a,o)=>`int ${n[o]} = ${e} / ${r[o]}; ${o===r.length-1?`int ${n[o+1]} = ${e} - ${n[o]} * ${r[o]}`:`index -= ${n[o]} * ${r[o]}`};`).join("")}(["r","c","d"],"inputShape"):qr(["r","c","d"],n)}\n      return ivec3(r, c, d);\n    }\n  `}(e,this.enableShapeUniforms)}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":bf(t)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":t[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":t[2]};\n\n        ${s}\n\n        setOutput(result);\n      }\n    `}}class Uz{constructor(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.usedTextures={},this.logEnabled=!1}acquireTexture(t,e,s){const r=bw(e,s),a=ww(t,r,s);a in this.freeTextures||(this.freeTextures[a]=[]),a in this.usedTextures||(this.usedTextures[a]=[]);const o=xw(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,s);if(this.freeTextures[a].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=o,this.log();const l=this.freeTextures[a].pop();return this.usedTextures[a].push(l),l}let i;return r===cn.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):r===cn.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):r===cn.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):r===cn.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):r===cn.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[a].push(i),this.numUsedTextures++,this._numBytesAllocated+=o,this.log(),i}releaseTexture(t,e,s,r){if(null==this.freeTextures)return;const a=bw(s,r),o=ww(e,a,r);o in this.freeTextures||(this.freeTextures[o]=[]);const i=xw(e,a,this.gpgpu.gl,this.gpgpu.textureConfig,r),l=M().getNumber("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==l&&this._numBytesAllocated>l?(this.gpgpu.deleteMatrixTexture(t.texture),this._numBytesAllocated-=i):(this.freeTextures[o].push(t),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const u=this.usedTextures[o],c=u&&u.indexOf(t);if(null==c||c<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u[c]=u[u.length-1],u.pop(),this.log()}log(){if(!this.logEnabled)return;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${this.numFreeTextures+this.numUsedTextures})`);const e=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*e)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const t in this.freeTextures)this.freeTextures[t].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});for(const t in this.usedTextures)this.usedTextures[t].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function xw(n,t,e,s,r){const a=function Hz(n,t){switch(n){case cn.PACKED_2X2_FLOAT32:return hw(t);case cn.PACKED_2X2_FLOAT16:return dw(t);case cn.UNPACKED_FLOAT32:return lw(t);case cn.UNPACKED_FLOAT16:return uw(t);case cn.PACKED_4X1_UNSIGNED_BYTE:return cw(t);default:throw new Error(`Unknown physical texture type ${n}`)}}(t,s);let o;if(r){const[l,u]=Ea(n[0],n[1]);o=l*u}else{const[l,u]=Ii(n[0],n[1]);o=l*u}const i=function Gz(n,t){if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===n.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(e,a);return o*i}function bw(n,t){if(n===Zn.UPLOAD)return cn.PACKED_2X2_FLOAT32;if(n===Zn.RENDER||null==n)return function jz(n){return M().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?n?cn.PACKED_2X2_FLOAT32:cn.UNPACKED_FLOAT32:n?cn.PACKED_2X2_FLOAT16:cn.UNPACKED_FLOAT16}(t);if(n===Zn.DOWNLOAD||n===Zn.PIXELS)return cn.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${n}`)}function ww(n,t,e){return`${n[0]}_${n[1]}_${t}_${e}`}class $s{constructor(t,e){this.variableNames=["A"],this.outputShape=t,this.enableShapeUniforms=hn(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${e}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const Mn="if (isnan(x)) return x;",qz="return x;",vw="return abs(x);",Kz="return (x >= 0.0) ? x : (exp(x) - 1.0);",Xz=Mn+"\n  return (x < 0.0) ? 0.0 : x;\n",Yz=Mn+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",mr="return x;",Zz="return 1.0 / (1.0 + exp(-1.0 * x));",Jz="return x;",Qz="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n",e3="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",t3="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",n3="return 1.0 / (1.0 + exp(-1.0 * x));";class gr{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.enableShapeUniforms=hn(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${e}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class s3{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t,this.enableShapeUniforms=hn(this.outputShape.length);const e=t.length,s=xn("rc",e),r=it(e),a=function zz(n,t){if(1===n)return"rc";let e="";for(let s=0;s<n;s++)e+=t[s],s<n-1&&(e+=",");return e}(e,s),o=s.slice(-2),i=e<=1?"rc":`vec2(${o.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${a});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const r3=gy,oc={},l3=M().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");let h3=(()=>{class n extends Bn{nextDataId(){return n.nextDataId++}constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!M().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let s;if(null!=e){if(e instanceof Sf)s=e;else{const r=us(M().getNumber("WEBGL_VERSION"),e);s=new Sf(r)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const r=us(M().getNumber("WEBGL_VERSION"));s=new Sf(r),this.binaryCache=function i3(n){return n in oc||(oc[n]={}),oc[n]}(M().getNumber("WEBGL_VERSION")),this.gpgpuCreatedLocally=!0}this.gpgpu=s,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new Uz(this.gpgpu),this.numMBBeforeWarning=function c3(){return null==M().global.screen?1024:M().global.screen.height*M().global.screen.width*window.devicePixelRatio*600/1024/1024}(),this.texData=new Ot(this,ps())}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}writeTexture(e,s,r,a,o,i){const l=this.makeTensorInfo(s,r),u=this.texData.get(l.dataId);u.isPacked=!1,u.texture={texture:e,texShape:[a,o]},u.texShape=[a,o];const c=Qu(s),h=new iw(c,!1,i),d=this.runWebGLProgram(h,[l],r,[[a,o]]);return d.shape=s,u.texture=null,this.disposeIntermediateTensorInfo(l),d.dataId}write(e,s,r){if((M().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||M().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===r&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const a={id:this.nextDataId()};return this.texData.set(a,{shape:s,dtype:r,values:e,usage:Zn.UPLOAD,refCount:1}),a}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}move(e,s,r,a,o){if(M().getBool("DEBUG")&&this.checkNumericalProblems(s),"complex64"===a)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:r,dtype:a,values:s,usage:Zn.UPLOAD,refCount:o})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const s=this.texData.get(e),{values:r,dtype:a,complexTensorInfos:o,slice:i,shape:l,isPacked:u}=s;if(null!=i){let p;p=u?new gr(l,mr):new $s(l,mr);const f=this.runWebGLProgram(p,[{dataId:e,shape:l,dtype:a}],a),g=this.readSync(f.dataId);return this.disposeIntermediateTensorInfo(f),g}if(null!=r)return this.convertAndCacheOnCPU(e);if("string"===a)return r;const c=null!=this.activeTimers;let h,d;return c&&(h=wn()),d="complex64"===a?Ms(this.readSync(o.real.dataId),this.readSync(o.imag.dataId)):this.getValuesFromTexture(e),c&&(this.downloadWaitMs+=wn()-h),this.convertAndCacheOnCPU(e,d)}read(e){var s=this;return O(function*(){if(s.pendingRead.has(e)){const m=s.pendingRead.get(e);return new Promise(y=>m.push(y))}const r=s.texData.get(e),{values:a,shape:o,slice:i,dtype:l,complexTensorInfos:u,isPacked:c}=r;if(null!=i){let m;m=c?new gr(o,mr):new $s(o,mr);const y=s.runWebGLProgram(m,[{dataId:e,shape:o,dtype:l}],l),x=s.read(y.dataId);return s.disposeIntermediateTensorInfo(y),x}if(null!=a)return s.convertAndCacheOnCPU(e);if(M().getBool("DEBUG")&&!M().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===M().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let d,p,h=null;if("complex64"!==l&&M().get("WEBGL_BUFFER_SUPPORTED")){d=s.decode(e);const m=s.texData.get(d.dataId);h=s.gpgpu.createBufferFromTexture(m.texture.texture,...Yu(o))}if(s.pendingRead.set(e,[]),"complex64"!==l&&(yield s.gpgpu.createAndWaitForFence()),"complex64"===l){const m=yield Promise.all([s.read(u.real.dataId),s.read(u.imag.dataId)]);p=Ms(m[0],m[1])}else if(null==h)p=s.getValuesFromTexture(e);else{const m=L(o);p=s.gpgpu.downloadFloat32MatrixFromBuffer(h,m)}if(null!=d&&s.disposeIntermediateTensorInfo(d),null!=h){const m=s.gpgpu.gl;ce(m,()=>m.deleteBuffer(h))}const f=s.convertAndCacheOnCPU(e,p),g=s.pendingRead.get(e);return s.pendingRead.delete(e),g.forEach(m=>m(f)),s.pendingDisposal.has(e)&&(s.pendingDisposal.delete(e),s.disposeData(e)&&ps().removeDataId(e,s),s.pendingDeletes--),f})()}readToGPU(e,s={}){const r=this.texData.get(e),{values:a,shape:o,slice:i,dtype:l,isPacked:u,texture:c}=r;if("complex64"===l)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=i){let f;f=u?new gr(o,mr):new $s(o,mr);const g=this.runWebGLProgram(f,[{dataId:e,shape:o,dtype:l}],l),m=this.readToGPU(g,s);return this.disposeIntermediateTensorInfo(g),m}if(null==c)throw null!=a?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const h=this.decode(e,s.customTexShape),d=ps().makeTensorFromTensorInfo(h),p=this.texData.get(h.dataId);return Object.assign({tensorRef:d},p.texture)}bufferSync(e){const s=this.readSync(e.dataId);if("string"===e.dtype)try{const r=s.map(a=>Xs(a));return Ge(e.shape,e.dtype,r)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return Ge(e.shape,e.dtype,s)}checkNumericalProblems(e){if(null!=e)for(let s=0;s<e.length;s++){const r=e[s];if(!fV(r))throw M().getBool("WEBGL_RENDER_FLOAT32_CAPABLE")?Error(`The value ${r} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`):Error(`The value ${r} cannot be represented on this device.`)}}getValuesFromTexture(e){const{shape:s,dtype:r,isPacked:a}=this.texData.get(e),o=L(s);if(M().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const p=this.decode(e),f=this.texData.get(p.dataId),g=this.gpgpu.downloadMatrixFromPackedTexture(f.texture.texture,...Yu(s)).subarray(0,o);return this.disposeIntermediateTensorInfo(p),g}const i=M().getBool("WEBGL_PACK")&&!0===a,l=i?Qu(s):s,u=i?new $M(l):new _M(l),c=this.runWebGLProgram(u,[{shape:l,dtype:r,dataId:e}],"float32"),h=this.texData.get(c.dataId),d=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(h.texture.texture,h.texShape[0],h.texShape[1]).subarray(0,o);return this.disposeIntermediateTensorInfo(c),d}timerAvailable(){return M().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){var s=this;const r=this.activeTimers,a=[];let o=!1;null==this.programTimersStack?(this.programTimersStack=a,o=!0):this.activeTimers.push(a),this.activeTimers=a,e();const i=Cr(this.activeTimers.map(c=>c.query)).filter(c=>null!=c),l=Cr(this.activeTimers.map(c=>c.name)).filter(c=>null!=c);this.activeTimers=r,o&&(this.programTimersStack=null);const u={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return O(function*(){if(M().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const c=yield Promise.all(i);u.kernelMs=function T(n){let t=0;for(let e=0;e<n.length;e++)t+=n[e];return t}(c),u.getExtraProfileInfo=()=>c.map((h,d)=>({name:l[d],ms:h})).map(h=>`${h.name}: ${h.ms}`).join(", ")}else u.kernelMs={error:"WebGL query timers are not supported in this environment."};return s.uploadWaitMs=0,s.downloadWaitMs=0,u})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return M().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:wn(),endMs:null}}endTimer(e){return M().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=wn(),e)}getQueryTime(e){var s=this;return O(function*(){return M().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?s.gpgpu.waitForQueryAndGetTime(e):e.endMs-e.startMs})()}disposeData(e,s=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(s?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!s&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:r}=this.texData.get(e);return null!=r&&(this.disposeData(r.real.dataId,s),this.disposeData(r.imag.dataId,s)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:s,dtype:r,texShape:a,usage:o,isPacked:i,slice:l}=this.texData.get(e),u=l&&l.origDataId||e,c=this.dataRefCount.get(u);c>1?this.dataRefCount.set(u,c-1):(this.dataRefCount.delete(u),null!=s&&(this.numBytesInGPU-=this.computeBytes(a,r),this.textureManager.releaseTexture(s,a,o,i)));const h=this.texData.get(e);h.texture=null,h.texShape=null,h.isPacked=!1,h.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,s=l3){return M().getBool("WEBGL_CPU_FORWARD")&&e.every(r=>null==this.texData.get(r.dataId).texture&&L(r.shape)<s)}getGPGPUContext(){return this.gpgpu}where(e){An("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const s=e.dataSync();return r3(e.shape,s)}packedUnaryOp(e,s,r){const a=new gr(e.shape,s),o=this.compileAndRun(a,[e],r);return ps().makeTensorFromTensorInfo(o)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const a=fw(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,a)}if(M().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,vw,e.dtype);const s=new $s(e.shape,vw),r=this.compileAndRun(s,[e]);return ps().makeTensorFromTensorInfo(r)}makeTensorInfo(e,s,r){let a;if("string"===s&&null!=r&&r.length>0&&Wa(r[0])){const o=r.map(i=>Ks(i));a=this.write(o,e,s)}else a=this.write(r,e,s);return this.texData.get(a).usage=null,{dataId:a,shape:e,dtype:s}}makeOutput(e,s,r){return ps().makeTensorFromTensorInfo(this.makeTensorInfo(e,s,r),this)}unpackTensor(e){const s=new s3(e.shape);return this.runWebGLProgram(s,[e],e.dtype)}packTensor(e){const s=new Bz(e.shape);return this.runWebGLProgram(s,[e],e.dtype,null,!0)}packedReshape(e,s){const r=[Aa(e.shape),...Ra(e.shape)],a={dtype:e.dtype,shape:r,dataId:e.dataId},o=[Aa(s),...Ra(s)],i=new yw(o,r),c=this.runWebGLProgram(i,[a],e.dtype,[r],!0);return{dataId:c.dataId,shape:s,dtype:c.dtype}}decode(e,s){const r=this.texData.get(e),{isPacked:a,shape:o,dtype:i}=r;null!=s&&S(L(o)<=s[0]*s[1]*4,()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.");const l=Qu(o);let u;u=a?new TM(l):new kM(l);const h=[s??Yu(l)];return{dtype:i,shape:o,dataId:this.runWebGLProgram(u,[{shape:l,dtype:i,dataId:e}],i,h,!0,s).dataId}}runWebGLProgram(e,s,r,a,o=!1,i){const l=this.makeTensorInfo(e.outputShape,r),u=this.texData.get(l.dataId);if(e.packedOutput&&(u.isPacked=!0),e.outPackingScheme===Xu.DENSE){const x=i??Yu(e.outputShape);u.texShape=x.map(b=>2*b)}if(null!=e.outTexUsage&&(u.usage=e.outTexUsage),0===L(l.shape))return u.values=on(l.dtype,0),l;const c=[],h=s.map(x=>{if("complex64"===x.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let b=this.texData.get(x.dataId);if(null==b.texture){if(!e.packedInputs&&L(x.shape)<=M().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:x.shape,texData:null,isUniform:!0,uniformValues:b.values};e.packedInputs&&(b.isPacked=!0,b.shape=x.shape)}if(this.uploadToGPU(x.dataId),!!b.isPacked!=!!e.packedInputs)x=b.isPacked?this.unpackTensor(x):this.packTensor(x),c.push(x),b=this.texData.get(x.dataId);else if(b.isPacked&&!tc(b.shape,x.shape)){const w=x,v=x.shape;x.shape=b.shape,x=this.packedReshape(x,v),c.push(x),b=this.texData.get(x.dataId),w.shape=v}return{shape:x.shape,texData:b,isUniform:!1}});this.uploadToGPU(l.dataId);const d={shape:l.shape,texData:u,isUniform:!1},p=function CM(n,t,e){let s="";t.concat(e).forEach(o=>{const i=null!=o.texData&&null!=o.texData.slice&&o.texData.slice.flatOffset>0;if(n.enableShapeUniforms&&!o.isUniform){const l=o.texData.texShape,{useSqueezeShape:u,uniformShape:c,keptDims:h}=vf(n.packedInputs,o.shape,l);let d="",p="",f="";if(1===c.length&&n.packedInputs){const v=[Math.ceil(l[0]/2),Math.ceil(l[1]/2)];d=`${v[0]>1}_${v[1]>1}`}else if(2!==c.length||n.packedInputs){if(c.length>2&&!n.packedInputs){const v=Ne(c);f=`${v[0]===l[1]}_${v[v.length-1]===l[1]}`}}else p=`${c[0]>1}_${c[1]>1}`;const g=o.shape.length,m=2===c.length&&ke(o.shape,l),y=1===L(o.shape),x=pa(o.shape,e.shape),b=!n.packedInputs&&g===e.shape.length&&ke(l,e.texData.texShape);s+=`${g}_${b}_${u?h:""}_${c.length}_${y}_${x}_${m}_${d}_${p}_${f}_${n.packedInputs||c.length>2?"":`${l[0]>1}_${l[1]>1}`}_${i}`}else s+=`${o.shape}_${o.isUniform?"uniform":o.texData.texShape}_${i}`});let a=n.constructor.name;return a+="_"+s+"_"+n.userCode+`${M().getNumber("WEBGL_VERSION")}`,a}(e,h,d),f=this.getAndSaveBinary(p,()=>function IM(n,t,e,s){const r=e.map((c,h)=>{const d={logicalShape:c.shape,texShape:c.isUniform?null:c.texData.texShape,isUniform:c.isUniform,isPacked:!c.isUniform&&c.texData.isPacked,flatOffset:null};return null!=c.texData&&null!=c.texData.slice&&c.texData.slice.flatOffset>0&&(d.flatOffset=c.texData.slice.flatOffset),{name:t.variableNames[h],shapeInfo:d}}),a=r.map(c=>c.shapeInfo),o={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},i=BV(r,o,t),l=function yV(n,t){const e=Ws(n,()=>n.createShader(n.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(ce(n,()=>n.shaderSource(e,t)),ce(n,()=>n.compileShader(e)),M().get("ENGINE_COMPILE_ONLY"))return e;if(!1===n.getShaderParameter(e,n.COMPILE_STATUS))throw Y0(t,n.getShaderInfoLog(e)),new Error("Failed to compile fragment shader.");return e}(n.gl,i),u=n.createProgram(l);return M().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:l,source:i,webGLProgram:u,inShapeInfos:a,outShapeInfo:o,variablesLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:(n.buildVao(u),Object.assign({program:t,fragmentShader:l,source:i,webGLProgram:u,inShapeInfos:a,outShapeInfo:o},aw(n,t,u)))}(this.gpgpu,e,h,d)),g=null!=this.activeTimers;let m;g&&(m=this.startTimer()),M().get("ENGINE_COMPILE_ONLY")||function NM(n,t,e,s,r){t.program.enableShapeUniforms||(ow(t.inShapeInfos,e),ow([t.outShapeInfo],[s]));const a=s.texData.texture,o=s.texData.texShape;s.texData.isPacked?n.setOutputPackedMatrixTexture(a.texture,o[0],o[1]):n.setOutputMatrixTexture(a.texture,o[0],o[1]),n.setProgram(t.webGLProgram),n.bindVertexArray(t.webGLProgram.vao),1===M().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&n.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&n.gl.uniform1f(t.nanLoc,NaN);for(let l=0;l<e.length;++l){const u=e[l],{uniform:c,offset:h,shape:d,texShape:p}=t.variablesLocations[l];if(d){const{uniformShape:f}=vf(t.program.packedInputs,u.shape,u.texData.texShape);switch(f.length){case 1:n.gl.uniform1iv(d,new Int32Array(f));break;case 2:n.gl.uniform2iv(d,new Int32Array(f));break;case 3:n.gl.uniform3iv(d,new Int32Array(f));break;case 4:n.gl.uniform4iv(d,new Int32Array(f))}}if(p&&n.gl.uniform2i(p,u.texData.texShape[0],u.texData.texShape[1]),null!=c){if(u.isUniform){if(L(u.shape)<2)n.gl.uniform1f(c,u.uniformValues[0]);else{let f=u.uniformValues;f instanceof Float32Array||(f=new Float32Array(f)),n.gl.uniform1fv(c,f)}continue}null!=u.texData.slice&&null!=h&&n.gl.uniform1i(h,u.texData.slice.flatOffset),n.setInputMatrixTexture(u.texData.texture.texture,c,l)}}const i=t.outShapeLocation;if(i)switch(s.shape.length){case 1:n.gl.uniform1iv(i,new Int32Array(s.shape));break;case 2:n.gl.uniform2iv(i,new Int32Array(s.shape));break;case 3:n.gl.uniform3iv(i,new Int32Array(s.shape));break;case 4:n.gl.uniform4iv(i,new Int32Array(s.shape))}if(t.outShapeStridesLocation){const l=Ne(s.shape);switch(s.shape.length){case 2:n.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(l));break;case 3:n.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(l));break;case 4:n.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(l))}}if(t.outTexShapeLocation&&n.gl.uniform2i(t.outTexShapeLocation,s.texData.texShape[0],s.texData.texShape[1]),t.program.customUniforms&&r)for(let l=0;l<t.program.customUniforms.length;++l){const u=t.program.customUniforms[l],c=t.customUniformLocations[l],h=r[l];if("float"===u.type)n.gl.uniform1fv(c,h);else if("vec2"===u.type)n.gl.uniform2fv(c,h);else if("vec3"===u.type)n.gl.uniform3fv(c,h);else if("vec4"===u.type)n.gl.uniform4fv(c,h);else if("int"===u.type)n.gl.uniform1iv(c,h);else if("ivec2"===u.type)n.gl.uniform2iv(c,h);else if("ivec3"===u.type)n.gl.uniform3iv(c,h);else{if("ivec4"!==u.type)throw Error(`uniform type ${u.type} is not supported yet.`);n.gl.uniform4iv(c,h)}}n.executeProgram()}(this.gpgpu,f,h,d,a),c.forEach(x=>this.disposeIntermediateTensorInfo(x)),g&&(m=this.endTimer(m),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(m)}));const y=M().getNumber("WEBGL_FLUSH_THRESHOLD");if(y>0){const x=wn();x-this.lastGlFlushTime>y&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=x)}if(!M().getBool("WEBGL_LAZILY_UNPACK")&&u.isPacked&&!1===o){const x=this.unpackTensor(l);return this.disposeIntermediateTensorInfo(l),x}return l}compileAndRun(e,s,r,a,o=!1){return this.runWebGLProgram(e,s,r=r||s[0].dtype,a,o)}getAndSaveBinary(e,s){return e in this.binaryCache||(this.binaryCache[e]=s()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(M().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach(s=>{this.gpgpu.deleteProgram(this.binaryCache[s].webGLProgram),delete this.binaryCache[s]}),this.textureManager.dispose(),null!=this.canvas&&typeof HTMLCanvasElement<"u"&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=z(()=>{if(!M().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=M().getBool("DEBUG");M().set("DEBUG",!1);const s=this.abs(Fe(1e-8)).dataSync()[0];if(M().set("DEBUG",e),s>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const s=this.texData.get(e),{shape:r,dtype:a,values:o,texture:i,usage:l,isPacked:u}=s;if(null!=i)return;const c=null!=this.activeTimers;let h;c&&(h=wn());let d=s.texShape;if(null==d&&(d=function AV(n,t=!1){let e=M().getNumber("WEBGL_MAX_TEXTURE_SIZE"),s=M().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");s===1/0&&M().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(s=e/2),t&&(e*=2,s*=2,1===(n=n.map((i,l)=>l>=n.length-2?Q(n[l]):n[l])).length&&(n=[2,n[0]])),2!==n.length&&(n=Hs(n).newShape);let r=L(n),a=null;n.length<=1&&r<=e?a=[1,r]:2===n.length&&n[0]<=e&&n[1]<=e?a=n:3===n.length&&n[0]*n[1]<=e&&n[2]<=e?a=[n[0]*n[1],n[2]]:3===n.length&&n[0]<=e&&n[1]*n[2]<=e?a=[n[0],n[1]*n[2]]:4===n.length&&n[0]*n[1]*n[2]<=e&&n[3]<=e?a=[n[0]*n[1]*n[2],n[3]]:4===n.length&&n[0]<=e&&n[1]*n[2]*n[3]<=e&&(a=[n[0],n[1]*n[2]*n[3]]);const o=null!=a&&Math.max(...a)>s&&Math.min(...a)<=(t?2:1)&&Math.min(...a)>0;if(null==a||o)if(t){const i=Aa(n);let l=2,u=2;n.length&&([l,u]=Ra(n)),r=i*(l/2)*(u/2),a=an(r).map(c=>2*c)}else a=an(r);return a}(r,u),s.texShape=d),null!=o){const p=Qu(r);let f,g=d[1],m=d[0];const y=o instanceof Uint8Array||o instanceof Uint8ClampedArray;(u||!y)&&([g,m]=Ea(d[0],d[1])),f=u?new AM(p,y):new iw(p,y);const x=y?[m,g]:d,b=this.makeTensorInfo(x,a),w=this.texData.get(b.dataId);w.usage=y?Zn.PIXELS:Zn.UPLOAD,w.texShape=x,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(b.dataId),g,m,o);const N=this.runWebGLProgram(f,[b],a,[[m,g]],!0),k=this.texData.get(N.dataId);s.texShape=k.texShape,s.isPacked=k.isPacked,s.usage=k.usage,M().get("ENGINE_COMPILE_ONLY")?this.disposeData(N.dataId):(s.texture=k.texture,s.values=null,this.texData.delete(N.dataId)),this.disposeIntermediateTensorInfo(b),c&&(this.uploadWaitMs+=wn()-h)}else{const p=this.acquireTexture(d,l,a,u);s.texture=p}}convertAndCacheOnCPU(e,s){const r=this.texData.get(e),{dtype:a}=r;return null!=s&&(r.values=function d3(n,t){if("float32"===t||"complex64"===t)return n;if("int32"===t||"bool"===t){const e="int32"===t?new Int32Array(n.length):new Uint8Array(n.length);for(let s=0;s<e.length;++s)e[s]=Math.round(n[s]);return e}throw new Error(`Unknown dtype ${t}`)}(s,a)),r.values}acquireTexture(e,s,r,a){if(this.numBytesInGPU+=this.computeBytes(e,r),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const o=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${o} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,s,a)}computeBytes(e,s){return e[0]*e[1]*Ri(s)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}checkCompileCompletionAsync(){var e=this;return O(function*(){const s=[];if(e.gpgpu.parallelCompilationExtension){for(const[,r]of Object.entries(e.binaryCache))s.push(e.checkCompletionAsync_(r));return Promise.all(s)}for(const[,r]of Object.entries(e.binaryCache)){const a=new Promise(o=>{try{e.checkCompletion_(r),o(!0)}catch(i){throw i}});s.push(a)}return Promise.all(s)})()}checkCompletionAsync_(e){var s=this;return O(function*(){return s.gpgpu.gl.getProgramParameter(e.webGLProgram,s.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?s.checkCompletion_(e):(yield Wg(),s.checkCompletionAsync_(e))})()}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS))throw console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS)?(Y0(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.")):new Error("Failed to link vertex and fragment shaders.");return!0}getUniformLocations(){for(const e of Object.values(this.binaryCache)){this.gpgpu.buildVao(e.webGLProgram);const{variablesLocations:s,customUniformLocations:r,infLoc:a,nanLoc:o,outShapeLocation:i,outShapeStridesLocation:l,outTexShapeLocation:u}=aw(this.gpgpu,e.program,e.webGLProgram);e.variablesLocations=s,e.customUniformLocations=r,e.infLoc=a,e.nanLoc=o,e.outShapeLocation=i,e.outShapeStridesLocation=l,e.outTexShapeLocation=u}}createTensorFromGPUData(e,s,r){e.channels=e.channels||"RGBA";const{texture:a,height:o,width:i,channels:l}=e,u=ps().backend;if(!u.gpgpu.gl.isTexture(a))throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");const c=u.writeTexture(a,s,r,o,i,l);return ps().makeTensorFromDataId(c,s,r,u)}}return n.nextDataId=0,n})();Sm()&&km("webgl",()=>new h3,2);const Nf="\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n";class Xr{constructor(t,e,s){this.variableNames=["A","B"],this.outputShape=Pe(e,s),this.enableShapeUniforms=hn(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${t}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const Yr="\n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n";class La{constructor(t,e,s,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Pe(e,s);const a=this.outputShape.length;this.enableShapeUniforms=hn(a);let o="";if(r)if(0===a||1===L(this.outputShape))o="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(o=`\n          ${it(a)} coords = getOutputCoords();\n        `,1===a)o+=this.enableShapeUniforms?"\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const l=xn("coords",a);o+=this.enableShapeUniforms?`\n            bool nextRowOutOfBounds =\n              (${l[a-2]} + 1) >= outShape[${a} - 2];\n            bool nextColOutOfBounds =\n              (${l[a-1]} + 1) >= outShape[${a} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:`\n            bool nextRowOutOfBounds =\n              (${l[a-2]} + 1) >= ${this.outputShape[a-2]};\n            bool nextColOutOfBounds =\n              (${l[a-1]} + 1) >= ${this.outputShape[a-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${t}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${o}\n\n        setOutput(result);\n      }\n    `}}function En(n){const{inputs:t,backend:e}=n,{x:s}=t;return e.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const m3={kernelName:co,backendName:"webgl",kernelFunc:En};function yr(n){const{inputs:t,backend:e}=n,{real:s,imag:r}=t,a=e.makeTensorInfo(s.shape,"complex64"),o=e.texData.get(a.dataId),i=En({inputs:{x:s},backend:e}),l=En({inputs:{x:r},backend:e});return o.complexTensorInfos={real:i,imag:l},a}const g3={kernelName:Ac,backendName:"webgl",kernelFunc:yr},Sw="return (a < 0.) ? b * a : a;",Iw="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",x3={kernelName:Qi,backendName:"webgl",kernelFunc:function y3(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{alpha:a}=s,o=e.makeTensorInfo([],"float32",qs(a,"float32")),i=M().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new La(Iw,r.shape,o.shape):new Xr(Sw,r.shape,o.shape),l=e.runWebGLProgram(i,[r,o],"float32");return e.disposeIntermediateTensorInfo(o),l}},Nw="return (a < 0.) ? b * a : a;",Cw="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",w3={kernelName:xl,backendName:"webgl",kernelFunc:function b3(n){const{inputs:t,backend:e}=n,{x:s,alpha:r}=t,a=M().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new La(Cw,s.shape,r.shape):new Xr(Nw,s.shape,r.shape);return e.runWebGLProgram(a,[s,r],"float32")}},Va="if (isnan(x)) return x;";function Ze({opSnippet:n,packedOpSnippet:t,cpuKernelImpl:e,dtype:s}){return({inputs:r,backend:a})=>{const{x:o}=r,i=a,l=s||o.dtype;if(i.shouldExecuteOnCPU([o])&&null!=e){const h=i.texData.get(o.dataId),d=e(h.values,l);return i.makeTensorInfo(o.shape,l,d)}let c;return c=M().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new gr(o.shape,t):new $s(o.shape,n),i.runWebGLProgram(c,[o],l)}}function nn({opSnippet:n,packedOpSnippet:t,checkOutOfBounds:e=!1,supportsComplex:s=!1,cpuKernelImpl:r,dtype:a}){return({inputs:o,backend:i})=>{const{a:l,b:u}=o,c=i;if(s&&"complex64"===l.dtype){const f=c.texData.get(l.dataId),g=c.texData.get(u.dataId),[m,y]=[[f.complexTensorInfos.real,g.complexTensorInfos.real],[f.complexTensorInfos.imag,g.complexTensorInfos.imag]].map(b=>{const[w,v]=b,I={dataId:w.dataId,dtype:w.dtype,shape:l.shape},N={dataId:v.dataId,dtype:v.dtype,shape:u.shape},k=new Xr(n,l.shape,u.shape);return c.runWebGLProgram(k,[I,N],Tn(w.dtype,v.dtype))}),x=yr({inputs:{real:m,imag:y},backend:c});return c.disposeIntermediateTensorInfo(m),c.disposeIntermediateTensorInfo(y),x}const h=a||Tn(l.dtype,u.dtype);if(("string"===l.dtype||"string"===u.dtype||c.shouldExecuteOnCPU([l,u]))&&null!=r){const f=c.texData.get(l.dataId).values,g=c.texData.get(u.dataId).values,m="string"===l.dtype?zs(f):f,y="string"===l.dtype?zs(g):g,[x,b]=r(l.shape,u.shape,m,y,h),w=c.makeTensorInfo(b,h);return c.texData.get(w.dataId).values=x,w}let p;return p=M().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new La(t,l.shape,u.shape,e):new Xr(n,l.shape,u.shape),c.runWebGLProgram(p,[l,u],h)}}function ki(n,t=!1){if("linear"===n)return t?Jz:qz;if("relu"===n)return t?e3:Xz;if("elu"===n)return t?Qz:Kz;if("relu6"===n)return t?t3:Yz;if("prelu"===n)return t?Cw:Nw;if("leakyrelu"===n)return t?Iw:Sw;if("sigmoid"===n)return t?n3:Zz;throw new Error(`Activation ${n} has not been implemented for the WebGL backend.`)}class kw{constructor(t,e,s,r=!1,a=!1,o=!1,i=null,l=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=s,this.enableShapeUniforms=hn(this.outputShape.length);const h=Math.ceil((r?t[1]:t[2])/2),d=r?"i * 2, rc.y":"rc.y, i * 2",p=a?"rc.z, i * 2":"i * 2, rc.z",f=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],g=a?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",y="";i&&(m=l?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:u?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,y="result = activation(result);");const x=o?"result += getBiasAtOutCoords();":"";o&&this.variableNames.push("bias"),l&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let b="rc.x",w="rc.x";t[0]<e[0]?b=`imod(rc.x, ${t[0]})`:e[0]<t[0]&&(w=`imod(rc.x, ${e[0]})`),this.userCode=`\n      ${m}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${h}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        int batchA = ${b};\n        int batchB = ${w};\n        for (int i = 0; i < ${h}; i++) {\n          vec4 a = getMatrixA(batchA, ${d});\n          vec4 b = getMatrixB(batchB, ${p});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${f[0]} * ${g[0]});\n          result += (${f[1]} * ${g[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${x}\n\n        ${y}\n\n        setOutput(result);\n      }\n    `}}const Tw={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"};class _w{constructor(t,e,s){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Pe(e,s),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${t}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const $w="return a * b;";function Cf(n){const{inputs:t,backend:e}=n,{a:s,b:r}=t,a=Tn(s.dtype,r.dtype);if("complex64"===s.dtype){const i=e.texData.get(s.dataId),l=e.texData.get(r.dataId),u=new _w(Tw.REAL,s.shape,r.shape),c=new _w(Tw.IMAG,s.shape,r.shape),h=[{dataId:i.complexTensorInfos.real.dataId,dtype:i.complexTensorInfos.real.dtype,shape:s.shape},{dataId:i.complexTensorInfos.imag.dataId,dtype:i.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:l.complexTensorInfos.real.dataId,dtype:l.complexTensorInfos.real.dtype,shape:r.shape},{dataId:l.complexTensorInfos.imag.dataId,dtype:l.complexTensorInfos.imag.dtype,shape:r.shape}],d=e.runWebGLProgram(u,h,"float32"),p=e.runWebGLProgram(c,h,"float32"),f=yr({inputs:{real:d,imag:p},backend:e});return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),f}if(e.shouldExecuteOnCPU([s,r])){const i=e.texData.get(s.dataId),l=e.texData.get(r.dataId),[u,c]=gz(s.shape,r.shape,i.values,l.values,a),h=e.makeTensorInfo(c,a);return e.texData.get(h.dataId).values=u,h}let o;return o=M().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new La($w,s.shape,r.shape):new Xr($w,s.shape,r.shape),e.runWebGLProgram(o,[s,r],a)}const v3={kernelName:wo,backendName:"webgl",kernelFunc:Cf};function ue(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{shape:a}=s,o=e,i=L(r.shape),l=Of(a,i),u=L(l);S(i===u,()=>`The new shape (${l}) has ${u} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`);const c=o.texData.get(r.dataId);return!c.isPacked||tc(r.shape,l)||null!==c.texture&&tc(c.shape,l)?(o.incRef(r.dataId),{dataId:r.dataId,shape:l,dtype:r.dtype}):function S3(n,t,e){const s=[Aa(n.shape),...Ra(n.shape)],r={dtype:n.dtype,shape:s,dataId:n.dataId},a=[Aa(t),...Ra(t)],o=new yw(a,s),u=e.runWebGLProgram(o,[r],n.dtype,[s],!0);return{dataId:u.dataId,shape:t,dtype:u.dtype}}(r,l,o)}const I3={kernelName:wl,backendName:"webgl",kernelFunc:ue};class Ew{constructor(t,e){this.variableNames=["x"];const{windowSize:s,batchSize:r,inSize:a,outSize:o}=t;this.outputShape=[r,o];const i=4*Math.floor(s/4),l=s%4;let u="sumValue += dot(values, ones);";if(null!=e){const h=1/e;u=`sumValue += dot(values * ${Gt(h)?h.toPrecision(2):h}, ones);`}let c="";a%s>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===l}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}class N3{constructor(t,e){this.variableNames=["x"];const{windowSize:s,batchSize:r,inSize:a,outSize:o}=t;this.outputShape=[r,o];let i="0.0",l="";"prod"===e?i="1.0":"min"===e?(i="1.0 / 1e-20",l="min"):"max"===e&&(i="-1.0 / 1e-20",l="max");let u=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===e?u="sumValue":"prod"===e?u="prodValue":"all"===e?u="allValue":"any"===e&&(u="anyValue");const c=4*Math.floor(s/4),h=s%4;let d=`\n      if (${"sum"===e}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===e}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${l}(values, minMaxValue);\n        if (${"min"===e} || ${"max"===e}) {\n          minMaxValue = ${l}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,p="vec4";"all"===e?(i="1.0",d="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===e&&(i="0.0",d="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let f="";a%s>0&&(f=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${f}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${c}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${d}\n        }\n\n        int inIdx = inOffset + ${c};\n        if (${1===h}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${d}\n        } else if (${2===h}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${d}\n        } else if (${3===h}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${d}\n        }\n        setOutput(${u});\n      }\n    `}}function Zr(n,t,e,s){const r=function C3(n){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const e=t.length?t[t.length-1].outSize:n[1],s=uu(e);t.push({inSize:e,windowSize:s,outSize:Math.ceil(e/s)})}return t}(n.shape);let a=n;for(let o=0;o<r.length;o++){const{inSize:i,windowSize:l,outSize:u}=r[o];let c,h;c="mean"===e?0===o?new Ew({windowSize:l,inSize:i,batchSize:n.shape[0],outSize:u},i):new Ew({windowSize:l,inSize:i,batchSize:n.shape[0],outSize:u}):new N3({windowSize:l,inSize:i,batchSize:n.shape[0],outSize:u},e),h=a,a=s.runWebGLProgram(c,[a],t),h.dataId!==n.dataId&&s.disposeIntermediateTensorInfo(h)}return a}class k3{constructor(t,e){this.variableNames=["A"];const s=new Array(t.length);for(let o=0;o<s.length;o++)s[o]=t[e[o]];this.outputShape=s,this.rank=s.length;const r=it(this.rank),a=function T3(n){const t=n.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(t);for(let r=0;r<n.length;r++)s[n[r]]=e[r];return s.join()}(e);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${a}));\n    }\n    `}}class _3{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const s=new Array(t.length);for(let c=0;c<s.length;c++)s[c]=t[e[c]];if(this.outputShape=s,this.rank=s.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=it(this.rank),a=gw("rc",this.rank),o=new Array(this.rank);for(let c=0;c<e.length;c++)o[e[c]]=a[c];const i=`vec2(${o.slice(-2).join()})`,l=`++${a[this.rank-1]} < ${s[this.rank-1]}`,u=`getChannel(getA(${o.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${l}) {\n        result[1] = ${u};\n      }\n      --${a[this.rank-1]};\n      if(++${a[this.rank-2]} < ${s[this.rank-2]}) {\n        result[2] = ${u};\n        if(${l}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function ic(n,t,e){const s=M().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new _3(n.shape,t):new k3(n.shape,t);return e.runWebGLProgram(s,[n],n.dtype)}function lc(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a,keepDims:o}=s;return function $3(n,t,e,s){const a=n.shape.length,o=Ue(t,n.shape);let i=o;const l=It(i,a),u=null!=l;let c=n;u&&(c=ic(n,l,s),i=Et(i.length,a)),tn("sum",i,a);const[h,d]=Xt(c.shape,i);let p=h;e&&(p=$t(h,o));const f=L(d),y=ue({inputs:{x:c},attrs:{shape:[L(n.shape)/f,f]},backend:s}),b=Zr(y,Nh(n.dtype),"sum",s),w=ue({inputs:{x:b},attrs:{shape:p},backend:s});return s.disposeIntermediateTensorInfo(y),s.disposeIntermediateTensorInfo(b),u&&s.disposeIntermediateTensorInfo(c),w}(r,a,o,e)}const E3={kernelName:kl,backendName:"webgl",kernelFunc:lc};function bn(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{perm:a}=s,o=e,l=new Array(r.shape.length);for(let c=0;c<l.length;c++)l[c]=r.shape[a[c]];let u;if(o.shouldExecuteOnCPU([r])){const h=o.texData.get(r.dataId).values,d=If(h,r.shape,r.dtype,a,l);u=o.makeTensorInfo(l,r.dtype),o.texData.get(u.dataId).values=d}else u=ic(r,a,o);return u}const A3={kernelName:ra,backendName:"webgl",kernelFunc:bn},Aw=1e3;function uc({a:n,b:t,transposeA:e,transposeB:s,backend:r,bias:a=null,preluActivationWeights:o=null,leakyreluAlpha:i=0,activation:l=null}){const u=n.shape.length,c=t.shape.length,h=e?n.shape[u-2]:n.shape[u-1],d=s?t.shape[c-1]:t.shape[c-2],p=e?n.shape[u-1]:n.shape[u-2],f=s?t.shape[c-2]:t.shape[c-1],g=n.shape.slice(0,-2),m=t.shape.slice(0,-2),y=L(g),x=L(m),w=Pe(n.shape.slice(0,-2),t.shape.slice(0,-2)).concat([p,f]);S(h===d,()=>`Error in matMul: inner shapes (${h}) and (${d}) of Tensors with shapes ${n.shape} and ${t.shape} and transposeA=${e} and transposeB=${s} must match.`);const v=e?[y,h,p]:[y,p,h],I=s?[x,f,d]:[x,d,f],N=ue({inputs:{x:n},backend:r,attrs:{shape:v}}),k=ue({inputs:{x:t},backend:r,attrs:{shape:I}}),_=[N,k],$=Math.max(y,x),P=e?N.shape[1]:N.shape[2],B=null!=a,W=null!=o,U="leakyrelu"===l,G=null!=l?ki(l,!0):null;let K;if((1===p||1===f)&&P>Aw&&!1===(B||W||U||null!=G)){let X=N,ee=k;e&&(X=bn({inputs:{x:N},backend:r,attrs:{perm:[0,2,1]}}),_.push(X)),s&&(ee=bn({inputs:{x:k},backend:r,attrs:{perm:[0,2,1]}}),_.push(ee));const ie=1===f;let oe=X;1!==f&&(oe=ue({inputs:{x:X},backend:r,attrs:{shape:[$,P,1]}}),_.push(oe));const de=1===f?2:1;let le=ee;ie&&(le=ue({inputs:{x:ee},backend:r,attrs:{shape:[$,1,P]}}),_.push(le));const me=Cf({inputs:{a:oe,b:le},backend:r});K=lc({inputs:{x:me},backend:r,attrs:{axis:de,keepDims:!0}}),_.push(me)}else{const X=Tn(n.dtype,t.dtype),ee=new kw(v,I,[$,p,f],e,s,B,G,W,U),se=[N,k];if(null!=a&&se.push(a),W&&se.push(o),U){const ie=r.makeTensorInfo([],"float32",qs(i,"float32"));se.push(ie),_.push(ie)}K=r.runWebGLProgram(ee,se,X)}const H=ue({inputs:{x:K},backend:r,attrs:{shape:w}});_.push(K);for(const X of _)r.disposeIntermediateTensorInfo(X);return H}const D3={kernelName:Fl,backendName:"webgl",kernelFunc:function R3(n){const{inputs:t,backend:e,attrs:s}=n,{a:r,b:a,bias:o,preluActivationWeights:i}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;return uc({a:r,b:a,transposeA:l,transposeB:u,backend:e,bias:o,preluActivationWeights:i,leakyreluAlpha:h,activation:c})}},Rw="return abs(x);",O3={kernelName:Di,backendName:"webgl",kernelFunc:function F3(n){const{inputs:t,backend:e}=n,{x:s}=t;if(e.shouldExecuteOnCPU([s])&&"complex64"!==s.dtype){const a=e.texData.get(s.dataId),o=fw(a.values);return e.makeTensorInfo(s.shape,s.dtype,o)}let r;return r=M().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new gr(s.shape,Rw):new $s(s.shape,Rw),e.runWebGLProgram(r,[s],s.dtype)}},L3=Ze({opSnippet:Mn+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),V3={kernelName:Ua,backendName:"webgl",kernelFunc:L3},z3=Ze({opSnippet:Mn+"\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),B3={kernelName:Ga,backendName:"webgl",kernelFunc:z3},Dw="return a + b;",W3=nn({opSnippet:Dw,packedOpSnippet:Dw,supportsComplex:!0,cpuKernelImpl:XM}),U3={kernelName:sa,backendName:"webgl",kernelFunc:W3};class G3{constructor(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map((a,o)=>`T${o}`);const s=[];this.variableNames.forEach(a=>{s.push(`float v${a} = get${a}AtOutCoords();`)});const r=this.variableNames.map(a=>`v${a}`).join(" + ");this.userCode=`\n      void main() {\n        ${s.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class H3{constructor(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map((a,o)=>`T${o}`);const s=[];this.variableNames.forEach(a=>{s.push(`vec4 v${a} = get${a}AtOutCoords();`)});const r=this.variableNames.map(a=>`v${a}`).join(" + ");this.userCode=`\n      void main() {\n        ${s.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}const j3={kernelName:Nc,backendName:"webgl",kernelFunc:function cc(n){const{inputs:t,backend:e}=n,s=t;if(1===s.length)return En({inputs:{x:s[0]},backend:e});if(s.length>M().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const l=Math.floor(s.length/2),u=cc({inputs:s.slice(0,l),backend:e}),c=cc({inputs:s.slice(l),backend:e});return cc({inputs:[u,c],backend:e})}const r=s.map(l=>l.dtype).reduce((l,u)=>Tn(l,u)),a=s.map(l=>l.shape),i=M().getBool("WEBGL_PACK")?new H3(s[0].shape,a):new G3(s[0].shape,a);return e.runWebGLProgram(i,s,r)}},K3={kernelName:"All",backendName:"webgl",kernelFunc:function q3(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a,keepDims:o}=s,i=r.shape.length,l=Ue(a,r.shape);let u=l;const c=It(u,i);let h=r;null!=c&&(h=bn({inputs:{x:r},backend:e,attrs:{perm:c}}),u=Et(u.length,i)),tn("all",u,i);const[d,p]=Xt(h.shape,u),g=ue({inputs:{x:h},backend:e,attrs:{shape:[-1,L(p)]}}),m=Zr(g,g.dtype,"all",e);let y;return y=ue(o?{inputs:{x:m},backend:e,attrs:{shape:$t(d,l)}}:{inputs:{x:m},backend:e,attrs:{shape:d}}),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(m),null!=c&&e.disposeIntermediateTensorInfo(h),y}},Y3={kernelName:"Any",backendName:"webgl",kernelFunc:function X3(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a,keepDims:o}=s,i=r.shape.length,l=Ue(a,r.shape);let u=l;const c=It(u,i);let h=r;null!=c&&(h=bn({inputs:{x:r},backend:e,attrs:{perm:c}}),u=Et(u.length,i)),tn("any",u,i);const[d,p]=Xt(h.shape,u),g=ue({inputs:{x:h},backend:e,attrs:{shape:[-1,L(p)]}}),m=Zr(g,g.dtype,"any",e);let y;return y=ue(o?{inputs:{x:m},backend:e,attrs:{shape:$t(d,l)}}:{inputs:{x:m},backend:e,attrs:{shape:d}}),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(m),null!=c&&e.disposeIntermediateTensorInfo(h),y}};class Z3{constructor(t,e,s){this.variableNames=["A"];const{windowSize:r,batchSize:a,outSize:o}=t;s||this.variableNames.push("bestIndicesA"),this.outputShape=[a,o],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${s?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));"};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${"max"===e?">":"<"} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class J3{constructor(t,e,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,S(t.length>2,()=>`Packed arg${s.charAt(0).toUpperCase()+s.slice(1)} supports only inputs with rank above 2.`);const o=Math.ceil(t[t.length-1]/e);this.outputShape=t.slice(0,-1),o>1&&this.outputShape.push(o),r||this.variableNames.push("bestIndicesA");const i=this.outputShape,l=i.length,u=it(l),c=xn("coords",l);let h,d;if(1===o){d=l+1;const k=it(d);h=`\n        ${k} sourceLocR = ${k}(${c.join()}, 0);\n        ++${c[l-1]};\n        ${k} sourceLocG = ${k}(${c.join()}, 0);\n        ++${c[l-2]};\n        ${k} sourceLocA = ${k}(${c.join()}, 0);\n        --${c[l-1]};\n        ${k} sourceLocB = ${k}(${c.join()}, 0);\n        --${c[l-2]};`}else d=l,h=`\n        ${u} sourceLocR = coords;\n        ++${c[l-1]};\n        ${u} sourceLocG = coords;\n        ++${c[l-2]};\n        ${u} sourceLocA = coords;\n        --${c[l-1]};\n        ${u} sourceLocB = coords;\n        --${c[l-2]};`;const p=["x","y","z","w","u","v"].slice(0,d),f="."+p[d-1],g=p.map(k=>"int "+k),m=xn("sourceLocR",d-1).concat("inIdx.r"),y=xn("sourceLocG",d-1).concat("inIdx.g"),x=xn("sourceLocB",d-1).concat("inIdx.b"),b=xn("sourceLocA",d-1).concat("inIdx.a"),w="max"===s?"greaterThan":"lessThan",v=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${x.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,I=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${y.join()}) : 0.,\n            hasNextRow ? getAChannel(${x.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,N=r?"":`\n      float getBestIndicesAChannel(${g.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${g.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${N}\n      void main() {\n        ${u} coords = getOutputCoords();\n        bool hasNextCol = ${c[l-1]} < ${i[l-1]-1};\n        bool hasNextRow = ${c[l-2]} < ${i[l-2]-1};\n        ${h}\n        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},\n          sourceLocB${f}, sourceLocA${f}) * ${e};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${I};\n\n        for (int i = 0; i < ${e}; i++) {\n          inIdx = srcIdx;\n          ${v}\n          vec4 candidate = ${I};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${w}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function Fw(n,t,e,s=null){let r=t.shape[0],a=t.shape[1];null!=s&&(r=s.shape[0],a=s.shape[1]);const o=uu(a),i={windowSize:o,inSize:a,batchSize:r,outSize:Math.ceil(a/o)},l=new Z3(i,e,null==s),u=[t];null!=s&&u.push(s);const c=n.runWebGLProgram(l,u,"int32");if(1===c.shape[1])return c;const h=Fw(n,t,e,c);return n.disposeIntermediateTensorInfo(c),h}function Ow(n,t,e,s=null){const r=null!=s?s.shape:t.shape,o=uu(r[r.length-1]),i=new J3(r,o,e,null==s),u=n.runWebGLProgram(i,null==s?[t]:[t,s],"int32");if(u.shape.length===t.shape.length){const c=Ow(n,t,e,u);return n.disposeIntermediateTensorInfo(u),c}return u}function Pw(n,t,e,s){const r=[e];if(tn("arg"+s.charAt(0).toUpperCase()+s.slice(1),r,t.shape.length),!M().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const a=[],o=n.texData.get(t.dataId);let l=t;null!==o&&o.isPacked&&(l=n.unpackTensor(t),a.push(l));const[u,c]=Xt(l.shape,r),h=L(c),d=ue({inputs:{x:l},backend:n,attrs:{shape:[-1,h]}});a.push(d);const p=Fw(n,d,s);a.push(p);const f=ue({inputs:{x:p},backend:n,attrs:{shape:u}});return a.forEach(g=>n.disposeIntermediateTensorInfo(g)),f}return Ow(n,t,s)}const eB={kernelName:Fi,backendName:"webgl",kernelFunc:function Q3(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a}=s;let o=Ue(a,r.shape);const i=It(o,r.shape.length);let l=r;const u=[];null!=i&&(l=bn({inputs:{x:r},backend:e,attrs:{perm:i}}),u.push(l),o=Et(o.length,l.shape.length)),tn("argMax",[o[0]],l.shape.length);const c=Pw(e,l,o[0],"max");return u.forEach(h=>e.disposeIntermediateTensorInfo(h)),c}},nB={kernelName:Oi,backendName:"webgl",kernelFunc:function tB(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a}=s;let o=Ue(a,r.shape);const i=It(o,r.shape.length);let l=r;const u=[];null!=i&&(l=bn({inputs:{x:r},backend:e,attrs:{perm:i}}),u.push(l),o=Et(o.length,l.shape.length)),tn("argMin",[o[0]],l.shape.length);const c=Pw(e,l,o[0],"min");return u.forEach(h=>e.disposeIntermediateTensorInfo(h)),c}},rB=Ze({opSnippet:Mn+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),aB={kernelName:Ha,backendName:"webgl",kernelFunc:rB},iB=Ze({opSnippet:Mn+"return log(x + sqrt(x * x + 1.0));"}),lB={kernelName:ja,backendName:"webgl",kernelFunc:iB},cB=Ze({opSnippet:Mn+"\n  return atan(x);\n"}),hB={kernelName:qa,backendName:"webgl",kernelFunc:cB},fB=nn({opSnippet:Nf+"\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+Yr+"\n  return result;\n"}),mB={kernelName:Xa,backendName:"webgl",kernelFunc:fB},yB=Ze({opSnippet:Mn+"\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),xB={kernelName:Ka,backendName:"webgl",kernelFunc:yB};class Ti{constructor(t,e,s,r=!1,a=!1){if(this.variableNames=["x"],"avg"===e&&s)throw new Error("Cannot compute positions for average pool.");const o=t.filterWidth,i=t.strideHeight,l=t.strideWidth,u=t.dilationHeight,c=t.dilationWidth,h=t.effectiveFilterHeight,d=t.effectiveFilterWidth,p=t.padInfo.top,f=t.padInfo.left;this.outputShape=t.outShape;const g="avg"===e;let x="0.0";if(g||(x="-1.0 / 1e-20"),s)return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${l});\n        const ivec2 pads = ivec2(${p}, ${f});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${h};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${d};\n                wC += ${c}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?a?`((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`:`(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`:`wR * ${d} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `);let w=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(w="avgValue / max(count, 1.0)");const v=4*Math.floor(o/4),I=o%4,N=`\n      if (${g}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${l});\n      const ivec2 pads = ivec2(${p}, ${f});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${h};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${v}; wC += 4) {\n            int xC = xCCorner + wC * ${c};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              getValue(batch, xR, xC + 2 * ${c}, d),\n              getValue(batch, xR, xC + 3 * ${c}, d)\n            );\n\n            ${N}\n          }\n\n          int xC = xCCorner + ${v};\n          if (${1===I}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${N}\n          } else if (${2===I}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${N}\n          } else if (${3===I}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              getValue(batch, xR, xC + 2 * ${c}, d),\n              initializationValue\n            );\n\n            ${N}\n          }\n        }\n        setOutput(${w});\n      }\n    `}}class kf{constructor(t,e,s,r=!1,a=!1){if(this.variableNames=["x"],"avg"===e&&s)throw new Error("Cannot compute positions for average pool.");const o=t.filterWidth,i=t.strideDepth,l=t.strideHeight,u=t.strideWidth,c=t.dilationDepth,h=t.dilationHeight,d=t.dilationWidth,p=t.effectiveFilterDepth,f=t.effectiveFilterHeight,g=t.effectiveFilterWidth,m=t.padInfo.front,y=t.padInfo.top,x=t.padInfo.left;this.outputShape=t.outShape;const b="avg"===e;let w="0.0";if(b||(w="-1.0 / 1e-20"),s)return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${l}, ${u});\n        const ivec3 pads = ivec3(${m}, ${y}, ${x});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${c}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${f};\n                wR += ${h}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${g};\n                  wC += ${d}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value >= currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?a?`(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`wD * ${f} * ${g} +\n                      wR * ${g} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `);let I=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(I="avgValue / max(count, 1.0)");const N=4*Math.floor(o/4),k=o%4,_=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${l}, ${u});\n      const ivec3 pads = ivec3(${m}, ${y}, ${x});\n      const float initializationValue = ${w};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${w});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${c}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${f};\n            wR += ${h}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${N}; wC += 4) {\n              int xC = xCCorner + wC * ${d};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${d}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${d}, ch)\n              );\n\n              ${_}\n            }\n\n            int xC = xCCorner + ${N};\n            if (${1===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${_}\n            } else if (${2===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${_}\n            } else if (${3===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${d}, ch),\n                initializationValue\n              );\n\n              ${_}\n            }\n          }\n        }\n        setOutput(${I});\n      }\n    `}}const wB={kernelName:Pi,backendName:"webgl",kernelFunc:function bB(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;Ni(r,"avgPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:l}=s;S(en(o,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`);const c=Gn(r.shape,a,o,1,i,l);if(1===c.filterWidth&&1===c.filterHeight&&ke(c.inShape,c.outShape))return En({inputs:{x:r},backend:e});const h=new Ti(c,"avg",!1);return e.runWebGLProgram(h,[r],"float32")}},SB={kernelName:Li,backendName:"webgl",kernelFunc:function vB(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:l,dataFormat:u}=s,h=Rs(r.shape,a,o,[1,1,1],i,l,u),d=new kf(h,"avg",!1);return e.runWebGLProgram(d,[r],"float32")}};class IB{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const l=t.effectiveFilterHeight,u=t.effectiveFilterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${l-1-t.padInfo.top}, ${u-1-t.padInfo.left});\n      const float avgMultiplier = float(${1/(t.filterHeight*t.filterWidth)});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${l};\n            wR += ${t.dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${u};\n            wC+= ${t.dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class NB{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const h=t.effectiveFilterDepth,d=t.effectiveFilterHeight,p=t.effectiveFilterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${h-1-t.padInfo.front}, ${d-1-t.padInfo.top}, ${p-1-t.padInfo.left});\n      const float avgMultiplier = float(${1/(t.filterDepth*t.filterHeight*t.filterWidth)});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${h};\n            wD += ${t.dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${t.strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${d};\n              wR += ${t.dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${t.dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const kB={kernelName:_c,backendName:"webgl",kernelFunc:function CB(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:a}=t,o=a,{filterSize:i,strides:l,pad:u,dimRoundingMode:c}=s,d=Rs(o.shape,i,l,[1,1,1],u,c),p=new NB(d);return e.runWebGLProgram(p,[r],o.dtype)}},_B={kernelName:Tc,backendName:"webgl",kernelFunc:function TB(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:a}=t,o=a;Ni([r,a],"avgPoolGrad");const{filterSize:i,strides:l,pad:u}=s,c=Gn(o.shape,i,l,1,u),h=new IB(c);return e.runWebGLProgram(h,[r],o.dtype)}},EB={kernelName:Vi,backendName:"webgl",kernelFunc:function $B(n){const{inputs:t,backend:e,attrs:s}=n,{a:r,b:a}=t,{transposeA:o,transposeB:i}=s;return uc({a:r,b:a,transposeA:o,transposeB:i,backend:e})}};class AB{constructor(t,e,s,r,a,o){this.outputShape=[],this.variableNames=["x","mean","variance"],Pe(t,e),Pe(t,s);let i="0.0";null!=r&&(Pe(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let l="1.0";null!=a&&(Pe(t,a),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${l};\n        float inv = scale * inversesqrt(variance + float(${o}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class RB{constructor(t,e,s,r,a,o){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Pe(t,e),Pe(t,s);let i="vec4(0.0)";null!=r&&(Pe(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let l="vec4(1.0)";null!=a&&(Pe(t,a),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${l};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${o}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const DB={kernelName:Yi,backendName:"webgl",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s,mean:r,variance:a,offset:o,scale:i}=n;S(r.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),S(null==o||r.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),S(null==i||r.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:l}=e;null==l&&(l=.001);const u=[s,r,a];let c=null;null!=o&&(c=o.shape,u.push(o));let h=null;null!=i&&(h=i.shape,u.push(i));const d=M().getBool("WEBGL_PACK_NORMALIZATION")?new RB(s.shape,r.shape,a.shape,c,h,l):new AB(s.shape,r.shape,a.shape,c,h,l);return t.runWebGLProgram(d,u,u[0].dtype)}};class FB{constructor(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;const e=it(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const s=function OB(n){if(1===n)return"sourceLoc";if(n<=6)return Tf.slice(0,n).map(t=>"sourceLoc."+t).join(",");throw Error(`Slicing for rank ${n} is not yet supported`)}(this.rank);let r;r=`\n        ${e} sourceLoc;\n        ${e} coords = getOutputCoords();\n        ${t.map((o,i)=>`sourceLoc.${Tf[i]} = start[${i}] + coords.${Tf[i]};`).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${r}\n        setOutput(getSource(${s}));\n      }\n    `}}const Tf=["x","y","z","w","u","v"];class PB{constructor(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const e=it(this.rank),s=xn("coords",this.rank),r=xn("sourceLoc",this.rank),a=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,o=`getChannel(getSource(${r.join()}), ${a})`,i=`\n      result.x = ${o};\n      if (++${s[this.rank-1]} < ${t[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${o};\n        --${r[this.rank-1]};\n      }\n    `,l=1===this.rank?"":`\n      --${s[this.rank-1]};\n      if (++${s[this.rank-2]} < ${t[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${o};\n        if (++${s[this.rank-1]} < ${t[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${o};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${e}(${t.map((c,h)=>`start[${h}]`).join()});`:t.map((c,h)=>`${r[h]} = ${s[h]} + start[${h}];`).join("\n");this.userCode=`\n      void main() {\n        ${e} coords = getOutputCoords();\n        ${e} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${i}\n        ${l}\n        setOutput(result);\n      }\n    `}}function Ma(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{begin:a,size:o}=s,[i,l]=ql(r,a,o);if(Yh(r,i,l),0===L(l))return e.makeTensorInfo(l,r.dtype,[]);if(e.shouldExecuteOnCPU([r])||"string"===r.dtype){const h=e.texData.get(r.dataId),d=Tz(h.values,i,l,r.shape,r.dtype);return e.makeTensorInfo(l,r.dtype,d)}const{isPacked:u}=e.texData.get(r.dataId),c=Jh(r.shape,i,l);if(u||!c){const h=M().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new PB(l):new FB(l);return e.runWebGLProgram(h,[r],r.dtype,[i])}return e.uploadToGPU(r.dataId),function LB(n,t,e,s){const r=s.texData.get(n.dataId),a=s.makeTensorInfo(e,n.dtype),o=s.texData.get(a.dataId);Object.assign(o,r),o.refCount=1,o.shape=e,o.dtype=n.dtype;let i=Qh(t,Ne(n.shape));r.slice&&(i+=r.slice.flatOffset),o.slice={flatOffset:i,origDataId:r.slice&&r.slice.origDataId||n.dataId};const l=s.dataRefCount.get(o.slice.origDataId)||1;return s.dataRefCount.set(o.slice.origDataId,l+1),a}(r,i,l,e)}const VB={kernelName:Cl,backendName:"webgl",kernelFunc:Ma},MB={kernelName:Mi,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockShape:a,crops:o}=s;S(r.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const i=a.reduce((x,b)=>x*b),l=ri(r.shape,a,i),u=ai(l.length,a.length),c=oi(r.shape,a,i),h=Od(o,a.length),d=Pd(c,o,a.length),p=[],f=ue({inputs:{x:r},backend:e,attrs:{shape:l}}),g=bn({inputs:{x:f},backend:e,attrs:{perm:u}}),m=ue({inputs:{x:g},backend:e,attrs:{shape:c}}),y=Ma({inputs:{x:m},backend:e,attrs:{begin:h,size:d}});return p.push(f),p.push(g),p.push(m),p.forEach(x=>e.disposeIntermediateTensorInfo(x)),y}},BB={kernelName:$c,backendName:"webgl",kernelFunc:function zB(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,weights:a}=t,{size:o}=s,i=e.readSync(r.dataId),l=e.readSync(a.dataId),u=pw(i,l,a.dtype,a.shape,o);return e.makeTensorInfo([o],a.dtype,u)}},HB={kernelName:Ec,backendName:"webgl",kernelFunc:function GB(n){const{inputs:t,backend:e}=n,{a:s,b:r}=t,a=M().getBool("WEBGL_PACK_BINARY_OPERATIONS"),o=M().getNumber("WEBGL_VERSION");if(e.shouldExecuteOnCPU([s,r])||1===o){const l=e.texData.get(s.dataId).values,u=e.texData.get(r.dataId).values,[c,h]=ZM(s.shape,r.shape,l,u,s.dtype),d=e.makeTensorInfo(h,s.dtype);return e.texData.get(d.dataId).values=c,d}let i;return i=a?new La("\n  int r = int(a.r) & int(b.r);\n  int g = int(a.g) & int(b.g);\n  int rb = int(a.b) & int(b.b);\n  int ra = int(a.a) & int(b.a);\n  return vec4(r, g, rb, ra);\n",s.shape,r.shape,!1):new Xr("\n  return float(int(a.r) & int(b.r));\n",s.shape,r.shape),e.runWebGLProgram(i,[s,r],s.dtype)}},qB={kernelName:Wf,backendName:"webgl",kernelFunc:function jB(n){const{inputs:t,backend:e}=n,{s0:s,s1:r}=t,a=e.readSync(s.dataId),o=e.readSync(r.dataId),i=Pe(Array.from(a),Array.from(o));return e.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},Lw=nn({opSnippet:"return float(a != b);",cpuKernelImpl:xz,dtype:"bool"}),KB={kernelName:pl,backendName:"webgl",kernelFunc:Lw};function _i(n){const{inputs:t,backend:e}=n,{input:s}=t;return En({inputs:{x:e.texData.get(s.dataId).complexTensorInfos.real},backend:e})}const XB={kernelName:sh,backendName:"webgl",kernelFunc:_i},JB={kernelName:Ya,backendName:"webgl",kernelFunc:function _f(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{dtype:a}=s;if("complex64"===a){if("complex64"===r.dtype)return En({inputs:{x:r},backend:e});const o=Yt(r.shape),i=_f({inputs:{x:r},backend:e,attrs:{dtype:"float32"}}),l=yr({inputs:{real:i,imag:o},backend:e});return o.dispose(),e.disposeIntermediateTensorInfo(i),l}if("complex64"===r.dtype){const o=_i({inputs:{input:r},backend:e}),i=_f({inputs:{x:o},backend:e,attrs:{dtype:a}});return e.disposeIntermediateTensorInfo(o),i}if(!Pf(r.dtype,a)){const o=En({inputs:{x:r},backend:e});return{dataId:o.dataId,shape:o.shape,dtype:a}}if(e.shouldExecuteOnCPU([r])){const o=e.texData.get(r.dataId).values,[i,l,u]=JM(o,r.shape,r.dtype,a);return e.makeTensorInfo(i,l,u)}if("int32"===a)return function ZB(n,t){const e=new $s(n.shape,"return float(int(x));"),s=t.runWebGLProgram(e,[n],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}(r,e);if("bool"===a){const o=e.makeTensorInfo([],"bool",on("bool",1)),l=Lw({inputs:{a:r,b:o},backend:e});return e.disposeIntermediateTensorInfo(o),l}throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${a}`)}},Vw="return ceil(x);",QB=Ze({opSnippet:Vw,packedOpSnippet:Vw,cpuKernelImpl:QM}),eW={kernelName:Za,backendName:"webgl",kernelFunc:QB};class tW{constructor(t){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=t,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class nW{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=t,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const rW={kernelName:Ja,backendName:"webgl",kernelFunc:function sW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{clipValueMin:a,clipValueMax:o}=s;let i;return i=M().getBool("WEBGL_PACK_CLIP")?new nW(r.shape):new tW(r.shape),e.runWebGLProgram(i,[r],r.dtype,[[a],[o]])}};class aW{constructor(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function Mw(n,t){return{dataId:t.dataId,dtype:t.dtype,shape:n.shape}}const iW={kernelName:zi,backendName:"webgl",kernelFunc:function oW(n){const{inputs:t,backend:e}=n,{x:s}=t,r=e.texData.get(s.dataId),a=new aW(s.shape),o=[Mw(s,r.complexTensorInfos.real),Mw(s,r.complexTensorInfos.imag)];return e.runWebGLProgram(a,o,o[0].dtype)}};class lW{constructor(t){this.outputShape=[],this.outputShape=xs(t,1),this.variableNames=t.map((o,i)=>`T${i}`);const e=new Array(t.length-1);e[0]=t[0][1];for(let o=1;o<e.length;o++)e[o]=e[o-1]+t[o][1];const s=[`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];for(let o=1;o<e.length;o++)s.push(`else if (yC < ${e[o]}) setOutput(getT${o}(yR, yC-${e[o-1]}));`);s.push(`else setOutput(getT${e.length}(yR, yC-${e[e.length-1]}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${s.join("\n        ")}\n      }\n    `}}class uW{constructor(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=xs(t,e);const s=this.outputShape,r=s.length,a=it(r),o=xn("coords",r),i=["x","y","z","w","u","v"].slice(0,r);this.variableNames=t.map((g,m)=>`T${m}`);const l=new Array(t.length-1);l[0]=t[0][e];for(let g=1;g<l.length;g++)l[g]=l[g-1]+t[g][e];const u=i[e],c=i.slice(-2),h=i.join();let d=`if (${u} < ${l[0]}) {\n        return getChannel(\n            getT0(${h}), vec2(${c.join()}));\n        }`;for(let g=1;g<l.length;g++){const m=l[g-1];d+=`\n        if (${u} < ${l[g]}  && ${u} >= ${l[g-1]}) {\n          return getChannel(\n            getT${g}(${hc(i,u,m)}),\n            vec2(${hc(c,u,m)}));\n        }`}const f=l[l.length-1];d+=`\n        return getChannel(\n          getT${l.length}(${hc(i,u,f)}),\n          vec2(${hc(c,u,f)}));`,this.userCode=`\n      float getValue(${i.map(g=>"int "+g)}) {\n        ${d}\n      }\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${o}), 0., 0., 0.);\n\n        ${o[r-1]} = ${o[r-1]} + 1;\n        if (${o[r-1]} < ${s[r-1]}) {\n          result.g = getValue(${o});\n        }\n\n        ${o[r-2]} = ${o[r-2]} + 1;\n        if (${o[r-2]} < ${s[r-2]}) {\n          result.a = getValue(${o});\n        }\n\n        ${o[r-1]} = ${o[r-1]} - 1;\n        if (${o[r-2]} < ${s[r-2]} &&\n            ${o[r-1]} < ${s[r-1]}) {\n          result.b = getValue(${o});\n        }\n        setOutput(result);\n      }\n    `}}function hc(n,t,e){const s=n.indexOf(t);return n.map((a,o)=>o===s?`${a} - ${e}`:a).join()}function dc(n){const{inputs:t,backend:e}=n,{input:s}=t;return En({inputs:{x:e.texData.get(s.dataId).complexTensorInfos.imag},backend:e})}const cW={kernelName:Xc,backendName:"webgl",kernelFunc:dc};function $i(n,t,e){const s=n[0].dtype;if("complex64"===s){const p=n.map(x=>_i({inputs:{input:x},backend:e})),f=n.map(x=>dc({inputs:{input:x},backend:e})),g=$i(p,t,e),m=$i(f,t,e),y=yr({inputs:{real:g,imag:m},backend:e});return p.forEach(x=>e.disposeIntermediateTensorInfo(x)),f.forEach(x=>e.disposeIntermediateTensorInfo(x)),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(m),y}let r=e.shouldExecuteOnCPU(n);if("string"===s&&(r=!0),r){const p=n.map(w=>{const I=[-1,L(w.shape.slice(t))];return ue({inputs:{x:w},backend:e,attrs:{shape:I}})}),f=p.map(w=>({vals:e.readSync(w.dataId),shape:w.shape})),g=xs(p.map(w=>w.shape),1),y=ez(f,g,s,1===p[0].shape[0]),x=xs(n.map(w=>w.shape),t),b=e.makeTensorInfo(x,s,y);return p.forEach(w=>e.disposeIntermediateTensorInfo(w)),b}const a=n.filter(p=>L(p.shape)>0),o=M().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&a[0].shape.length>1;if(1===a.length){const p=o?new $s(n[0].shape,mr):new gr(n[0].shape,mr);return e.runWebGLProgram(p,n,s)}const i=M().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(a.length>i){const p=[];for(let g=0;g<a.length;g+=i){const m=a.slice(g,g+i);p.push($i(m,t,e))}const f=$i(p,t,e);for(const g of p)e.disposeIntermediateTensorInfo(g);return f}if(o){const p=new uW(a.map(f=>f.shape),t);return e.runWebGLProgram(p,a,s)}const{tensors2D:l,outShape:u}=function hW(n,t,e){const s=xs(n.map(a=>a.shape),t);return{tensors2D:n.map(a=>ue({inputs:{x:a},attrs:{shape:[-1,L(a.shape.slice(t))]},backend:e})),outShape:s}}(a,t,e),c=new lW(l.map(p=>p.shape)),h=e.runWebGLProgram(c,l,s);l.forEach(p=>e.disposeIntermediateTensorInfo(p));const d=ue({inputs:{x:h},attrs:{shape:u},backend:e});return e.disposeIntermediateTensorInfo(h),d}function zw(n){const{inputs:t,backend:e,attrs:s}=n,{axis:r}=s,a=Ue(r,t[0].shape)[0];Rd(t.map(u=>u.shape),a);const i=xs(t.map(u=>u.shape),a);if(0===L(i))return e.makeTensorInfo(i,t[0].dtype,[]);const l=t.filter(u=>L(u.shape)>0);return 1===l.length?En({inputs:{x:l[0]},backend:e}):$i(l,a,e)}const dW={kernelName:Bi,backendName:"webgl",kernelFunc:zw};class Bw{constructor(t,e=!1,s=null,r=!1,a=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const o=t.padInfo.top,i=t.padInfo.left,l=t.strideHeight,u=t.strideWidth,c=t.dilationHeight,h=t.dilationWidth,d=t.filterHeight,p=t.filterWidth,f=4*Math.floor(t.inChannels/4),g=t.inChannels%4,m="channelsLast"===t.dataFormat,y=m?1:2,x=m?2:3,b=m?3:1;let w="",v="";s&&(w=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${s}\n        }`:a?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${s}\n        }`:`\n          float activation(float x) {\n            ${s}\n          }\n        `,v="result = activation(result);");const I=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${w}\n\n      const ivec2 strides = ivec2(${l}, ${u});\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${y}], coords[${x}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${d}; wR++) {\n          int xR = xRCorner + wR * ${c};\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${h};\n\n            if (xC < 0 || xC >= ${t.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${f}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===g}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${f}) *\n                    getW(wR, wC, ${f}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${f}, xR, xC) *\n                    getW(wR, wC, ${f}, d2);\n              }\n\n            } else if (${2===g}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${f}, d2),\n                getW(wR, wC, ${f} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${f}),\n                  getX(batch, xR, xC, ${f} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${f}, xR, xC),\n                  getX(batch, ${f} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===g}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${f}, d2),\n                getW(wR, wC, ${f} + 1, d2),\n                getW(wR, wC, ${f} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${f}),\n                  getX(batch, xR, xC, ${f} + 1),\n                  getX(batch, xR, xC, ${f} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${f}, xR, xC),\n                  getX(batch, ${f} + 1, xR, xC),\n                  getX(batch, ${f} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${I}\n        ${v}\n        setOutput(result);\n      }\n    `}}class pW{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const e=t.padInfo.front,s=t.padInfo.top,r=t.padInfo.left,a=t.strideDepth,o=t.strideHeight,i=t.strideWidth,l=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,h=t.filterDepth,d=t.filterHeight,p=t.filterWidth,f=4*Math.floor(t.inChannels/4),g=t.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${a}, ${o}, ${i});\n      const ivec3 pads = ivec3(${e}, ${s}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${h}; wF++) {\n          int xF = xFCorner + wF * ${l};\n\n          if (xF < 0 || xF >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${c};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${f}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===g}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${f}) *\n                  getW(wF, wR, wC, ${f}, d2);\n              } else if (${2===g}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${f}),\n                  getX(batch, xF, xR, xC, ${f} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${f}, d2),\n                  getW(wF, wR, wC, ${f} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===g}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${f}),\n                  getX(batch, xF, xR, xC, ${f} + 1),\n                  getX(batch, xF, xR, xC, ${f} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${f}, d2),\n                  getW(wF, wR, wC, ${f} + 1, d2),\n                  getW(wF, wR, wC, ${f} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Ww{constructor(t,e=!1,s=null,r=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=hn(this.outputShape.length);const o=t.padInfo.left,i=t.strideWidth,l=t.dilationWidth,u=t.filterHeight,c=t.filterWidth,h=c;let d="\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;";for(let m=0;m<c;m++)d+=`\n           vec4 xTexelC${2*m};\n           int xTexelC${2*m}Ready;\n           vec4 xTexelC${2*m+1};\n           int xTexelC${2*m+1}Ready;\n           vec4 xC${m};`;d+=`\n     for (int r = 0; r < ${u}; r++) {\n      for (int d1 = 0; d1 < ${t.inChannels}; d1 += 2) {\n       `;for(let m=0;m<c;m++)d+=`\n           xTexelC${2*m} = vec4(0.0);\n           xTexelC${2*m}Ready = 0;\n           xTexelC${2*m+1} = vec4(0.0);\n           xTexelC${2*m+1}Ready = 0;\n           xC${m} = vec4(0.0);`;d+="\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       ";for(let m=0;m<(h+1)/2;m++){const y=2*m;if(d+=`\n           xC = xCCorner + ${y*l};\n           `,1===i){if(y<c&&(o%2==1?(d+=`\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y}Ready == 0) {\n                   xTexelC${y} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${y}.zw = vec2(0.0);\n                   }\n                   xTexelC${y}Ready = 1;\n                 }\n               `,d+=1===l&&y>0?`\n                 xC${y} = vec4(xTexelC${y-2}.zw, xTexelC${y}.xy);\n                 `:`\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${y} = vec4(previous.zw, xTexelC${y}.xy);\n                   } else {\n                     xC${y} = vec4(0.0, 0.0, xTexelC${y}.xy);\n                   }\n                   `):d+=`\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${y}Ready == 0) {\n                   xTexelC${y} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${y}.zw = vec2(0.0);\n                   }\n                   xTexelC${y}Ready = 1;\n                 }\n\n                 xC${y} = xTexelC${y};\n                 `,y+1<c)){const x=o%2==0?Q(l):l;l%2==0&&o%2==1||l%2!=0&&o%2!=1?(d+=`\n                   xCOffset = xC + imod(pads[1], 2) + ${x};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y+1}Ready == 0) {\n                     xTexelC${y+1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${y+1}.zw = vec2(0.0);\n                     }\n                     xTexelC${y+1}Ready = 1;\n                   }\n                   `,d+=l>1?`\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${y+1} = vec4(previous.zw, xTexelC${y+1}.xy);\n                     } else {\n                      xC${y+1} = vec4(0.0, 0.0, xTexelC${y+1}.xy);\n                     }\n                     `:`\n                     xC${y+1} = vec4(xTexelC${y}.zw, xTexelC${y+1}.xy);\n                     `):d+=1===x?`\n                     xC${y+1} = xTexelC${y};\n                     `:`\n                     xCOffset = xC + ${x};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y+1}Ready == 0) {\n                       xTexelC${y+1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${y+1}.zw = vec2(0.0);\n                       }\n                       xTexelC${y+1}Ready = 1;\n                     }\n\n                     xC${y+1} = xTexelC${y+1};\n                     `}}else y<c&&(o%2==1?(d+=`\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y}Ready == 0) {\n                   xTexelC${y} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${y}.zw = vec2(0.0);\n                   }\n                   xTexelC${y}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${y+1}Ready == 0) {\n                   xTexelC${y+1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${y+1}.zw = vec2(0.0);\n                   }\n                   xTexelC${y+1}Ready = 1;\n                 }\n\n                 xC${y} = vec4(xTexelC${y}.zw, xTexelC${y+1}.zw);\n               `,y+1<c&&(d+=`\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${y+1} = vec4(xTexelC${y+1}.xy, final.xy);\n                 `)):(d+=`\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${y}Ready == 0) {\n                   xTexelC${y} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${y}.zw = vec2(0.0);\n                   }\n                   xTexelC${y}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y+1}Ready == 0) {\n                   xTexelC${y+1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${y+1}.zw = vec2(0.);\n                   }\n                   xTexelC${y+1}Ready = 1;\n                 }\n\n                 xC${y} = vec4(\n                   xTexelC${y}.xy, xTexelC${y+1}.xy);\n               `,y+1<c&&(d+=`\n                   xC${y+1} = vec4(xTexelC${y}.zw, xTexelC${y+1}.zw);\n                 `)));y<c&&(d+=`\n             wTexel = getW(r, ${y}, d1, d2);\n             dotProd += xC${y}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${t.inChannels}) {\n               dotProd += xC${y}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `,y+1<c&&(d+=`\n               wTexel = getW(r, ${y+1}, d1, d2);\n               dotProd += xC${y+1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${t.inChannels}) {\n                 dotProd += xC${y+1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `))}d+="\n     }\n   ",d+="\n     }\n   ",d+="\n     }\n   ";let p="",f="";s&&(p=r?`vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${s}\n         }`:a?`vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${s}\n         }`:`vec4 activation(vec4 x) {\n           ${s}\n         }`,f="result = activation(result);");const g=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n       ${p}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${d}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${g}\n         ${f}\n         setOutput(result);\n       }\n     `}}class fW{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=t,this.enableShapeUniforms=hn(this.outputShape.length);const{dataFormat:s}=e,r=yn(),a="channelsLast"===s,o=a?1:2,i=a?2:3,l=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${t[2]} && pos < ${t[1]}) {`;let u="";for(let c=0;c<=1;c++)for(let h=0;h<=1;h++)u+=`\n          blockIndex = rc.z + ${h};\n          pos = rc.y + ${c};\n\n          ${l}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${o}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${i}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${a}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*c+h}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*c+h}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${u}\n\n        ${r.output} = result;\n      }\n    `}}function pc(n,t){const e=n.length;return e>=3?t?[...n.slice(0,-3),n[e-3]*n[e-2],n[e-1]]:[...n.slice(0,-3),n[e-3],n[e-2]*n[e-1]]:!t&&1===e&&n[0]>1?[n[0],1]:null}function Uw({x:n,filter:t,convInfo:e,backend:s,bias:r=null,preluActivationWeights:a=null,leakyreluAlpha:o=0,activation:i=null}){const l=n.shape,u=s.texData.get(n.dataId),c=e.inChannels,h=l[0]*l[1]*l[2],d=e.outChannels,p="channelsLast"===e.dataFormat;let m;const y=[];if(null!=a){const w=pc(a.shape,p);null!=w&&(a=ue({inputs:{x:a},backend:s,attrs:{shape:w}}),y.push(a))}if(null!=r){const w=pc(r.shape,p);null!=w&&(r=ue({inputs:{x:r},backend:s,attrs:{shape:w}}),y.push(r))}if((1!==h&&1!==d||!(c>Aw))&&u.isPacked&&p&&null!=u.texture&&l[2]%2!=0&&ke(u.shape.slice(-3),l.slice(-3))){const v={dataId:n.dataId,shape:[1,l[0]*l[1]*(l[2]+1),e.inChannels],dtype:n.dtype},I=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,S(tc(u.shape,v.shape),()=>`packed reshape ${u.shape} to ${v.shape} isn't free`);const N=ue({inputs:{x:t},backend:s,attrs:{shape:[1,e.inChannels,e.outChannels]}});y.push(N);const k=uc({a:v,b:N,backend:s,transposeA:!1,transposeB:!1,bias:r,activation:i,preluActivationWeights:a,leakyreluAlpha:o}),_=s.texData.get(k.dataId);S(_.isPacked,()=>"batchMatMul result is expected to be packed"),u.shape=I,_.shape=e.outShape,m=En({inputs:{x:k},backend:s}),m.shape=e.outShape,y.push(k)}else{const w=e.outHeight*e.outWidth,v=ue({inputs:{x:n},backend:s,attrs:{shape:p?[e.batchSize,w,e.inChannels]:[e.batchSize,e.inChannels,w]}}),I=ue({inputs:{x:t},backend:s,attrs:{shape:[1,e.inChannels,e.outChannels]}}),N=uc({a:p?v:I,b:p?I:v,transposeA:!p,transposeB:!1,backend:s,bias:r,activation:i,preluActivationWeights:a,leakyreluAlpha:o});m=ue({inputs:{x:N},backend:s,attrs:{shape:e.outShape}}),y.push(v),y.push(I),y.push(N)}for(const w of y)s.disposeIntermediateTensorInfo(w);return m}function Gw({x:n,filter:t,convInfo:e,backend:s,bias:r=null,preluActivationWeights:a=null,leakyreluAlpha:o=0,activation:i=null}){const{filterWidth:l,filterHeight:u,inChannels:c,outWidth:h,outHeight:d,dataFormat:p}=e,f="channelsLast"===p,g=l*u*c,m=d*h,y=[e.batchSize,g,m],w=[];if(null!=a){const H=pc(a.shape,f);null!=H&&(a=ue({inputs:{x:a},backend:s,attrs:{shape:H}}),w.push(a))}if(null!=r){const H=pc(r.shape,f);null!=H&&(r=ue({inputs:{x:r},backend:s,attrs:{shape:H}}),w.push(r))}const v=ue({inputs:{x:t},backend:s,attrs:{shape:[1,g,L(t.shape)/g]}});w.push(v);const I=new fW(y,e),k=s.runWebGLProgram(I,[n],"float32",[n.shape,[e.padInfo.top,e.padInfo.left],[e.strideHeight,e.strideWidth],[e.dilationHeight,e.dilationWidth],[e.inChannels],[e.filterWidth*e.inChannels],[e.outWidth]]),_=ue({inputs:{x:k},backend:s,attrs:{shape:y}});w.push(k),w.push(_);const $=null!=r,P=null!=a,B="leakyrelu"===i,W=i?ki(i,!0):null,U=new kw(f?_.shape:v.shape,f?v.shape:_.shape,f?[e.batchSize,m,e.outChannels]:[e.batchSize,e.outChannels,m],!0,!1,$,W,P,B),G=f?[_,v]:[v,_];if(r&&G.push(r),P&&G.push(a),B){const H=s.makeTensorInfo([],"float32",qs(o,"float32"));G.push(H),w.push(H)}const q=s.runWebGLProgram(U,G,"float32"),K=ue({inputs:{x:q},backend:s,attrs:{shape:e.outShape}});w.push(q);for(const H of w)s.disposeIntermediateTensorInfo(H);return K}const gW={kernelName:Wi,backendName:"webgl",kernelFunc:function mW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:a}=t,{strides:o,pad:i,dataFormat:l,dilations:u,dimRoundingMode:c}=s,h=Ds(l),d=Kt(r.shape,a.shape,o,u,i,c,!1,h);let p;if(1!==d.filterHeight||1!==d.filterWidth||1!==d.dilationHeight||1!==d.dilationWidth||1!==d.strideHeight||1!==d.strideWidth||"SAME"!==d.padInfo.type&&"VALID"!==d.padInfo.type)if(d.strideWidth<=2&&"channelsLast"===h&&M().getBool("WEBGL_EXP_CONV")){const g=new Ww(d);p=e.runWebGLProgram(g,[r,a],"float32",[[d.padInfo.top,d.padInfo.left],[d.strideHeight,d.strideWidth],[d.dilationHeight,d.dilationWidth],[d.inHeight,d.inWidth]])}else if(M().getBool("WEBGL_CONV_IM2COL"))p=Gw({x:r,filter:a,convInfo:d,backend:e});else{const g=new Bw(d);p=e.runWebGLProgram(g,[r,a],"float32")}else p=Uw({x:r,filter:a,convInfo:d,backend:e});const f=ue({inputs:{x:p},backend:e,attrs:{shape:d.outShape}});return e.disposeIntermediateTensorInfo(p),f}};class yW{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${t.strideHeight} - ${t.padInfo.top};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${t.strideWidth} - ${t.padInfo.left};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              ${"channelsLast"===t.dataFormat?"float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);":"float dyValue = getDy(b, d2, yR, yC);\n              float xValue = getX(b, d1, xR, xC);\n              dotProd += (xValue * dyValue);"}\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class xW{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,s=t.filterWidth,o="channelsLast"===t.dataFormat;this.userCode=`\n      const ivec2 pads = ivec2(${e-1-t.padInfo.top}, ${s-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${o?3:1}];\n\n        ivec2 dyCorner = ivec2(coords[${o?1:2}], coords[${o?2:3}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${s} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n\n              if (${o}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class bW{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape,this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yF = 0; yF < ${t.outDepth}; yF++) {\n            int xF = wF + yF * ${t.strideDepth} - ${t.padInfo.front};\n\n            if (xF < 0 || xF >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${t.outHeight}; yR++) {\n              int xR = wR + yR * ${t.strideHeight} - ${t.padInfo.top};\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${t.outWidth}; yC++) {\n                int xC = wC + yC * ${t.strideWidth} - ${t.padInfo.left};\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class wW{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterDepth,s=t.filterHeight,r=t.filterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${e-1-t.padInfo.front}, ${s-1-t.padInfo.top}, ${r-1-t.padInfo.left});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${e}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${t.strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${e} - 1 - wF;\n\n          for (int wR = 0; wR < ${s}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${s} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const SW={kernelName:Rc,backendName:"webgl",kernelFunc:function vW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:a}=t,{strides:o,pad:i,dataFormat:l,dimRoundingMode:u,filterShape:c}=s,h=Ds(l),d=Kt(r.shape,c,o,1,i,u,!1,h),p=new yW(d);return e.runWebGLProgram(p,[r,a],"float32")}};class IW{constructor(t){this.variableNames=["dy","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"strides",type:"vec2"}],this.outputShape=t.inShape,this.enableShapeUniforms=hn(this.outputShape.length);const e=t.filterHeight,s=t.filterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${e-1-t.padInfo.top}, ${s-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n\n        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        vec4 result = vec4(0.);\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / strides[0];\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            int wCPerm = ${s} - 1 - wC;\n\n            float dyC = float(dyCCorner + wC) / strides[1];\n            bool idyCVal = (dyC >= 0.0) && (dyC < ${t.outWidth}.0)\n              && (fract(dyC) == 0.0);\n            int idyC = int(dyC);\n\n            float dyC2 = float(dyCCorner + wC + 1) / strides[1];\n            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${t.outWidth}.0)\n              && (fract(dyC2) == 0.0);\n            int idyC2 = int(dyC2);\n\n            if (idyCVal && idyCVal2) {\n              for (int d2 = 0; d2 < ${t.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?\n                  dySample : getDy(batch, idyR, idyC2, d2);\n\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n\n                dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample2.xy : dySample2.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal) {\n              for (int d2 = 0; d2 < ${t.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal2) {\n              for (int d2 = 0; d2 < ${t.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC2, d2);\n                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            }\n          }\n        }\n        setOutput(result);\n      }\n    `}}const CW={kernelName:Ui,backendName:"webgl",kernelFunc:function NW(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:a}=t,{inputShape:o,strides:i,pad:l,dataFormat:u,dimRoundingMode:c}=s,h=Ds(u),d=Kt(o,a.shape,i,1,l,c,!1,h);if(M().getBool("WEBGL_PACK_CONV2DTRANSPOSE")&&"channelsLast"===h){const p=[[d.strideHeight,d.strideWidth]],f=new IW(d);return e.runWebGLProgram(f,[r,a],"float32",p)}{const p=new xW(d);return e.runWebGLProgram(p,[r,a],"float32")}}},TW={kernelName:Gi,backendName:"webgl",kernelFunc:function kW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:a}=t,{strides:o,pad:i,dilations:l}=s,u=tr(r.shape,a.shape,o,l,i),c=new pW(u);return e.runWebGLProgram(c,[r,a],"float32")}},$W={kernelName:Dc,backendName:"webgl",kernelFunc:function _W(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:a}=t,{strides:o,pad:i,filterShape:l}=s,u=tr(r.shape,l,o,1,i),c=new bW(u);return e.runWebGLProgram(c,[r,a],"float32")}},AW={kernelName:Fc,backendName:"webgl",kernelFunc:function EW(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:a}=t,{pad:o,strides:i,inputShape:l}=s,u=tr(l,a.shape,i,1,o),c=new wW(u);return e.runWebGLProgram(c,[r,a],"float32")}},FW=Ze({opSnippet:Va+"\n  return cos(x);\n",packedOpSnippet:`\n  vec4 result = cos(x);\n  bvec4 isNaN = isnan(x);\n  ${Yr}\n  return result;\n`}),OW={kernelName:Qa,backendName:"webgl",kernelFunc:FW},PW=Ze({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),LW={kernelName:eo,backendName:"webgl",kernelFunc:PW};class VW{constructor(t,e,s,r,a){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[o,i,l,u]=t,[c]=e,[h,d]=s;this.outputShape=[c,h,d,u];const p="bilinear"===r?1:0,[f,g]=[i-1+".0",l-1+".0"],[m,y,x]=h>1?[""+(i-1)/(h-1),"(y2-y1) * height_ratio",`y1*${f} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${f}`],[b,w,v]=d>1?[""+(l-1)/(d-1),"(x2-x1) * width_ratio",`x1*${g} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${g}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${o}) {\n          return;\n        }\n\n        float height_scale = ${y};\n        float width_scale = ${w};\n\n        float in_y = ${x};\n        if( in_y < 0.0 || in_y > ${f} ) {\n          setOutput(float(${a}));\n          return;\n        }\n        float in_x = ${v};\n        if( in_x < 0.0 || in_x > ${g} ) {\n          setOutput(float(${a}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const MW={kernelName:Pc,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{image:r,boxes:a,boxInd:o}=t,{cropSize:i,method:l,extrapolationValue:u}=s,c=new VW(r.shape,a.shape,i,l,u);return e.runWebGLProgram(c,[r,a,o],"float32")}};var fc=function(n){return n.Prod="*",n.Sum="+",n}(fc||{});class Hw{constructor(t,e,s,r){this.op=t,this.outputShape=e,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const a=this.outputShape.length,i=s?this.op===fc.Prod?"1.0":"0.0":`getX(${jw(a,"coords",this.op)})`,l=this.outputShape[this.outputShape.length-1];let u="",c="";s?(u=r?"end != "+(l-1):"end != 0",c=r?"end + 1":"end - 1"):(u=r?`end + pow2 < ${l}`:"end >= pow2",c=r?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${it(a)} coords = getOutputCoords();\n        int end = ${qw(a,"coords",this.op)};\n        float val = ${i};\n        int pow2 = int(pow(2.0, index));\n        if (${u}) {\n          int idx = ${c};\n          ${qw(a,"coords",this.op)} = idx;\n          val ${this.op}= getX(${jw(a,"coords",this.op)});\n        }\n        setOutput(val);\n      }\n    `}}function jw(n,t,e){if(1===n)return`${t}`;if(2===n)return`${t}.x, ${t}.y`;if(3===n)return`${t}.x, ${t}.y, ${t}.z`;if(4===n)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${e} for rank ${n} is not yet supported`)}function qw(n,t,e){if(1===n)return`${t}`;if(2===n)return`${t}.y`;if(3===n)return`${t}.z`;if(4===n)return`${t}.w`;throw new Error(`Cumulative ${e} for rank ${n} is not yet supported`)}function Kw(n,t,e,s,r,a){const o=t.shape.length,i=It([s],o);let l=t;null!=i&&(l=bn({inputs:{x:t},backend:e,attrs:{perm:i}}));const u=Et(1,o)[0];if(u!==o-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${s}`);const c=l.shape[u];let h=En({inputs:{x:l},backend:e});for(let d=0;d<=Math.ceil(Math.log2(c))-1;d++){const p=new Hw(n,l.shape,!1,a),g=h;h=e.runWebGLProgram(p,[h],h.dtype,[[d]]),e.disposeIntermediateTensorInfo(g)}if(r){const d=new Hw(n,l.shape,r,a),p=h;h=e.runWebGLProgram(d,[h],h.dtype),e.disposeIntermediateTensorInfo(p)}if(null!=i){const p=bn({inputs:{x:h},backend:e,attrs:{perm:sr(i)}});return e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(l),p}return h}const BW={kernelName:Oc,backendName:"webgl",kernelFunc:function zW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a,exclusive:o,reverse:i}=s;return Kw(fc.Prod,r,e,a,o,i)}},UW={kernelName:Hi,backendName:"webgl",kernelFunc:function WW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a,exclusive:o,reverse:i}=s;return Kw(fc.Sum,r,e,a,o,i)}},HW={kernelName:Lc,backendName:"webgl",kernelFunc:function GW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,weights:a}=t,{size:o,binaryOutput:i}=s;if(1===r.shape.length){const l=e.readSync(r.dataId),u=e.readSync(a.dataId),c=pw(l,u,a.dtype,a.shape,o);return e.makeTensorInfo([o],a.dtype,c)}if(2===r.shape.length){const l=e.bufferSync(r),u=e.bufferSync(a),c=YM(l,u,o,i);return e.makeTensorInfo(c.shape,a.dtype,c.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};class jW{constructor(t,e,s){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=s,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${e};\n      int offset_h = imod(h, ${e});\n      int in_w = w / ${e};\n      int offset_w = imod(w, ${e});\n      int offset_d = (offset_h * ${e} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const KW={kernelName:Vc,backendName:"webgl",kernelFunc:function qW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockSize:a,dataFormat:o}=s,i=r.shape[0],h=("NHWC"===o?r.shape[1]:r.shape[2])*a,d=("NHWC"===o?r.shape[2]:r.shape[3])*a,p=("NHWC"===o?r.shape[3]:r.shape[1])/(a*a),g=new jW("NHWC"===o?[i,h,d,p]:[i,p,h,d],a,o);return e.runWebGLProgram(g,[r],r.dtype)}};class Xw{constructor(t,e=!1,s=null,r=!1,a=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=hn(this.outputShape.length);const o=t.filterHeight,i=t.filterWidth,l=t.outChannels/t.inChannels;let u="",c="";s&&(u=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${s}\n        }`:a?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${s}\n        }`:`\n          float activation(float x) {\n            ${s}\n          }\n        `,c="result = activation(result);");const h=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${u}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${l};\n        int q = d2 - d1 * ${l};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${o}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${i}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${h}\n        ${c}\n        setOutput(result);\n      }\n    `}}class Yw{constructor(t,e=!1,s=null,r=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=hn(this.outputShape.length);const o=t.outChannels/t.inChannels,i=t.padInfo.left,l=t.strideWidth,u=t.dilationWidth,c=t.filterHeight,h=t.filterWidth,d=h;let p="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let y=0;y<h;y++)p+=`\n          vec4 xTexelC${2*y};\n          int xTexelC${2*y}Ready;\n          vec4 xTexelC${2*y+1};\n          int xTexelC${2*y+1}Ready;\n          vec4 xC${y};`;p+=`\n    for (int r = 0; r < ${c}; r++) {\n      `;for(let y=0;y<h;y++)p+=`\n          xTexelC${2*y} = vec4(0.0);\n          xTexelC${2*y}Ready = 0;\n          xTexelC${2*y+1} = vec4(0.0);\n          xTexelC${2*y+1}Ready = 0;\n          xC${y} = vec4(0.0);`;p+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let y=0;y<(d+1)/2;y++){const x=2*y;if(p+=`\n          xC = xCCorner + ${x*u};\n          `,1===l){if(x<h&&(i%2==1?(p+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {\n                  xTexelC${x} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${x}.zw = vec2(0.0);\n                  }\n                  xTexelC${x}Ready = 1;\n                }\n              `,p+=1===u&&x>0?`\n                xC${x} = vec4(xTexelC${x-2}.zw, xTexelC${x}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${x} = vec4(previous.zw, xTexelC${x}.xy);\n                  } else {\n                    xC${x} = vec4(0.0, 0.0, xTexelC${x}.xy);\n                  }\n                  `):p+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {\n                  xTexelC${x} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${x}.zw = vec2(0.0);\n                  }\n                  xTexelC${x}Ready = 1;\n                }\n\n                xC${x} = xTexelC${x};\n                `,x+1<h)){const b=i%2==0?Q(u):u;u%2==0&&i%2==1||u%2!=0&&i%2!=1?(p+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${b};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {\n                    xTexelC${x+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${x+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${x+1}Ready = 1;\n                  }\n                  `,p+=u>1?`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${x+1} = vec4(previous.zw, xTexelC${x+1}.xy);\n                    } else {\n                     xC${x+1} = vec4(0.0, 0.0, xTexelC${x+1}.xy);\n                    }\n                    `:`\n                    xC${x+1} = vec4(xTexelC${x}.zw, xTexelC${x+1}.xy);\n                    `):p+=1===b?`\n                    xC${x+1} = xTexelC${x};\n                    `:`\n                    xCOffset = xC + ${b};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {\n                      xTexelC${x+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${x+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${x+1}Ready = 1;\n                    }\n\n                    xC${x+1} = xTexelC${x+1};\n                    `}}else x<h&&(i%2==1?(p+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {\n                  xTexelC${x} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${x}.zw = vec2(0.0);\n                  }\n                  xTexelC${x}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${x+1}Ready == 0) {\n                  xTexelC${x+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${x+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${x+1}Ready = 1;\n                }\n\n                xC${x} = vec4(xTexelC${x}.zw, xTexelC${x+1}.zw);\n              `,x+1<h&&(p+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${x+1} = vec4(xTexelC${x+1}.xy, final.xy);\n                `)):(p+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {\n                  xTexelC${x} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${x}.zw = vec2(0.0);\n                  }\n                  xTexelC${x}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {\n                  xTexelC${x+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${x+1}.zw = vec2(0.);\n                  }\n                  xTexelC${x+1}Ready = 1;\n                }\n\n                xC${x} = vec4(\n                  xTexelC${x}.xy, xTexelC${x+1}.xy);\n              `,x+1<h&&(p+=`\n                  xC${x+1} = vec4(xTexelC${x}.zw, xTexelC${x+1}.zw);\n                `)));x<h&&(p+=`\n            wTexel = getW(r, ${x}, d1, q);\n            dotProd += xC${x} * vec4(wTexel.xz, wTexel.xz);\n          `,x+1<h&&(p+=`\n              wTexel = getW(r, ${x+1}, d1, q);\n              dotProd += xC${x+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}p+="\n    }\n  ",p+="\n      }\n    ";let f="",g="";s&&(f=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${s}\n        }`:a?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${s}\n        }`:`vec4 activation(vec4 x) {\n          ${s}\n        }`,g="result = activation(result);");const m=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${f}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${o};\n        int q = d2 - d1 * ${o};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${p}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${m}\n        ${g}\n        setOutput(result);\n      }\n    `}}const YW={kernelName:ji,backendName:"webgl",kernelFunc:function XW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:a}=t,{strides:o,pad:i,dilations:l,dimRoundingMode:u}=s;let c=l;null==c&&(c=[1,1]),S(en(o,c),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${c}'`);const h=Kt(r.shape,a.shape,o,c,i,u,!0);let d;return d=M().getBool("WEBGL_PACK_DEPTHWISECONV")&&h.strideWidth<=2&&h.outChannels/h.inChannels==1?new Yw(h):new Xw(h),e.runWebGLProgram(d,[r,a],"float32",[[h.padInfo.top,h.padInfo.left],[h.strideHeight,h.strideWidth],[h.dilationHeight,h.dilationWidth],[h.inHeight,h.inWidth]])}};class ZW{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${t.outChannels/t.inChannels} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${t.strideHeight} - ${t.padInfo.top};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${t.strideWidth} - ${t.padInfo.left};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class JW{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,s=t.filterWidth,l=t.outChannels/t.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${e-1-t.padInfo.top}, ${s-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${s} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${l}; dm++) {\n              int d2 = d1 * ${l} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const eU={kernelName:Mc,backendName:"webgl",kernelFunc:function QW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:a}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,filterShape:c}=s,h=Kt(r.shape,c,o,i,l,u,!0),d=new ZW(h);return e.runWebGLProgram(d,[r,a],"float32")}},nU={kernelName:zc,backendName:"webgl",kernelFunc:function tU(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:a}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,inputShape:c}=s,h=Kt(c,a.shape,o,i,l,u,!0),d=new JW(h);return e.runWebGLProgram(d,[r,a],"float32")}};class sU{constructor(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const aU={kernelName:"Diag",backendName:"webgl",kernelFunc:function rU(n){const{inputs:t,backend:e}=n,{x:s}=t,r=[...s.shape,...s.shape],a=L(s.shape),o=ue({inputs:{x:s},backend:e,attrs:{shape:[a]}}),i=new sU(a),l=e.runWebGLProgram(i,[o],o.dtype),u=ue({inputs:{x:l},backend:e,attrs:{shape:r}});return e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(l),u}};class oU{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const{inHeight:e,inWidth:s,padInfo:r,strideHeight:a,strideWidth:o,filterHeight:i,filterWidth:l,dilationHeight:u,dilationWidth:c}=t,{top:h,left:d}=r;this.userCode=`\n      const ivec2 strides = ivec2(${a}, ${o});\n      const ivec2 pads = ivec2(${h}, ${d});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${u};\n\n          if (hIn >= 0 && hIn < ${e}) {\n            for (int w = 0; w < ${l}; w++) {\n              int wIn = wBeg + w * ${c};\n\n              if (wIn >= 0 && wIn < ${s}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const lU={kernelName:qi,backendName:"webgl",kernelFunc:function iU(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:a}=t,{strides:o,pad:i,dilations:l}=s,u=jo(r.shape,a.shape,o,i,"NHWC",l);let c;const h=new oU(u);c=e.runWebGLProgram(h,[r,a],"float32");const d=ue({inputs:{x:c},backend:e,attrs:{shape:u.outShape}});return e.disposeIntermediateTensorInfo(c),d}},cU={kernelName:Uc,backendName:"webgl",kernelFunc:function uU(n){const{inputs:t,backend:e,attrs:s}=n,{equation:r}=s,a=t,{allDims:o,summedDims:i,idDims:l}=jd(r,a.length);Kd(o.length,l,a);const{path:u,steps:c}=Xd(i,l),h=c.length;let d=null,p=o.length;const f=[];for(let g=0;g<h;++g){for(const m of c[g]){const{permutationIndices:y,expandDims:x}=qd(p,l[m]);let b;Yd(y)?b=a[m]:(b=bn({inputs:{x:a[m]},backend:e,attrs:{perm:y}}),f.push(b));const w=b.shape.slice();for(let v=0;v<x.length;++v)w.splice(x[v],0,1);ke(b.shape,w)||(b=ue({inputs:{x:b},backend:e,attrs:{shape:w}}),f.push(b)),null===d?d=b:(d=Cf({inputs:{a:b,b:d},backend:e}),f.push(d))}g<h-1&&(u[g]>=0&&(d=lc({inputs:{x:d},backend:e,attrs:{axis:u[g]-(o.length-p),keepDims:!1}}),f.push(d)),p--)}for(const g of f)g!==d&&e.disposeIntermediateTensorInfo(g);return d}},hU=Ze({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),dU={kernelName:no,backendName:"webgl",kernelFunc:hU},mU={kernelName:Gc,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e}=n,{dy:s,y:r}=t,a=M().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new La("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",s.shape,r.shape):new Xr("return (b >= 0.0) ? a : a * (b + 1.0);",s.shape,r.shape);return e.runWebGLProgram(a,[s,r],s.dtype)}},gU=nn({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:tz}),yU={kernelName:Ki,backendName:"webgl",kernelFunc:gU},bU=Ze({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${Vd};\n  float a1 = ${Md};\n  float a2 = ${zd};\n  float a3 = ${Bd};\n  float a4 = ${Wd};\n  float a5 = ${Ud};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),wU={kernelName:so,backendName:"webgl",kernelFunc:bU},Zw=Ze({opSnippet:Va+"\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:nz,dtype:"float32"}),SU={kernelName:ro,backendName:"webgl",kernelFunc:Zw};function $f(n){const{inputs:t,attrs:e,backend:s}=n,{dim:r}=e,{input:a}=t,o=a.shape.length,i=a.shape.slice();let l=r;return r<0&&(S(-(o+1)<=r,()=>`Axis must be in the interval [${-(o+1)}, ${o}]`),l=o+r+1),i.splice(l,0,1),ue({inputs:{x:a},backend:s,attrs:{shape:i}})}const IU={kernelName:Xi,backendName:"webgl",kernelFunc:$f},Jw="return exp(x) - 1.0;",NU=Ze({opSnippet:Jw,packedOpSnippet:Jw,cpuKernelImpl:sz}),CU={kernelName:ao,backendName:"webgl",kernelFunc:NU};class Qw{constructor(t,e,s){this.variableNames=["real","imag"];const r=e[1];this.outputShape=e;const a=s?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,o=s?`${r}.0`:"1.0";let i;if("real"===t)i="return real * expR - imag * expI;";else{if("imag"!==t)throw new Error(`FFT component must be either "real" or "imag", got ${t}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${a};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${o};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function e1(n,t,e){const s=e.texData.get(n.dataId),r=L(n.shape),a=n.shape[n.shape.length-1],i=ue({inputs:{x:n},backend:e,attrs:{shape:[r/a,a]}}),l=i.shape,u=new Qw("real",l,t),c=new Qw("imag",l,t),h=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:l},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:l}],d=e.runWebGLProgram(u,h,"float32"),p=e.runWebGLProgram(c,h,"float32"),f=yr({inputs:{real:d,imag:p},backend:e});e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p);const g=ue({inputs:{x:f},backend:e,attrs:{shape:n.shape}});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(f),g}const TU={kernelName:"FFT",backendName:"webgl",kernelFunc:function kU(n){const{inputs:t,backend:e}=n,{input:s}=t;return e1(s,!1,e)}};class _U{constructor(t,e){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=t,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function Ei(n){const{backend:t,attrs:e}=n,{shape:s,value:r}=e;let{dtype:a}=e;if(a=a||ta(r),"string"===a){const o=_t(a,L(s));return o.fill(r),t.makeTensorInfo(s,a,o)}{const o=new _U(s,r);return t.runWebGLProgram(o,[],a,[[r]])}}const $U={kernelName:jc,backendName:"webgl",kernelFunc:Ei};class EU{constructor(t){this.variableNames=["Image"],this.outputShape=[];const e=t[2];this.outputShape=t,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${e} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${e}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const AU={kernelName:qc,backendName:"webgl",kernelFunc:({inputs:n,backend:t})=>{const{image:e}=n,s=t,r=new EU(e.shape);return s.runWebGLProgram(r,[e],e.dtype)}},t1="return floor(x);",RU=Ze({opSnippet:t1,packedOpSnippet:t1,cpuKernelImpl:rz}),DU={kernelName:oo,backendName:"webgl",kernelFunc:RU},FU=nn({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),OU={kernelName:lo,backendName:"webgl",kernelFunc:FU};class PU{constructor(t){this.variableNames=["A"];const e=yn(),[s,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${s}.0);\n\n        vec4 values = ${e.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class LU{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const e=yn(),[s,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${s}.0);\n            vec4 values = ${e.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${e.output} = result;\n      }\n    `}}const VU={kernelName:"FromPixels",backendName:"webgl",kernelFunc:function MU(n){const{inputs:t,backend:e,attrs:s}=n;let{pixels:r}=t;const{numChannels:a}=s,o=typeof HTMLVideoElement<"u"&&r instanceof HTMLVideoElement,i=typeof HTMLImageElement<"u"&&r instanceof HTMLImageElement,[l,u]=o?[r.videoWidth,r.videoHeight]:[r.width,r.height],c=[u,l],h=[u,l,a];if(i||o){const g=M().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");(null==za||g!==Ef)&&(Ef=g,za=document.createElement("canvas").getContext("2d",{willReadFrequently:Ef})),za.canvas.width=l,za.canvas.height=u,za.drawImage(r,0,0,l,u),r=za.canvas}const d=e.makeTensorInfo(c,"int32");e.texData.get(d.dataId).usage=Zn.PIXELS,e.gpgpu.uploadPixelDataToTexture(e.getTexture(d.dataId),r);const p=M().getBool("WEBGL_PACK")?new LU(h):new PU(h),f=e.runWebGLProgram(p,[d],"int32");return e.disposeData(d.dataId),f}};let za,Ef=M().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");const BU={kernelName:Ol,backendName:"webgl",kernelFunc:function zU(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:a,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s,g=Ds(c),m=Kt(r.shape,a.shape,l,h,u,d,!1,g);let y;const x=[],b=null!=o,w=null!=i,v="leakyrelu"===p,I=()=>{const k=[r,a],_=($,P)=>{if("NCHW"===P&&1===$.shape.length&&1!==$.shape[0]){const B=ue({inputs:{x:$},backend:e,attrs:{shape:[$.shape[0],1,1]}});return x.push(B),B}return $};if(b&&k.push(_(o,c)),w&&k.push(_(i,c)),v){const $=e.makeTensorInfo([],"float32",qs(f,"float32"));k.push($),x.push($)}return k};if(1!==m.filterHeight||1!==m.filterWidth||1!==m.dilationHeight||1!==m.dilationWidth||1!==m.strideHeight||1!==m.strideWidth||"SAME"!==m.padInfo.type&&"VALID"!==m.padInfo.type)if(m.strideWidth<=2&&"channelsLast"===g&&M().getBool("WEBGL_EXP_CONV")){const k=p?ki(p,!0):null,_=new Ww(m,b,k,w,v),$=[[m.padInfo.top,m.padInfo.left],[m.strideHeight,m.strideWidth],[m.dilationHeight,m.dilationWidth],[m.inHeight,m.inWidth]],P=I();y=e.runWebGLProgram(_,P,"float32",$)}else if(M().getBool("WEBGL_CONV_IM2COL"))y=Gw({x:r,filter:a,convInfo:m,backend:e,bias:o,activation:p,preluActivationWeights:i,leakyreluAlpha:f});else{const k=p?ki(p,!1):null,_=new Bw(m,b,k,w,v),$=I();y=e.runWebGLProgram(_,$,"float32")}else y=Uw({x:r,filter:a,convInfo:m,backend:e,bias:o,activation:p,preluActivationWeights:i,leakyreluAlpha:f});const N=ue({inputs:{x:y},backend:e,attrs:{shape:m.outShape}});return x.push(y),x.forEach(k=>e.disposeIntermediateTensorInfo(k)),N}},UU={kernelName:Pl,backendName:"webgl",kernelFunc:function WU(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:a,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:h,activation:d,leakyreluAlpha:p}=s,f=[];let g=c;null==g&&(g=[1,1]),S(en(l,g),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${g}'`);const m=Kt(r.shape,a.shape,l,g,u,h,!0),y=M().getBool("WEBGL_PACK_DEPTHWISECONV")&&m.strideWidth<=2&&m.outChannels/m.inChannels==1,x=d?ki(d,y):null,b=[r,a],w=null!=o,v=null!=i,I="leakyrelu"===d;if(w&&b.push(o),v&&b.push(i),I){const $=e.makeTensorInfo([],"float32",qs(p,"float32"));b.push($),f.push($)}let N;N=y?new Yw(m,w,x,v,I):new Xw(m,w,x,v,I);const _=e.runWebGLProgram(N,b,"float32",[[m.padInfo.top,m.padInfo.left],[m.strideHeight,m.strideWidth],[m.dilationHeight,m.dilationWidth],[m.inHeight,m.inWidth]]);return f.forEach($=>e.disposeIntermediateTensorInfo($)),_}};class GU{constructor(t,e,s,r){this.sliceDim=t,this.strides=e,this.paramsShape=r,this.variableNames=["x","indices"],this.outputShape=s;const a=it(s.length);let o="\n    int index;";for(let i=0;i<this.sliceDim;i++)o+=`\n          index = round(getIndices(coords[0], ${i}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[i]};\n          flattenIndex += index * ${this.strides[i]};`;this.userCode=`\n         void main() {\n          ${a} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${o}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `}}const jU={kernelName:Gf,backendName:"webgl",kernelFunc:function HU(n){const{inputs:t,backend:e}=n,{params:s,indices:r}=t,a=r.shape,o=a[a.length-1],i=L(s.shape),[l,u,c,h]=Ld(s,r),d=ue({inputs:{x:r},backend:e,attrs:{shape:[u,o]}}),p=ue({inputs:{x:s},backend:e,attrs:{shape:[L(s.shape)/c,c]}});if(e.shouldExecuteOnCPU([s,r])||"string"===s.dtype){const y=e.readSync(r.dataId),x=e.bufferSync(s),b=az(y,x,s.dtype,u,o,c,h,s.shape,i);return e.makeTensorInfo(l,s.dtype,b.values)}const f=new GU(o,h,[u,c],s.shape),g=e.runWebGLProgram(f,[p,d],p.dtype),m=ue({inputs:{x:g},backend:e,attrs:{shape:l}});return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(g),m}};class qU{constructor(t,e){this.variableNames=["A","indices"],this.outputShape=e,this.rank=e.length;const s=it(this.rank),r=function KU(n,t){const e=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let r=0;r<n.length;r++)s.push(2===r?"index":`${e[r]}`);return s.join()}(t);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${t[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${r}));\n      }\n    `}}function n1(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,indices:a}=t,{axis:o,batchDims:i}=s,l=Ue(o,r.shape)[0];if(M().get("DEBUG")){const x=e.readSync(a.dataId),b=r.shape[l];for(let w=0;w<x.length;++w){const v=x[w];S(v<=b-1&&v>=0,()=>`GatherV2: the index value ${v} is not in [0, ${b-1}]`)}}const u=Qd(r,a,l,i),c=L(a.shape),h=[],d=ue({inputs:{x:r},backend:e,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),p=ue({inputs:{x:a},backend:e,attrs:{shape:[u.batchSize,c/u.batchSize]}});h.push(d),h.push(p);const f=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(e.shouldExecuteOnCPU([r,a])||"string"===r.dtype){const x=e.bufferSync(p),b=e.bufferSync(d),w=oz(b,x,f);return h.forEach(v=>e.disposeIntermediateTensorInfo(v)),e.makeTensorInfo(u.outputShape,w.dtype,w.values)}const g=new qU(d.shape,f),m=e.runWebGLProgram(g,[d,p],d.dtype);h.push(m);const y=ue({inputs:{x:m},backend:e,attrs:{shape:u.outputShape}});return h.forEach(x=>e.disposeIntermediateTensorInfo(x)),y}const XU={kernelName:Zi,backendName:"webgl",kernelFunc:n1},YU=nn({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:iz,dtype:"bool"}),ZU={kernelName:Ji,backendName:"webgl",kernelFunc:YU},JU=nn({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:lz}),QU={kernelName:uo,backendName:"webgl",kernelFunc:JU},t4={kernelName:Kc,backendName:"webgl",kernelFunc:function e4(n){const{inputs:t,backend:e}=n,{input:s}=t;return e1(s,!0,e)}},n4=Ze({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),s4={kernelName:ho,backendName:"webgl",kernelFunc:n4},r4=Ze({opSnippet:"return float(isinf(x));",dtype:"bool"}),a4={kernelName:po,backendName:"webgl",kernelFunc:r4},o4=Ze({opSnippet:"return float(isnan(x));",dtype:"bool"}),i4={kernelName:fo,backendName:"webgl",kernelFunc:o4},l4=nn({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:uz,dtype:"bool"}),u4={kernelName:el,backendName:"webgl",kernelFunc:l4},c4=nn({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:cz,dtype:"bool"}),h4={kernelName:tl,backendName:"webgl",kernelFunc:c4},p4={kernelName:Hf,backendName:"webgl",kernelFunc:function d4(n){const{backend:t,attrs:e}=n,{start:s,stop:r,num:a}=e,o=hz(s,r,a);return t.makeTensorInfo([o.length],"float32",o)}},m4=Ze({opSnippet:Va+"\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:dz}),g4={kernelName:mo,backendName:"webgl",kernelFunc:m4},x4=Ze({opSnippet:Va+"\n  return log(1.0 + x);\n"}),b4={kernelName:go,backendName:"webgl",kernelFunc:x4},w4=nn({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),v4={kernelName:nl,backendName:"webgl",kernelFunc:w4},S4=Ze({opSnippet:"return float(!(x >= 1.0));"}),I4={kernelName:sl,backendName:"webgl",kernelFunc:S4},N4=nn({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),C4={kernelName:rl,backendName:"webgl",kernelFunc:N4};class k4{constructor(t,e,s,r,a){this.variableNames=["x"],this.outputShape=[];const o=e,i=t[3]-1;let l;this.outputShape=t;const u=`float(${s}) + float(${r}) * sum`;l=.5===a?`inversesqrt(${u})`:1===a?`1.0/(${u})`:`exp(log(${u}) * float(-${a}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${o}; j <= ${o}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${l};\n        setOutput(val);\n      }\n    `}}class T4{constructor(t,e,s,r,a){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const o=e,i=t[3]-1;let l;this.outputShape=t;const u=`float(${s}) + float(${r}) * sum`;l=.5===a?`inversesqrt(${u})`:1===a?`1.0/(${u})`:`exp(log(${u}) * float(-${a}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${o};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${o}; j <= ${o}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${l};\n        setOutput(result);\n      }\n    `}}const _4={kernelName:al,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{depthRadius:a,bias:o,alpha:i,beta:l}=s,u=M().getBool("WEBGL_PACK_NORMALIZATION")?new T4(r.shape,a,o,i,l):new k4(r.shape,a,o,i,l);return e.runWebGLProgram(u,[r],r.dtype)}};class $4{constructor(t,e,s,r,a){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=s,this.alpha=r,this.beta=a,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${e})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${e} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${s});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${a})\n                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${a});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const E4={kernelName:Yc,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r,y:a,dy:o}=t,{depthRadius:i,bias:l,alpha:u,beta:c}=s,h=new $4(r.shape,i,l,u,c);return e.runWebGLProgram(h,[r,a,o],r.dtype)}};function s1(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{reductionIndices:a,keepDims:o}=s,i=r.shape.length,l=Ue(a,r.shape);let u=l;const c=It(u,i),h=null!=c,d=e.shouldExecuteOnCPU([r]);let p=r;if(h){if(d){const b=e.texData.get(p.dataId).values,w=new Array(i);for(let N=0;N<w.length;N++)w[N]=r.shape[c[N]];const v=If(b,r.shape,r.dtype,c,w);p=e.makeTensorInfo(w,r.dtype),e.texData.get(p.dataId).values=v}else p=ic(r,c,e);u=Et(u.length,i)}tn("max",u,i);const[f,g]=Xt(p.shape,u);let y,m=f;if(o&&(m=$t(f,l)),d){const b=e.texData.get(p.dataId).values,w=pz(b,L(g),m,r.dtype);y=e.makeTensorInfo(m,r.dtype),e.texData.get(y.dataId).values=w}else y=function A4(n,t,e,s){const r=L(t),i=ue({inputs:{x:n},attrs:{shape:[L(n.shape)/r,r]},backend:s}),l=Zr(i,n.dtype,"max",s),u=ue({inputs:{x:l},attrs:{shape:e},backend:s});return s.disposeIntermediateTensorInfo(i),s.disposeIntermediateTensorInfo(l),u}(p,g,m,e);return h&&e.disposeIntermediateTensorInfo(p),y}const R4={kernelName:ol,backendName:"webgl",kernelFunc:s1},O4=nn({opSnippet:Nf+"\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+Yr+"\n  return result;\n",cpuKernelImpl:fz}),P4={kernelName:yo,backendName:"webgl",kernelFunc:O4},V4={kernelName:il,backendName:"webgl",kernelFunc:function L4(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;Ni(r,"maxPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:l}=s;S(en(o,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`);const c=Gn(r.shape,a,o,1,i,l);if(1===c.filterWidth&&1===c.filterHeight&&ke(c.inShape,c.outShape))return En({inputs:{x:r},backend:e});const h=new Ti(c,"max",!1);return e.runWebGLProgram(h,[r],r.dtype)}},z4={kernelName:ll,backendName:"webgl",kernelFunc:function M4(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{filterSize:a,strides:o,pad:i,dataFormat:l,dimRoundingMode:u}=s,h=Rs(r.shape,a,o,[1,1,1],i,u,l),d=new kf(h,"max",!1);return e.runWebGLProgram(d,[r],r.dtype)}};class B4{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const a=t.effectiveFilterHeight,o=t.effectiveFilterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${a-1-t.padInfo.top}, ${o-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${a};\n          wR += ${t.dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${o}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${a*o-1} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${o} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class W4{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const l=t.effectiveFilterDepth,u=t.effectiveFilterHeight,c=t.effectiveFilterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${l-1-t.padInfo.front}, ${u-1-t.padInfo.top}, ${c-1-t.padInfo.left});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${l};\n           wD += ${t.dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${t.strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${u};\n              wR += ${t.dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${c};\n                wC += ${t.dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${l*u*c-1} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${u} * ${c} +\n                  wR * ${c} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const G4={kernelName:Jc,backendName:"webgl",kernelFunc:function U4(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:a}=t,o=a,{filterSize:i,strides:l,pad:u,dimRoundingMode:c}=s,d=Rs(o.shape,i,l,[1,1,1],u,c),p=new kf(d,"max",!0),f=e.runWebGLProgram(p,[o],o.dtype),g=new W4(d),m=e.runWebGLProgram(g,[r,f],o.dtype);return e.disposeIntermediateTensorInfo(f),m}},j4={kernelName:Zc,backendName:"webgl",kernelFunc:function H4(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:a,output:o}=t,i=a;Ni([a,o],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,d=Gn(i.shape,l,u,1,c,h),f=new Ti(d,"max",!0),g=e.runWebGLProgram(f,[i],i.dtype),m=new B4(d),y=e.runWebGLProgram(m,[r,g],i.dtype);return e.disposeIntermediateTensorInfo(g),y}},K4={kernelName:jf,backendName:"webgl",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{x:s}=n,{filterSize:r,strides:a,pad:o,includeBatchInIndex:i}=t,l=e;S(4===s.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`);const u=[1,1];S(en(a,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`);const c=Gn(s.shape,r,a,u,o),[h,d]=function q4(n,t,e,s){let r=new Ti(e,"max",!1);const a=s.runWebGLProgram(r,[n],"float32");return r=new Ti(e,"max",!0,!0,t),[a,s.runWebGLProgram(r,[n],"float32")]}(s,i,c,l);return[h,d]}},Y4={kernelName:ul,backendName:"webgl",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{x:s}=n,{keepDims:r,axis:a}=t,o=e,i=s.shape.length,l=Ue(a,s.shape);let u=l;const c=It(u,i),h=null!=c,d=o.shouldExecuteOnCPU([s]),p=[];let f=s;if(h){if(d){const w=o.texData.get(f.dataId).values,v=new Array(i);for(let k=0;k<v.length;k++)v[k]=s.shape[c[k]];const I=If(w,s.shape,s.dtype,c,v);f=o.makeTensorInfo(v,s.dtype),o.texData.get(f.dataId).values=I}else f=ic(s,c,o);p.push(f),u=Et(u.length,i)}tn("sum",u,i);const[g,m]=Xt(f.shape,u);let y=g;r&&(y=$t(g,l));const x=function X4(n,t,e,s){const r=L(t),i=ue({inputs:{x:n},attrs:{shape:[L(n.shape)/r,r]},backend:s}),l=Zr(i,"float32","mean",s),u=ue({inputs:{x:l},attrs:{shape:e},backend:s});return s.disposeIntermediateTensorInfo(i),s.disposeIntermediateTensorInfo(l),u}(f,m,y,o);for(const b of p)o.disposeIntermediateTensorInfo(b);return x}},J4={kernelName:cl,backendName:"webgl",kernelFunc:function Z4(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a,keepDims:o}=s,i=r.shape.length,l=Ue(a,r.shape);let u=l;const c=It(u,i);let h=r;null!=c&&(h=bn({inputs:{x:r},backend:e,attrs:{perm:c}}),u=Et(u.length,r.shape.length)),tn("min",u,i);const[d,p]=Xt(h.shape,u),g=ue({inputs:{x:h},backend:e,attrs:{shape:[-1,L(p)]}}),m=Zr(g,g.dtype,"min",e);let y;return y=ue(o?{inputs:{x:m},backend:e,attrs:{shape:$t(d,l)}}:{inputs:{x:m},backend:e,attrs:{shape:d}}),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(m),null!=c&&e.disposeIntermediateTensorInfo(h),y}},tG=nn({opSnippet:Nf+"\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+Yr+"\n  return result;\n",cpuKernelImpl:mz}),nG={kernelName:xo,backendName:"webgl",kernelFunc:tG};class sG{constructor(t,e,s){this.variableNames=["x"],this.outputShape=e.map((c,h)=>c[0]+t[h]+c[1]);const r=t.length,a=it(r),o=e.map(c=>c[0]).join(","),i=e.map((c,h)=>c[0]+t[h]).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r),u="reflect"===s?0:1;this.userCode=1!==r?`\n      ${a} start = ${a}(${o});\n      ${a} end = ${a}(${i});\n\n      void main() {\n        ${a} outC = getOutputCoords();\n        for (int i = 0; i < ${r}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${u};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};\n          }\n        }\n        ${a} coords = outC - start;\n        setOutput(getX(${l}));\n      }\n    `:`\n        int start = ${o};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${u};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${u};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class rG{constructor(t,e,s){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((f,g)=>f[0]+t[g]+f[1]);const r=t.length,a=it(r),o=e.map(f=>f[0]).join(","),i=e.map((f,g)=>f[0]+t[g]).join(","),l=xn("rc",r),u=xn("source",r),c=`${l[r-1]} < ${this.outputShape[r-1]}`,h=1===r?"source":`vec2(${u.slice(-2).join()})`,d="reflect"===s?0:1;let p="";if(1===r){const f=`\n        ${a} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${d};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${d};\n        }\n        source -= start;\n      `;p=`\n        ${a} rc = outputLoc;\n        ${f}\n        result[0] = getChannel(getX(${u.join()}), ${h});\n        ${l[r-1]} += 1;\n        if(${c}) {\n          ${f}\n          result[1] = getChannel(getX(${u.join()}), ${h});\n        }\n      `}else{const f=`\n        ${a} source = rc;\n        ${a} lt = ${a}(lessThan(source, start));\n        ${a} gte = ${a}(greaterThanEqual(source, end));\n        ${a} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${d}) +\n                gte * ((end - 1) * 2 - source + ${d});\n        source -= start;\n      `;p=`\n        ${a} rc = outputLoc;\n        ${f}\n        result[0] = getChannel(getX(${u.join()}), ${h});\n        ${l[r-1]} += 1;\n        if(${c}) {\n          ${f}\n          result[1] = getChannel(getX(${u.join()}), ${h});\n        }\n        rc = outputLoc;\n        ${l[r-2]} += 1;\n        if(${l[r-2]} < ${this.outputShape[r-2]}) {\n          ${f}\n          result[2] = getChannel(getX(${u.join()}), ${h});\n          ${l[r-1]} += 1;\n          if(${c}) {\n            ${f}\n            result[3] = getChannel(getX(${u.join()}), ${h});\n          }\n        }\n      `}this.userCode=`\n      const ${a} start = ${a}(${o});\n      const ${a} end = ${a}(${i});\n\n      void main() {\n        ${a} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const aG={kernelName:hl,backendName:"webgl",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s}=n,{paddings:r,mode:a}=e,o=M().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new rG(s.shape,r,a):new sG(s.shape,r,a);return t.runWebGLProgram(o,[s],s.dtype)}},lG=nn({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  "+Yr+"\n  return result;\n"}),uG={kernelName:bo,backendName:"webgl",kernelFunc:lG};class cG{constructor(t,e,s){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[t,s],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${e-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${e-1}));\n      }\n    `}}const r1=nn({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),hG={kernelName:to,backendName:"webgl",kernelFunc:r1},a1="return a - b;",o1=nn({opSnippet:a1,packedOpSnippet:a1,supportsComplex:!0,cpuKernelImpl:Pz}),dG={kernelName:Oo,backendName:"webgl",kernelFunc:o1};function i1(n){const{inputs:t,backend:e,attrs:s}=n,{logits:r}=t,{dim:a}=s,o=Ue([a],r.shape),i=s1({inputs:{x:r},backend:e,attrs:{reductionIndices:o,keepDims:!1}}),l=$t(i.shape,o),u=ue({inputs:{x:i},backend:e,attrs:{shape:l}}),c=o1({inputs:{a:r,b:u},backend:e}),h=Zw({inputs:{x:c},backend:e}),d=lc({inputs:{x:h},backend:e,attrs:{axis:o,keepDims:!1}}),p=ue({inputs:{x:d},backend:e,attrs:{shape:l}}),f=r1({inputs:{a:h,b:p},backend:e});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),f}const pG={kernelName:$l,backendName:"webgl",kernelFunc:i1},mG={kernelName:qf,backendName:"webgl",kernelFunc:function fG(n){const{inputs:t,backend:e,attrs:s}=n,{logits:r}=t,{numSamples:a,seed:o,normalized:i}=s,l=i?r:i1({inputs:{logits:r},backend:e,attrs:{dim:r.shape.length-1}}),h=new cG(l.shape[0],l.shape[1],a),p=e.runWebGLProgram(h,[l],"int32",[[o]]);return i||e.disposeIntermediateTensorInfo(l),p}},gG=Mn+"\n  return -x;\n",bG={kernelName:dl,backendName:"webgl",kernelFunc:function xG(n){const{inputs:t,backend:e}=n,{x:s}=t;if(e.shouldExecuteOnCPU([s])){const a=e.texData.get(s.dataId),[o,i]=yz(a.values,s.shape,s.dtype);return e.makeTensorInfo(i,s.dtype,o)}let r;return r=M().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new gr(s.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new $s(s.shape,gG),e.runWebGLProgram(r,[s],s.dtype)}},wG=Cd,SG={kernelName:Qc,backendName:"webgl",kernelFunc:function vG(n){An("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l}=s,u=e.readSync(r.dataId),c=e.readSync(a.dataId),{selectedIndices:h}=wG(u,c,o,i,l);return e.makeTensorInfo([h.length],"int32",new Int32Array(h))}},IG=kd,CG={kernelName:eh,backendName:"webgl",kernelFunc:function NG(n){An("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,padToMaxOutputSize:u}=s,c=e.readSync(r.dataId),h=e.readSync(a.dataId),{selectedIndices:d,validOutputs:p}=IG(c,h,o,i,l,u);return[e.makeTensorInfo([d.length],"int32",new Int32Array(d)),e.makeTensorInfo([],"int32",new Int32Array([p]))]}},kG=Td,_G={kernelName:th,backendName:"webgl",kernelFunc:function TG(n){An("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=s,c=e.readSync(r.dataId),h=e.readSync(a.dataId),d=o,p=i,f=l,g=u,{selectedIndices:m,selectedScores:y}=kG(c,h,d,p,f,g);return[e.makeTensorInfo([m.length],"int32",new Int32Array(m)),e.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class $G{constructor(t,e,s,r){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${s}),\n                      float(index == coords.y)));\n      }\n    `}}const EG={kernelName:ml,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{indices:r}=t,{dtype:a,depth:o,onValue:i,offValue:l}=s,u=L(r.shape),c=new $G(u,o,i,l),h=ue({inputs:{x:r},backend:e,attrs:{shape:[u]}}),d=e.runWebGLProgram(c,[h],a);e.disposeIntermediateTensorInfo(h);const f=ue({inputs:{x:d},backend:e,attrs:{shape:[...r.shape,o]}});return e.disposeIntermediateTensorInfo(d),f}};function mc(n){const{inputs:t,backend:e}=n,{x:s}=t;if("complex64"===s.dtype){const r=_i({inputs:{input:s},backend:e}),a=mc({inputs:{x:r},backend:e}),o=dc({inputs:{input:s},backend:e}),i=mc({inputs:{x:o},backend:e}),l=yr({inputs:{real:a,imag:i},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(i),l}return Ei({attrs:{shape:s.shape,dtype:s.dtype,value:"string"===s.dtype?"":0},backend:e})}const AG={kernelName:Dl,backendName:"webgl",kernelFunc:mc},RG={kernelName:fl,backendName:"webgl",kernelFunc:function l1(n){const{inputs:t,backend:e}=n,{x:s}=t;if("string"===s.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===s.dtype){const r=_i({inputs:{input:s},backend:e}),a=l1({inputs:{x:r},backend:e}),o=dc({inputs:{input:s},backend:e}),i=mc({inputs:{x:o},backend:e}),l=yr({inputs:{real:a,imag:i},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(i),l}return Ei({attrs:{shape:s.shape,dtype:s.dtype,value:1},backend:e})}},FG={kernelName:gl,backendName:"webgl",kernelFunc:function DG(n){const{inputs:t,backend:e,attrs:s}=n,{axis:r}=s;if(1===t.length)return $f({inputs:{input:t[0]},backend:e,attrs:{dim:r}});const a=t[0].shape,o=t[0].dtype;t.forEach(c=>{Re(a,c.shape,"All tensors passed to stack must have matching shapes"),S(o===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});const i=[],u=zw({inputs:t.map(c=>{const h=$f({inputs:{input:c},backend:e,attrs:{dim:r}});return i.push(h),h}),backend:e,attrs:{axis:r}});return i.forEach(c=>e.disposeIntermediateTensorInfo(c)),u}};class OG{constructor(t,e,s){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=e.map((u,c)=>u[0]+t[c]+u[1]);const r=t.length,a=it(r),o=e.map(u=>u[0]).join(","),i=e.map((u,c)=>u[0]+t[c]).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${a} start = ${a}(${o});\n      ${a} end = ${a}(${i});\n\n      void main() {\n        ${a} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${a} coords = outC - start;\n          setOutput(getX(${l}));\n        }\n      }\n    `:`\n        int start = ${o};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class PG{constructor(t,e,s){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=e.map((g,m)=>g[0]+t[m]+g[1]);const r=t.length,a=it(r),o=e.map(g=>g[0]).join(","),i=e.map((g,m)=>g[0]+t[m]).join(","),l=xn("rc",r),u=xn("source",r),c=`${l[r-1]} < ${this.outputShape[r-1]}`,h=1===r?"source":`vec2(${u.slice(-2).join()})`,d=[`${a} rc = outputLoc;`,`${l[r-1]} += 1;\n       if(${c}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${l[r-2]} += 1;\n       if(${l[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${l[r-1]} += 1;\n         if(${c}) {`],p=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let f="";for(let g=0,m=1===r?2:4;g<m;g++)f+=`\n        ${d[g]}\n        if (${p}) {\n          result[${g}] = float(value);\n        } else {\n          ${a} source = rc - start;\n          result[${g}] = getChannel(getX(${u.join()}), ${h});\n        }\n      `;f+=1===r?"} ":"}}",this.userCode=`\n      const ${a} start = ${a}(${o});\n      const ${a} end = ${a}(${i});\n\n      void main() {\n        ${a} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${f}\n        setOutput(result);\n      }\n    `}}const u1=n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{paddings:a,constantValue:o}=s;if(0===L(r.shape))return Ei({backend:e,attrs:{shape:a.map((c,h)=>c[0]+r.shape[h]+c[1]),value:o,dtype:r.dtype}});const i=M().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new PG(r.shape,a,o):new OG(r.shape,a,o);return e.runWebGLProgram(i,[r],r.dtype,[[o]])},LG={kernelName:yl,backendName:"webgl",kernelFunc:u1},zG=nn({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  "+Yr+"\n  return result;\n"}),BG={kernelName:vo,backendName:"webgl",kernelFunc:zG},UG={kernelName:bl,backendName:"webgl",kernelFunc:function WG(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a,keepDims:o}=s,i=r.shape.length,l=[],u=Ue(a,r.shape);let c=u;const h=It(c,i);let p,d=r;if(null!=h&&(d=bn({inputs:{x:r},backend:e,attrs:{perm:h}}),c=Et(c.length,i),l.push(d)),tn("prod",c,i),e.shouldExecuteOnCPU([d])){const f=e.texData.get(d.dataId).values,{outVals:g,outShape:m,outDtype:y}=bz(d.shape,d.dtype,f,c);p=e.makeTensorInfo(m,y,g)}else{const[f,g]=Xt(d.shape,c),m=L(g),y=ue({inputs:{x:d},backend:e,attrs:{shape:[-1,m]}}),b=Zr(y,Nh(r.dtype),"prod",e);p=ue({inputs:{x:b},backend:e,attrs:{shape:f}}),l.push(y),l.push(b)}if(o){l.push(p);const f=$t(p.shape,u);p=ue({inputs:{x:p},backend:e,attrs:{shape:f}})}return l.forEach(f=>e.disposeIntermediateTensorInfo(f)),p}},HG={kernelName:Kf,backendName:"webgl",kernelFunc:function GG(n){const{inputs:t,backend:e,attrs:s}=n,{paramsNestedSplits:r,paramsDenseValues:a,indices:o}=t,{outputRaggedRank:i}=s,l=r.map(y=>e.readSync(y.dataId)),u=r.map(y=>y.shape),c=e.readSync(a.dataId),h=e.readSync(o.dataId),[d,p,f]=wz(l,u,c,a.shape,a.dtype,h,o.shape,i),g=d.map(y=>e.makeTensorInfo([y.length],"int32",y)),m=e.makeTensorInfo(f,a.dtype,p);return g.concat([m])}},qG={kernelName:Xf,backendName:"webgl",kernelFunc:function jG(n){const{inputs:t,backend:e}=n,{starts:s,limits:r,deltas:a}=t,o=e.readSync(s.dataId),i=e.readSync(r.dataId),l=e.readSync(a.dataId),[u,c]=vz(o,s.shape,s.dtype,i,r.shape,l,a.shape);return[e.makeTensorInfo([u.length],"int32",u),e.makeTensorInfo([c.length],s.dtype,c)]}},XG={kernelName:Yf,backendName:"webgl",kernelFunc:function KG(n){const{inputs:t,backend:e,attrs:s}=n,{shape:r,values:a,defaultValue:o,rowPartitionTensors:i}=t,{rowPartitionTypes:l}=s,u=e.readSync(r.dataId),c=e.readSync(a.dataId),h=e.readSync(o.dataId),d=i.map(m=>e.readSync(m.dataId)),p=i.map(m=>m.shape),[f,g]=Sz(u,r.shape,c,a.shape,a.dtype,h,o.shape,d,p,l);return e.makeTensorInfo(f,a.dtype,g)}},c1=n=>{const{backend:t,attrs:e}=n,{start:s,stop:r,step:a,dtype:o}=e,i=Iz(s,r,a,o);return t.makeTensorInfo([i.length],o,i)},YG={kernelName:nh,backendName:"webgl",kernelFunc:c1},ZG=Ze({opSnippet:"return 1.0 / x;"}),JG={kernelName:So,backendName:"webgl",kernelFunc:ZG},eH=Ze({opSnippet:Mn+"\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),tH={kernelName:Io,backendName:"webgl",kernelFunc:eH},sH=Ze({opSnippet:Mn+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),rH={kernelName:No,backendName:"webgl",kernelFunc:sH};class aH{constructor(t,e,s,r,a){this.variableNames=["A"],this.outputShape=[];const[o,i,l,u]=t;this.outputShape=[o,e,s,u];const c=[r&&e>1?i-1:i,r&&s>1?l-1:l],h=[r&&e>1?e-1:e,r&&s>1?s-1:s];let d;d=a?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${c[0]/h[0]},\n          ${c[1]/h[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${l}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${d};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class oH{constructor(t,e,s,r,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[o,i,l,u]=t;this.outputShape=[o,e,s,u];const c=[r&&e>1?i-1:i,r&&s>1?l-1:l],h=[r&&e>1?e-1:e,r&&s>1?s-1:s];let d;d=a?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${c[0]/h[0]},\n          ${c[1]/h[1]},\n          ${c[1]/h[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${l}.0,\n                                     ${l}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${d};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${s-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const lH={kernelName:Sl,backendName:"webgl",kernelFunc:function iH(n){const{inputs:t,backend:e,attrs:s}=n,{images:r}=t,{alignCorners:a,halfPixelCenters:o,size:i}=s,[l,u]=i,c=M().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new oH(r.shape,l,u,a,o):new aH(r.shape,l,u,a,o);return e.runWebGLProgram(c,[r],"float32")}};class uH{constructor(t,e,s){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;const[,r,a]=e,[,o,i]=t,l=[s&&o>1?r-1:r,s&&i>1?a-1:a],u=[s&&o>1?o-1:o,s&&i>1?i-1:i],c=l[0]/u[0],h=l[1]/u[1],d=1/c,p=1/h,f=2*Math.ceil(d)+2,g=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${c});\n        const float widthScale = float(${h});\n\n        const float invHeightScale = float(${d});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${f});\n        const int winWidth = int(${g});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${o}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${a-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const hH={kernelName:ah,backendName:"webgl",kernelFunc:function cH(n){const{inputs:t,backend:e,attrs:s}=n,{images:r,dy:a}=t,{alignCorners:o}=s,i=new uH(a.shape,r.shape,o);return e.runWebGLProgram(i,[a],a.dtype)}};class dH{constructor(t,e,s,r,a){this.variableNames=["A"],this.outputShape=[];const[o,i,l,u]=t;this.outputShape=[o,e,s,u];const c=[r&&e>1?i-1:i,r&&s>1?l-1:l],h=[r&&e>1?e-1:e,r&&s>1?s-1:s];let p;p=a?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${c[0]/h[0]},\n          ${c[1]/h[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${l}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${r?"0.5":"0.0"})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class pH{constructor(t,e,s,r,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[o,i,l,u]=t;this.outputShape=[o,e,s,u];const c=[r&&e>1?i-1:i,r&&s>1?l-1:l],h=[r&&e>1?e-1:e,r&&s>1?s-1:s];let p;p=a?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${c[0]/h[0]},\n          ${c[1]/h[1]},\n          ${c[1]/h[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${l}.0,\n                                     ${l}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${r?"0.5":"0.0"})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${s-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const mH={kernelName:vl,backendName:"webgl",kernelFunc:function fH(n){const{inputs:t,backend:e,attrs:s}=n,{images:r}=t,{alignCorners:a,halfPixelCenters:o,size:i}=s,[l,u]=i,c=M().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new pH(r.shape,l,u,a,o):new dH(r.shape,l,u,a,o);return e.runWebGLProgram(c,[r],r.dtype)}};class gH{constructor(t,e,s){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;const[,r,a]=e,[,o,i]=t,l=[s&&o>1?r-1:r,s&&i>1?a-1:a],u=[s&&o>1?o-1:o,s&&i>1?i-1:i],c=l[0]/u[0],h=l[1]/u[1],d=1/c,p=1/h,f=2*Math.ceil(d)+2,g=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${c});\n        const float widthScale = float(${h});\n\n        const float invHeightScale = float(${d});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${f});\n        const int winWidth = int(${g});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${o}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${l[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${l[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${s} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${a}) - 1),\n                ${s} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const xH={kernelName:rh,backendName:"webgl",kernelFunc:function yH(n){const{inputs:t,backend:e,attrs:s}=n,{images:r,dy:a}=t,{alignCorners:o}=s,i=new gH(a.shape,r.shape,o);return e.runWebGLProgram(i,[a],a.dtype)}};class bH{constructor(t,e){this.variableNames=["x"];const s=t.length;if(s>4)throw new Error(`WebGL backend: Reverse of rank-${s} tensor is not yet supported`);if(this.outputShape=t,1===s)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${t[0]} - coord - 1));\n        }\n      `);const a=t.map((i,l)=>(i=>-1!==e.indexOf(i)&&1!==t[i]?`${t[i]} - coords[${i}] - 1`:`coords[${i}]`)(l)).join(","),o=it(s);this.userCode=`\n      void main() {\n        ${o} coords = getOutputCoords();\n        setOutput(getX(${a}));\n      }\n    `}}class wH{constructor(t,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const s=t.length;if(s>4)throw new Error(`WebGL backend: Reverse of rank-${s} tensor is not yet supported`);this.outputShape=t;const r=xn("rc",s),a=`${r[s-1]} + 1 < ${this.outputShape[s-1]}`,o=`${r[s-2]} + 1 < ${this.outputShape[s-2]}`,i=it(s);function d(f){const g=t.map((x,b)=>function p(f,g){return-1!==e.indexOf(f)&&1!==t[f]?`${t[f]} - ${g[f]} - 1`:`${g[f]}`}(b,f));return`getChannel(getX(${g.join(",")}), vec2(${g.slice(-2).join(",")}))`}this.userCode=1===s?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${t[0]} - rc - 1),\n            ${t[0]} - rc - 1);\n          if(${a}){\n              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),\n                ${t[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function l(f){return d(f)}(r.slice())};\n          if(${a}){\n            result.g = ${function u(f){return f[s-1]="("+f[s-1]+" + 1)",d(f)}(r.slice())};\n          }\n          if(${o}) {\n            result.b = ${function c(f){return f[s-2]="("+f[s-2]+" + 1)",d(f)}(r.slice())};\n            if(${a}) {\n              result.a = ${function h(f){return f[s-1]="("+f[s-1]+" + 1)",f[s-2]="("+f[s-2]+" + 1)",d(f)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const SH={kernelName:Il,backendName:"webgl",kernelFunc:function vH(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{dims:a}=s,o=r.shape.length,i=Ue(a,r.shape);if(0===o)return En({inputs:{x:r},backend:e});const l=M().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new wH(r.shape,i):new bH(r.shape,i);return e.runWebGLProgram(l,[r],r.dtype)}};class IH{constructor(t,e){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const s=t[1],r=t[2];this.outputShape=t;let a="";a="number"==typeof e?`float outputValue = ${e.toFixed(2)};`:`\n        vec3 fill = vec3(${e.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${a}\n          if(coordX >= 0 && coordX < ${r} && coordY >= 0 && coordY < ${s}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const NH={kernelName:xh,backendName:"webgl",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{image:s}=n,{radians:r,fillValue:a,center:o}=t,i=e,l=new IH(s.shape,a),[u,c]=Fd(o,s.shape[1],s.shape[2]),h=[[u,c,Math.sin(r),Math.cos(r)]];return i.runWebGLProgram(l,[s],s.dtype,h)}},CH=Ze({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),kH={kernelName:Co,backendName:"webgl",kernelFunc:CH},TH=Ze({opSnippet:"return inversesqrt(x);",cpuKernelImpl:Nz}),_H={kernelName:ko,backendName:"webgl",kernelFunc:TH};class Af{constructor(t,e,s,r,a,o,i=!0,l=!1){this.variableNames=["updates","indices","defaultValue"],this.outputShape=o;const u=it(a.length),c=it(o.length);let h="";1===s?h="i":2===s&&(h="i, j");let p="";1===r?p="i":2===r&&(p="i, coords[1]");let g="";l&&(g="coords[0], coords[1]"),this.userCode=`\n        ${u} strides = ${u}(${a});\n\n        void main() {\n          ${c} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${t}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${e}; j++) {\n              int index = round(getIndices(${h}));\n              flattenedIndex += index * ${e>1?"strides[j]":"strides"};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += getUpdates(${p});\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(${g}), sum, float(found)));\n        }\n      `}}class $H{constructor(t,e,s,r,a,o,i=!0,l=!1){this.variableNames=["updates","indices","defaultValue"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=o;const u=it(a.length),c=it(o.length);let h="";1===s?h="i":2===s&&(h="i, j");let p="";1===r?p="i":2===r&&(p="i, coords[1]");let g="";l&&(g="coords[0], coords[1]"),this.userCode=`\n        ${u} strides = ${u}(${a});\n\n        void main() {\n          ${c} coords = getOutputCoords();\n          vec4 sum = vec4(0.);\n          vec4 found = vec4(0.);\n          for (int i = 0; i < ${t}; i+=2) {\n            ivec2 flattenedIndex = ivec2(0);\n            for (int j = 0; j < ${e}; j+=2) {\n              ivec4 index = round(getIndices(${h}));\n              flattenedIndex += index.xz * ${e>1?"strides[j]":"strides"};\n              if (j + 1 < ${e}) {\n                flattenedIndex += index.yw * ${e>1?"strides[j + 1]":"strides"};\n              }\n            }\n            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||\n                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {\n              vec4 updVals = getUpdates(${p});\n              if (flattenedIndex[0] == coords[0]) {\n                sum.xy += updVals.xy;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[0] == coords[0] + 1) {\n                sum.zw += updVals.xy;\n                found.zw = vec2(1.);\n              }\n              if (flattenedIndex[1] == coords[0]) {\n                sum.xy += updVals.zw;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[1] == coords[0] + 1) {\n                sum.zw += updVals.zw;\n                found.zw = vec2(1.);\n              }\n            }\n          }\n          setOutput(mix(getDefaultValue(${g}), sum, found));\n        }\n      `}}const AH={kernelName:Zf,backendName:"webgl",kernelFunc:function EH(n){const{inputs:t,backend:e,attrs:s}=n,{indices:r,updates:a}=t,{shape:o}=s,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=Pr(0,r,o),d=[h/u,u];if(0===h)return e.makeTensorInfo(o,r.dtype);const p=ue({inputs:{x:r},backend:e,attrs:{shape:[l,i]}}),f=ue({inputs:{x:a},backend:e,attrs:{shape:[l,u]}}),g=e.makeTensorInfo([],"float32",new Float32Array([0]));let m;m=M().getBool("WEBGL_PACK")?new $H(l,i,p.shape.length,f.shape.length,c,d):new Af(l,i,p.shape.length,f.shape.length,c,d);const y=e.runWebGLProgram(m,[f,p,g],f.dtype),x=ue({inputs:{x:y},backend:e,attrs:{shape:o}});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(y),e.disposeIntermediateTensorInfo(g),x}};class RH{constructor(t,e,s,r){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[t,s];const o=`for (int i = 0; i < ${Math.ceil(Math.log2(e+1))}; ++i) { if (left >= right) break;`,i=2===M().getNumber("WEBGL_VERSION")?"while (left < right) {":o;this.userCode=`\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${i}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${"left"===r?"<":"<="} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `}}const FH={kernelName:Qf,backendName:"webgl",kernelFunc:function DH(n){const{inputs:t,backend:e,attrs:s}=n,{sortedSequence:r,values:a}=t,{side:o}=s,i=new RH(r.shape[0],r.shape[1],a.shape[1],o);return e.runWebGLProgram(i,[r,a],"int32",[[r.shape[1]]])}};class OH{constructor(t,e,s){let r,a;if(this.variableNames=["c","a","b"],this.outputShape=e,s>4)throw Error(`Where for rank ${s} is not yet supported`);if(1===s)a="resRC",r="resRC";else{const i=["resRC.x","resRC.y","resRC.z","resRC.w"],l=[],u=[];for(let c=0;c<e.length;c++)u.push(`${i[c]}`),c<t&&l.push(`${i[c]}`);r=l.join(),a=u.join()}const o=it(s);this.userCode=`\n      void main() {\n        ${o} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${a}));\n        } else {\n          setOutput(getB(${a}));\n        }\n      }\n    `}}const LH={kernelName:Nl,backendName:"webgl",kernelFunc:function PH(n){const{inputs:t,backend:e}=n,{condition:s,t:r,e:a}=t,o=new OH(s.shape.length,r.shape,r.shape.length);return e.runWebGLProgram(o,[s,r,a],Tn(r.dtype,a.dtype))}},MH=Ze({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${cu};\n  float scale = ${hu};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),zH={kernelName:To,backendName:"webgl",kernelFunc:MH},WH=Ze({opSnippet:Va+"\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:kz}),UH={kernelName:Ao,backendName:"webgl",kernelFunc:WH},GH=Ze({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),HH={kernelName:Eo,backendName:"webgl",kernelFunc:GH},KH=Ze({opSnippet:Va+"\n  return sin(x);\n",packedOpSnippet:`\n  vec4 result = sin(x);\n  bvec4 isNaN = isnan(x);\n  ${Yr}\n  return result;\n`}),XH={kernelName:_o,backendName:"webgl",kernelFunc:KH},YH=Ze({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),ZH={kernelName:$o,backendName:"webgl",kernelFunc:YH},JH=Ze({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),QH={kernelName:Ro,backendName:"webgl",kernelFunc:JH},ej={kernelName:Tl,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockShape:a,paddings:o}=s;S(r.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const i=a.reduce((y,x)=>y*x),l=[[0,0]];l.push(...o);for(let y=1+a.length;y<r.shape.length;++y)l.push([0,0]);const u=[],c=u1({inputs:{x:r},backend:e,attrs:{paddings:l,constantValue:0}}),h=ri(c.shape,a,i,!1),d=ai(h.length,a.length,!1),p=oi(c.shape,a,i,!1),f=ue({inputs:{x:c},backend:e,attrs:{shape:h}}),g=bn({inputs:{x:f},backend:e,attrs:{perm:d}}),m=ue({inputs:{x:g},backend:e,attrs:{shape:p}});return u.push(c),u.push(f),u.push(g),u.forEach(y=>e.disposeIntermediateTensorInfo(y)),m}},nj={kernelName:oh,backendName:"webgl",kernelFunc:function tj(n){const{inputs:t,backend:e}=n,{indices:s,values:r,denseShape:a,defaultValue:o}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${a.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n         ${r.shape}`);if(0!==o.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${o.shape}`);const i=e.readSync(s.dataId),l=e.readSync(r.dataId),u=e.readSync(a.dataId),c=e.readSync(o.dataId)[0],[h,d,p,f,g]=_z(i,s.shape,s.dtype,l,r.dtype,u,c);return[e.makeTensorInfo(d,s.dtype,h),e.makeTensorInfo([d[0]],r.dtype,p),e.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(m=>Number(m)))),e.makeTensorInfo([g.length],s.dtype,new Int32Array(g))]}},rj={kernelName:ih,backendName:"webgl",kernelFunc:function sj(n){const{inputs:t,backend:e}=n,{inputIndices:s,inputShape:r,newShape:a}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape ${r.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const o=Array.from(e.readSync(r.dataId)),i=e.readSync(s.dataId),l=Array.from(e.readSync(a.dataId)),[u,c,h]=$z(i,s.shape,s.dtype,o,l);return[e.makeTensorInfo(c,s.dtype,u),e.makeTensorInfo([h.length],a.dtype,new Int32Array(h))]}},oj={kernelName:lh,backendName:"webgl",kernelFunc:function aj(n){const{inputs:t,backend:e}=n,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${a.shape}`);const o=e.readSync(s.dataId),i=e.readSync(r.dataId),l=e.readSync(a.dataId),[u,c]=mw(o,s.shape,s.dtype,i,l,!0);return e.makeTensorInfo(c,s.dtype,u)}},lj={kernelName:uh,backendName:"webgl",kernelFunc:function ij(n){const{inputs:t,backend:e}=n,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${a.shape}`);const o=e.readSync(s.dataId),i=e.readSync(r.dataId),l=e.readSync(a.dataId),[u,c]=mw(o,s.shape,s.dtype,i,l);return e.makeTensorInfo(c,s.dtype,u)}},cj={kernelName:em,backendName:"webgl",kernelFunc:function uj(n){const{inputs:t,backend:e,attrs:s}=n,{sparseIndices:r,sparseValues:a,defaultValue:o}=t,{outputShape:i}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:d}=Pr(0,r,i);if("string"===a.dtype){const y=e.bufferSync(r),x=e.bufferSync(a),b=Xs(e.readSync(o.dataId)[0]),w=Cz(y,x,i,d,c,u,l,h,b,!1);return e.makeTensorInfo(i,w.dtype,w.values)}const f=new Af(u,l,r.shape.length,a.shape.length,h,[d,1],!1),g=e.runWebGLProgram(f,[a,r,o],a.dtype),m=ue({inputs:{x:g},backend:e,attrs:{shape:i}});return e.disposeIntermediateTensorInfo(g),m}},dj={kernelName:_l,backendName:"webgl",kernelFunc:function hj(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{numOrSizeSplits:a,axis:o}=s,i=Ue(o,r.shape)[0],l=Zd(r,a,i),c=new Array(r.shape.length).fill(0),h=r.shape.slice();return l.map(d=>{const p=[...h];p[i]=d;const f=Ma({inputs:{x:r},backend:e,attrs:{begin:c,size:p}});return c[i]+=d,f})}},h1="return sqrt(x);",pj=Ze({opSnippet:h1,packedOpSnippet:h1,cpuKernelImpl:Ez}),fj={kernelName:Do,backendName:"webgl",kernelFunc:pj},gj={kernelName:ch,backendName:"webgl",kernelFunc:Ze({opSnippet:"return x * x;"})},d1="return (a - b) * (a - b);",yj=nn({opSnippet:d1,packedOpSnippet:d1}),xj={kernelName:Fo,backendName:"webgl",kernelFunc:yj},wj={kernelName:El,backendName:"webgl",kernelFunc:function bj(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;if("string"!==r.dtype)throw new Error("Input must be of datatype string");const o=zs(e.readSync(r.dataId)),i=Az(o,"string",s);return e.makeTensorInfo(r.shape,"string",i)}},Sj={kernelName:Mo,backendName:"webgl",kernelFunc:function vj({inputs:n,attrs:t,backend:e}){const{x:s}=n,a=new $s(s.shape,Mn+`\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `);return e.runWebGLProgram(a,[s],s.dtype)}};class Ij{constructor(t,e,s){this.variableNames=["x"],this.outputShape=s;const r=s.length,a=it(s.length),o=it(s.length);let i="";if(1===r)i="coords * strides + begin";else{let l=0;i=s.map((u,c)=>(l++,1===s.length?`coords * strides[${c}] + begin[${c}]`:`coords[${l-1}] * strides[${c}] + begin[${c}]`)).join(",")}this.userCode=`\n      ${a} begin = ${a}(${t});\n      ${a} strides = ${a}(${e});\n\n      void main() {\n        ${o} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const Cj={kernelName:hh,backendName:"webgl",kernelFunc:function Nj(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{begin:a,end:o,strides:i,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:d}=s,{finalShapeSparse:p,finalShape:f,isIdentity:g,sliceDim0:m,isSimpleSlice:y,begin:x,end:b,strides:w}=ed(r.shape,a,o,i,l,u,c,h,d);let v;if(g)v=ue({inputs:{x:r},backend:e,attrs:{shape:f}});else if(m||y){S(r.shape.length>=1,()=>`Input must have rank at least 1, got: ${r.shape.length}`);const N=Zh(x,b,w),k=Ma({inputs:{x:r},backend:e,attrs:{begin:x,size:N}});v=ue({inputs:{x:k},backend:e,attrs:{shape:f}}),e.disposeIntermediateTensorInfo(k)}else if(e.shouldExecuteOnCPU([r])){const k=e.readSync(r.dataId),_=Ge(r.shape,r.dtype,k),$=Rz(p,_,w,x);v=e.makeTensorInfo(f,r.dtype,$.values)}else{const k=new Ij(x,w,p);v=e.runWebGLProgram(k,[r],r.dtype)}const I=ue({inputs:{x:v},backend:e,attrs:{shape:f}});return e.disposeIntermediateTensorInfo(v),I}},Tj={kernelName:dh,backendName:"webgl",kernelFunc:function kj(n){const{inputs:t,backend:e,attrs:s}=n,{separator:r,nGramWidths:a,leftPad:o,rightPad:i,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,d=e.readSync(c.dataId),p=e.readSync(h.dataId),[f,g]=Dz(d,p,r,a,o,i,l,u);return[e.makeTensorInfo([f.length],"string",f),e.makeTensorInfo(h.shape,"int32",g)]}},$j={kernelName:ph,backendName:"webgl",kernelFunc:function _j(n){const{inputs:t,backend:e,attrs:s}=n,{skipEmpty:r}=s,{input:a,delimiter:o}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==o.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);const i=e.readSync(a.dataId),l=e.readSync(o.dataId)[0],[u,c,h]=Fz(i,l,r),d=c.length;return[e.makeTensorInfo([d,2],"int32",u),e.makeTensorInfo([d],"string",c),e.makeTensorInfo([2],"int32",new Int32Array(h))]}},Aj={kernelName:fh,backendName:"webgl",kernelFunc:function Ej(n){const{inputs:t,backend:e,attrs:s}=n,{numBuckets:r}=s,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const o=e.readSync(a.dataId),i=Oz(o,r);return e.makeTensorInfo(a.shape,"int32",i)}},Rj=Ze({opSnippet:"return tan(x);"}),Dj={kernelName:Po,backendName:"webgl",kernelFunc:Rj},Fj=Ze({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),Oj={kernelName:Lo,backendName:"webgl",kernelFunc:Fj},Lj={kernelName:Jf,backendName:"webgl",kernelFunc:function Pj(n){const{inputs:t,backend:e}=n,{tensor:r,indices:a,updates:o}=t,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=Pr(0,a,r.shape),d=[h/u,u];if(0===h)return e.makeTensorInfo(r.shape,a.dtype);const p=ue({inputs:{x:a},backend:e,attrs:{shape:[l,i]}}),f=ue({inputs:{x:o},backend:e,attrs:{shape:[l,u]}}),g=ue({inputs:{x:r},backend:e,attrs:{shape:d}}),m=new Af(l,i,p.shape.length,f.shape.length,c,d,!1,!0),y=e.runWebGLProgram(m,[f,p,g],g.dtype),x=ue({inputs:{x:y},backend:e,attrs:{shape:r.shape}});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(y),x}};class Vj{constructor(t,e){this.variableNames=["A"];const s=new Array(t.length);for(let o=0;o<s.length;o++)s[o]=t[o]*e[o];this.outputShape=s,this.rank=s.length;const r=it(this.rank),a=function Mj(n){const t=n.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${n[0]})`;const e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let r=0;r<n.length;r++)s.push(`imod(${e[r]}, ${n[r]})`);return s.join()}(t);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${a}));\n      }\n    `}}function p1(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{reps:a}=s;if("string"===r.dtype||r.shape.length>5){const l=e.readSync(r.dataId),u="string"===r.dtype?l.map(d=>Xs(d)):l,c=Ge(r.shape,r.dtype,u),h=Lz(c,a);return e.makeTensorInfo(h.shape,h.dtype,h.values)}const o=new Vj(r.shape,a);return e.runWebGLProgram(o,[r],r.dtype)}const zj={kernelName:Vo,backendName:"webgl",kernelFunc:p1};class Bj{constructor(t){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=t,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class Wj{constructor(t){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=t,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function Jr(n,t){null!==t&&n.disposeIntermediateTensorInfo(t)}function f1(n){let t=1;for(;t<n;)t*=2;return t}const Gj={kernelName:mh,backendName:"webgl",kernelFunc:function Uj(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{k:a,sorted:o}=s,i=M().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=M().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=r.shape,c=u[u.length-1];if(e.shouldExecuteOnCPU([r])||c<i||a>l){const $=e.readSync(r.dataId),[P,B]=Vz($,u,r.dtype,a,o);return[e.makeTensorInfo(P.shape,P.dtype,P.values),e.makeTensorInfo(B.shape,B.dtype,B.values)]}if(0===a)return u[u.length-1]=0,[e.makeTensorInfo(u,r.dtype,[]),e.makeTensorInfo(u,"int32",[])];if(1===c)return[r,Ei({attrs:{shape:u,dtype:"int32",value:0},backend:e})];const h=e.texData.get(r.dataId),d=null!==h&&h.isPacked,p=d?e.unpackTensor(r):r,g=L(u)/c,m=ue({inputs:{x:p},attrs:{shape:[g,c]},backend:e});d&&Jr(e,p);const y=f1(a),x=f1(c);let b=null;const w=()=>null===b?[m,m]:[m,b],v=($,P,B)=>{const W=w(),U=new Bj(B),K=b;b=e.runWebGLProgram(U,W,"int32",[[c],[null===b?1:0],[Number.NEGATIVE_INFINITY],[$],[P]]),Jr(e,K)};for(let $=1;$<y;$*=2){const P=2*$;for(let B=$;B>=1;B/=2)v(P,B,[g,x])}for(let $=x;$>y;$/=2){const P=w(),B=new Wj([g,$/2]),G=b;b=e.runWebGLProgram(B,P,"int32",[[c],[null===b?1:0],[y]]),Jr(e,G);const q=y/2,K=2*q;for(let H=q;H>=1;H/=2)v(K,H,b.shape)}let I=b;b=Ma({inputs:{x:b},backend:e,attrs:{begin:0,size:[g,a]}}),Jr(e,I);let N=n1({inputs:{x:m,indices:b},backend:e,attrs:{axis:1,batchDims:1}});Jr(e,m);const k=u.slice(0,-1);k.push(a),I=b,b=ue({inputs:{x:b},attrs:{shape:k},backend:e}),Jr(e,I);const _=N;return N=ue({inputs:{x:N},attrs:{shape:k},backend:e}),Jr(e,_),[N,b]}};class Hj{constructor(t,e,s,r,a,o){this.variableNames=["Image","Transforms"],this.outputShape=o;const i="nearest"===s?1:2;let l;switch(r){case"constant":default:l=1;break;case"reflect":l=2;break;case"wrap":l=3;break;case"nearest":l=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${l} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${l} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${l} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${t} && 0 <= coordX && coordX < ${e}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${a});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${a});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${e}));\n                float mapY = mapCoord(inY, float(${t}));\n\n                if (${i} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const qj={kernelName:gh,backendName:"webgl",kernelFunc:function jj(n){const{inputs:t,backend:e,attrs:s}=n,{image:r,transforms:a}=t,{interpolation:o,fillMode:i,fillValue:l,outputShape:u}=s,[c,h,d,p]=r.shape,[f,g]=u??[h,d],y=new Hj(h,d,o,i,l,[c,f,g,p]);return e.runWebGLProgram(y,[r,a],"float32")}},Xj={kernelName:yh,backendName:"webgl",kernelFunc:function Kj(n){const{inputs:t,attrs:e,backend:s}=n,{axis:r}=e,{x:a}=t;Ni(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const o=s.readSync(a.dataId),{outputValues:i,outputShape:l,indices:u}=Mz(o,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,i),s.makeTensorInfo([u.length],"int32",u)]}},Zj={kernelName:Al,backendName:"webgl",kernelFunc:function Yj(n){const{inputs:t,backend:e,attrs:s}=n,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const o=r,i=o.shape.length,l=r.shape[a],u=new Array(i-1);let c=0;for(let g=0;g<i;g++)g!==a&&(u[c++]=o.shape[g]);const h=[],d=new Array(i).fill(0),p=o.shape.slice();p[a]=1;const f=new Array(l);for(let g=0;g<f.length;g++){d[a]=g;const m=Ma({inputs:{x:o},backend:e,attrs:{begin:d,size:p}}),y=ue({inputs:{x:m},backend:e,attrs:{shape:u}});f[g]=y,h.push(m)}return h.forEach(g=>e.disposeIntermediateTensorInfo(g)),f}};class Jj{constructor(t,e){this.variableNames=["x","segmentIds"];const s=t.windowSize,r=t.batchSize,a=t.inSize,o=t.numSegments,i=o*Math.ceil(a/s);this.outputShape=[r,i];const c=4*Math.floor(s/4),h=s%4,d="\n        sumValue += dot(values, segFilter);\n    ";let p="";a%s>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return initializationValue;\n        }\n      `);let f="";a%s>0&&(f=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${p}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${f}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${o})) * float(${s}));\n        int currentSeg = int(mod(float(outIdx), float(${o})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${c}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${d}\n        }\n\n        int inIdx = inOffset + ${c};\n        if (${1===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${d}\n        } else if (${2===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${d}\n        } else if (${3===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${d}\n        }\n        setOutput(sumValue);\n      }\n    `}}const tq=[D3,O3,V3,B3,U3,j3,K3,Y3,eB,nB,aB,lB,hB,mB,xB,wB,SB,kB,_B,EB,DB,MB,BB,HB,qB,JB,eW,rW,g3,iW,dW,gW,SW,CW,TW,$W,AW,OW,LW,MW,BW,UW,HW,KW,YW,eU,nU,aU,lU,cU,dU,mU,yU,wU,SU,IU,CU,TU,$U,AU,DU,OU,VU,BU,UU,jU,XU,ZU,QU,m3,t4,cW,s4,a4,i4,x3,u4,h4,p4,g4,b4,v4,I4,C4,_4,E4,R4,P4,V4,z4,G4,j4,K4,Y4,J4,nG,aG,uG,mG,v3,bG,SG,CG,_G,KB,EG,RG,FG,LG,BG,w3,UG,HG,qG,XG,YG,XB,hG,JG,tH,rH,I3,lH,hH,mH,xH,SH,NH,kH,_H,AH,FH,LH,zH,UH,HH,XH,ZH,VB,pG,QH,ej,nj,rj,oj,lj,cj,dj,fj,gj,xj,wj,Sj,Cj,Tj,$j,Aj,dG,E3,Dj,Oj,Lj,zj,Gj,qj,A3,Xj,Zj,{kernelName:Rl,backendName:"webgl",kernelFunc:function Qj(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,segmentIds:a}=t,{numSegments:o}=s,i=r.shape.length,l=[];let u=0;const c=It([u],i);let h=r;null!=c&&(h=bn({inputs:{x:r},backend:e,attrs:{perm:c}}),l.push(h),u=Et(1,i)[0]);const d=fy(h.shape,u,o),p=L([h.shape[u]]),f=ue({inputs:{x:h},backend:e,attrs:{shape:[-1,p]}});l.push(f);const g=Nh(r.dtype),m=(w,v,I,N,k)=>{const _=w.shape[0],$=w.shape[1],P=py($,k),W=new Jj({windowSize:P,inSize:$,batchSize:_,numSegments:k},v),U=e.compileAndRun(W,[w,I],N);if(l.push(U),U.shape[1]===k)return U;const G=c1({backend:e,attrs:{start:0,stop:k,step:1,dtype:"float32"}}),q=p1({inputs:{x:G},backend:e,attrs:{reps:[$/P]}});return l.push(G),l.push(q),m(U,v,q,N,k)},x=ue({inputs:{x:m(f,"unsortedSegmentSum",a,g,o)},backend:e,attrs:{shape:d}});let b=x;if(null!=c){l.push(x);const w=sr(c);b=bn({inputs:{x:b},backend:e,attrs:{perm:w}})}return l.forEach(w=>e.disposeIntermediateTensorInfo(w)),b}},AG];for(const n of tq)wh(n);var ye=te(9212);const sq=["canvas"];function rq(n,t){if(1&n&&(ye.ynx(0),ye._UZ(1,"img",8),ye.TgZ(2,"div",9),ye._uU(3),ye.qZA(),ye.BQk()),2&n){const e=ye.oxw();ye.xp6(),ye.Q6J("src",e.dataUrl,ye.LSH),ye.xp6(2),ye.hij(" ",e.predictNumber," ")}}let aq=(()=>{class n{constructor(){this.width=400,this.height=400,this.capturedImageDataUrl=null,this.normalizeImage=null,this.dataUrl=""}ngAfterViewInit(){const e=this.canvas?.nativeElement;if(this.cx=e.getContext("2d"),e.width=this.width,e.height=this.height,!this.cx)throw"Cannot get context";this.cx.lineWidth=28,this.cx.lineCap="round",this.cx.strokeStyle="rgb(0,0,0)",this.captureEvents(e)}captureEvents(e){(0,re.R)(e,"mousedown").pipe((0,pe.w)(s=>(0,re.R)(e,"mousemove").pipe((0,Z.R)((0,re.R)(e,"mouseup")),(0,Z.R)((0,re.R)(e,"mouseleave")),function Se(){return(0,ae.e)((n,t)=>{let e,s=!1;n.subscribe((0,ve.x)(t,r=>{const a=e;e=r,s&&t.next([a,r]),s=!0}))})}()))).subscribe(s=>{const r=e.getBoundingClientRect(),a=s[0],o=s[1];this.drawOnCanvas({x:a.clientX-r.left,y:a.clientY-r.top},{x:o.clientX-r.left,y:o.clientY-r.top})})}drawOnCanvas(e,s){this.cx&&(this.cx.beginPath(),e&&(this.cx.moveTo(e.x,e.y),this.cx.lineTo(s.x,s.y),this.cx.stroke()))}clearCanvas(){const e=this.canvas?.nativeElement;this.cx?.clearRect(0,0,e.width,e.height)}findCorners(e){let s=0,r=0,a=0,o=0;const i=e.length,l=e[0].length;for(let u=0;u<i;u++){let c=!0;for(let h=0;h<l;h++)if(e[u][h]>0){c=!1;break}if(!c){r=u;break}}for(let u=0;u<l;u++){let c=!0;for(let h=0;h<i;h++)if(e[h][u]>0){c=!1;break}if(!c){s=u;break}}for(let u=l-1;u>=0;u--){let c=!0;for(let h=0;h<i;h++)if(e[h][u]>0){c=!1;break}if(!c){a=u;break}}for(let u=i-1;u>=0;u--){let c=!0;for(let h=0;h<l;h++)if(e[u][h]>0){c=!1;break}if(!c){o=u;break}}return[s,r,a,o]}preProcessImage(){var e=this;return O(function*(){if(e.cx&&e.canvas){let r=e.cx.getImageData(0,0,e.width,e.height).data,a=Ys(Array.prototype.slice.call(r),[400,400,4],"float32"),o=Yo(a,[3],2);o=o.reshape([400,400,1]);const[i,l,u,c]=e.findCorners(o.arraySync());let p=Math.max(u-i+1,c-l+1),f=e.cx.getImageData(i,l,p,p);a=Ys(Array.prototype.slice.call(f.data),[p,p,4]),a=Ie(a,255),o=Yo(a,[3],2),o=ys.resizeNearestNeighbor(o,[20,20]),o=o.reshape([1,20,20,1]);const g=e.Center_Mass(o.reshape([20,20]).arraySync()),m=14-g[0],y=14-g[1];let x=o.reshape([20,20]).arraySync(),b=Array.from({length:28},()=>Array(28).fill(0));for(let w=0;w<20;w++)for(let v=0;v<20;v++)w+y<28&&v+m<28&&(b[w+y][v+m]=x[w][v]);e.imageAfterPreProcess=b,e.dataUrl=function oq(n){const t=document.createElement("canvas"),e=t.getContext("2d"),s=n[0].length,r=n.length;t.width=s+10,t.height=r+10,e.strokeStyle="black",e.lineWidth=5,e.strokeRect(2.5,2.5,s+5,r+5);for(let i=0;i<r;i++)for(let l=0;l<s;l++){const u=255*n[i][l];e.fillStyle=`rgb(${u}, ${u}, ${u})`,e.fillRect(l+5,i+5,1,1)}return t.toDataURL()}(b)}})()}makePrediction(){var e=this;return O(function*(){yield e.preProcessImage();let s=Ys(e.imageAfterPreProcess.flat());s=s.reshape([1,28,28,1]);const a=(yield function SE(n,t){return Rp.apply(this,arguments)}("/assets/model.json")).predict(s).reshape([10]).argMax().dataSync();e.predictNumber=a[0]})()}Center_Mass(e){const s=e.length,r=e[0].length;let a=0,o=0,i=0;for(let l=0;l<r;l++)for(let u=0;u<s;u++)a+=u*e[l][u],o+=l*e[l][u],i+=e[l][u];return a/=i,o/=i,[Math.round(a),Math.round(o)]}static#e=this.\u0275fac=function(s){return new(s||n)};static#t=this.\u0275cmp=ye.Xpm({type:n,selectors:[["app-canvas"]],viewQuery:function(s,r){if(1&s&&ye.Gf(sq,5),2&s){let a;ye.iGM(a=ye.CRH())&&(r.canvas=a.first)}},inputs:{width:"width",height:"height"},standalone:!0,features:[ye.jDz],decls:32,vars:1,consts:[[1,"canvas-container"],["canvas",""],[4,"ngIf"],[1,"button-container"],["mat-raised-button","","color","primary",3,"click"],[1,"description"],["href","http://yann.lecun.com/exdb/mnist/",2,"background-color","yellow"],["href","https://github.com/tiachoptinhdu/Machine_learning/blob/main/CNN_MNIST_for_web.ipynb"],["alt","","width","400","height","400",3,"src"],[1,"predict"]],template:function(s,r){1&s&&(ye.TgZ(0,"div",0),ye._UZ(1,"canvas",null,1),ye.YNc(3,rq,4,2,"ng-container",2),ye.qZA(),ye.TgZ(4,"div",3)(5,"button",4),ye.NdJ("click",function(){return r.clearCanvas()}),ye._uU(6,"Clear"),ye.qZA(),ye.TgZ(7,"button",4),ye.NdJ("click",function(){return r.makePrediction()}),ye._uU(8,"Predict"),ye.qZA()(),ye.TgZ(9,"div",5)(10,"p"),ye._uU(11,"This is a demo of Handwritten Digit Recognition that was built based on TensorFlow JavaScript. The demo runs in your browser, not on a server."),ye.qZA(),ye.TgZ(12,"p")(13,"strong"),ye._uU(14,"OFFLINE PROCESS:"),ye.qZA()(),ye.TgZ(15,"ul")(16,"li"),ye._uU(17,"The Dataset to train the model: "),ye.TgZ(18,"a",6),ye._uU(19,"MNIST"),ye.qZA()(),ye.TgZ(20,"li"),ye._uU(21,"The CNN architecture and source code for training the model are provided here. "),ye.TgZ(22,"a",7),ye._uU(23,"COLAB"),ye.qZA()()(),ye.TgZ(24,"p")(25,"strong"),ye._uU(26,"ONLINE PROCESS:"),ye.qZA()(),ye.TgZ(27,"ul")(28,"li"),ye._uU(29,"The image is loaded from the canvas and preprocessed following the process outlined in the MNIST dataset"),ye.qZA(),ye.TgZ(30,"li"),ye._uU(31,"After that, the image is loaded to the model and a prediction is made"),ye.qZA()()()),2&s&&(ye.xp6(3),ye.Q6J("ngIf",r.dataUrl))},dependencies:[V.ot,V.lW,Me.ez,Me.O5],styles:["[_nghost-%COMP%]{display:contents}.canvas-container[_ngcontent-%COMP%]{display:flex;justify-content:center;text-align:center}.canvas-container[_ngcontent-%COMP%]   canvas[_ngcontent-%COMP%]{border:1px solid #000;display:block}.canvas-container[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{border:1px solid #000;display:block}.canvas-container[_ngcontent-%COMP%]   .predict[_ngcontent-%COMP%]{font-size:350px;font-weight:700;color:brown;width:400px;height:400px;border:1px solid green;text-align:center}.button-container[_ngcontent-%COMP%]{display:flex;justify-content:center;text-align:center}.button-container[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{margin:10px}@media (max-width: 768px){.canvas-container[_ngcontent-%COMP%]{flex-direction:column}}"]})}return n})();const iq=[{path:"mnist",component:(()=>{class n{static#e=this.\u0275fac=function(s){return new(s||n)};static#t=this.\u0275cmp=ye.Xpm({type:n,selectors:[["app-mnist"]],standalone:!0,features:[ye.jDz],decls:4,vars:0,consts:[["id","result"]],template:function(s,r){1&s&&(ye.TgZ(0,"h1"),ye._uU(1,"Handwritten digit recognition"),ye.qZA(),ye._UZ(2,"app-canvas")(3,"span",0))},dependencies:[aq],styles:["h1[_ngcontent-%COMP%]{color:red;text-align:center;font-size:70px;font-weight:700;margin-bottom:20px;margin-top:0;background-color:#fff;animation:_ngcontent-%COMP%_headingAnimation 2s infinite alternate}@keyframes _ngcontent-%COMP%_headingAnimation{0%{color:red}50%{color:#00f}to{color:red}}"]})}return n})()}];let lq=(()=>{class n{static#e=this.\u0275fac=function(s){return new(s||n)};static#t=this.\u0275mod=ye.oAB({type:n});static#n=this.\u0275inj=ye.cJS({imports:[_e.Bz.forChild(iq),_e.Bz]})}return n})(),uq=(()=>{class n{static#e=this.\u0275fac=function(s){return new(s||n)};static#t=this.\u0275mod=ye.oAB({type:n});static#n=this.\u0275inj=ye.cJS({imports:[Me.ez,lq]})}return n})()},186:Qe=>{Qe.exports=te;var je=null;try{je=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch{}function te(Y,T,fe){this.low=0|Y,this.high=0|T,this.unsigned=!!fe}function De(Y){return!0===(Y&&Y.__isLong__)}Object.defineProperty(te.prototype,"__isLong__",{value:!0}),te.isLong=De;var Ft={},Ae={};function gt(Y,T){var fe,Oe,S;return T?(S=0<=(Y>>>=0)&&Y<256)&&(Oe=Ae[Y])?Oe:(fe=_e(Y,(0|Y)<0?-1:0,!0),S&&(Ae[Y]=fe),fe):(S=-128<=(Y|=0)&&Y<128)&&(Oe=Ft[Y])?Oe:(fe=_e(Y,Y<0?-1:0,!1),S&&(Ft[Y]=fe),fe)}function Me(Y,T){if(isNaN(Y))return T?Jt:ut;if(T){if(Y<0)return Jt;if(Y>=ae)return st}else{if(Y<=-ve)return qe;if(Y+1>=ve)return Ke}return Y<0?Me(-Y,T).neg():_e(Y%Z|0,Y/Z|0,T)}function _e(Y,T,fe){return new te(Y,T,fe)}te.fromInt=gt,te.fromNumber=Me,te.fromBits=_e;var ze=Math.pow;function O(Y,T,fe){if(0===Y.length)throw Error("empty string");if("NaN"===Y||"Infinity"===Y||"+Infinity"===Y||"-Infinity"===Y)return ut;if("number"==typeof T?(fe=T,T=!1):T=!!T,(fe=fe||10)<2||36<fe)throw RangeError("radix");var Oe;if((Oe=Y.indexOf("-"))>0)throw Error("interior hyphen");if(0===Oe)return O(Y.substring(1),T,fe).neg();for(var S=Me(ze(fe,8)),Re=ut,tt=0;tt<Y.length;tt+=8){var L=Math.min(8,Y.length-tt),Ut=parseInt(Y.substring(tt,tt+L),fe);if(L<8){var rn=Me(ze(fe,L));Re=Re.mul(rn).add(Me(Ut))}else Re=(Re=Re.mul(S)).add(Me(Ut))}return Re.unsigned=T,Re}function V(Y,T){return"number"==typeof Y?Me(Y,T):"string"==typeof Y?O(Y,T):_e(Y.low,Y.high,"boolean"==typeof T?T:Y.unsigned)}te.fromString=O,te.fromValue=V;var Z=4294967296,ae=Z*Z,ve=ae/2,Se=gt(1<<24),ut=gt(0);te.ZERO=ut;var Jt=gt(0,!0);te.UZERO=Jt;var Ot=gt(1);te.ONE=Ot;var Bn=gt(1,!0);te.UONE=Bn;var vt=gt(-1);te.NEG_ONE=vt;var Ke=_e(-1,2147483647,!1);te.MAX_VALUE=Ke;var st=_e(-1,-1,!0);te.MAX_UNSIGNED_VALUE=st;var qe=_e(0,-2147483648,!1);te.MIN_VALUE=qe;var Q=te.prototype;Q.toInt=function(){return this.unsigned?this.low>>>0:this.low},Q.toNumber=function(){return this.unsigned?(this.high>>>0)*Z+(this.low>>>0):this.high*Z+(this.low>>>0)},Q.toString=function(T){if((T=T||10)<2||36<T)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(qe)){var fe=Me(T),Oe=this.div(fe),S=Oe.mul(fe).sub(this);return Oe.toString(T)+S.toInt().toString(T)}return"-"+this.neg().toString(T)}for(var Re=Me(ze(T,6),this.unsigned),tt=this,L="";;){var Ut=tt.div(Re),ke=(tt.sub(Ut.mul(Re)).toInt()>>>0).toString(T);if((tt=Ut).isZero())return ke+L;for(;ke.length<6;)ke="0"+ke;L=""+ke+L}},Q.getHighBits=function(){return this.high},Q.getHighBitsUnsigned=function(){return this.high>>>0},Q.getLowBits=function(){return this.low},Q.getLowBitsUnsigned=function(){return this.low>>>0},Q.getNumBitsAbs=function(){if(this.isNegative())return this.eq(qe)?64:this.neg().getNumBitsAbs();for(var T=0!=this.high?this.high:this.low,fe=31;fe>0&&!(T&1<<fe);fe--);return 0!=this.high?fe+33:fe+1},Q.isZero=function(){return 0===this.high&&0===this.low},Q.eqz=Q.isZero,Q.isNegative=function(){return!this.unsigned&&this.high<0},Q.isPositive=function(){return this.unsigned||this.high>=0},Q.isOdd=function(){return 1==(1&this.low)},Q.isEven=function(){return 0==(1&this.low)},Q.equals=function(T){return De(T)||(T=V(T)),(this.unsigned===T.unsigned||this.high>>>31!=1||T.high>>>31!=1)&&this.high===T.high&&this.low===T.low},Q.eq=Q.equals,Q.notEquals=function(T){return!this.eq(T)},Q.neq=Q.notEquals,Q.ne=Q.notEquals,Q.lessThan=function(T){return this.comp(T)<0},Q.lt=Q.lessThan,Q.lessThanOrEqual=function(T){return this.comp(T)<=0},Q.lte=Q.lessThanOrEqual,Q.le=Q.lessThanOrEqual,Q.greaterThan=function(T){return this.comp(T)>0},Q.gt=Q.greaterThan,Q.greaterThanOrEqual=function(T){return this.comp(T)>=0},Q.gte=Q.greaterThanOrEqual,Q.ge=Q.greaterThanOrEqual,Q.compare=function(T){if(De(T)||(T=V(T)),this.eq(T))return 0;var fe=this.isNegative(),Oe=T.isNegative();return fe&&!Oe?-1:!fe&&Oe?1:this.unsigned?T.high>>>0>this.high>>>0||T.high===this.high&&T.low>>>0>this.low>>>0?-1:1:this.sub(T).isNegative()?-1:1},Q.comp=Q.compare,Q.negate=function(){return!this.unsigned&&this.eq(qe)?qe:this.not().add(Ot)},Q.neg=Q.negate,Q.add=function(T){De(T)||(T=V(T));var ke=0,Gt=0,Ht=0,an=0;return Ht+=(an+=(65535&this.low)+(65535&T.low))>>>16,Gt+=(Ht+=(this.low>>>16)+(T.low>>>16))>>>16,ke+=(Gt+=(65535&this.high)+(65535&T.high))>>>16,ke+=(this.high>>>16)+(T.high>>>16),_e((Ht&=65535)<<16|(an&=65535),(ke&=65535)<<16|(Gt&=65535),this.unsigned)},Q.subtract=function(T){return De(T)||(T=V(T)),this.add(T.neg())},Q.sub=Q.subtract,Q.multiply=function(T){if(this.isZero())return ut;if(De(T)||(T=V(T)),je)return _e(je.mul(this.low,this.high,T.low,T.high),je.get_high(),this.unsigned);if(T.isZero())return ut;if(this.eq(qe))return T.isOdd()?qe:ut;if(T.eq(qe))return this.isOdd()?qe:ut;if(this.isNegative())return T.isNegative()?this.neg().mul(T.neg()):this.neg().mul(T).neg();if(T.isNegative())return this.mul(T.neg()).neg();if(this.lt(Se)&&T.lt(Se))return Me(this.toNumber()*T.toNumber(),this.unsigned);var S=65535&this.high,Re=this.low>>>16,tt=65535&this.low,Ut=65535&T.high,rn=T.low>>>16,ke=65535&T.low,Gt=0,Ht=0,an=0,Ba=0;return an+=(Ba+=tt*ke)>>>16,Ht+=(an+=Re*ke)>>>16,an&=65535,Ht+=(an+=tt*rn)>>>16,Gt+=(Ht+=S*ke)>>>16,Ht&=65535,Gt+=(Ht+=Re*rn)>>>16,Ht&=65535,Gt+=(Ht+=tt*Ut)>>>16,Gt+=(this.high>>>16)*ke+S*rn+Re*Ut+tt*(T.high>>>16),_e((an&=65535)<<16|(Ba&=65535),(Gt&=65535)<<16|(Ht&=65535),this.unsigned)},Q.mul=Q.multiply,Q.divide=function(T){if(De(T)||(T=V(T)),T.isZero())throw Error("division by zero");var Oe,S,Re;if(je)return this.unsigned||-2147483648!==this.high||-1!==T.low||-1!==T.high?_e((this.unsigned?je.div_u:je.div_s)(this.low,this.high,T.low,T.high),je.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?Jt:ut;if(this.unsigned){if(T.unsigned||(T=T.toUnsigned()),T.gt(this))return Jt;if(T.gt(this.shru(1)))return Bn;Re=Jt}else{if(this.eq(qe))return T.eq(Ot)||T.eq(vt)?qe:T.eq(qe)?Ot:(Oe=this.shr(1).div(T).shl(1)).eq(ut)?T.isNegative()?Ot:vt:(S=this.sub(T.mul(Oe)),Re=Oe.add(S.div(T)));if(T.eq(qe))return this.unsigned?Jt:ut;if(this.isNegative())return T.isNegative()?this.neg().div(T.neg()):this.neg().div(T).neg();if(T.isNegative())return this.div(T.neg()).neg();Re=ut}for(S=this;S.gte(T);){Oe=Math.max(1,Math.floor(S.toNumber()/T.toNumber()));for(var L=Math.ceil(Math.log(Oe)/Math.LN2),Ut=L<=48?1:ze(2,L-48),rn=Me(Oe),ke=rn.mul(T);ke.isNegative()||ke.gt(S);)ke=(rn=Me(Oe-=Ut,this.unsigned)).mul(T);rn.isZero()&&(rn=Ot),Re=Re.add(rn),S=S.sub(ke)}return Re},Q.div=Q.divide,Q.modulo=function(T){return De(T)||(T=V(T)),je?_e((this.unsigned?je.rem_u:je.rem_s)(this.low,this.high,T.low,T.high),je.get_high(),this.unsigned):this.sub(this.div(T).mul(T))},Q.mod=Q.modulo,Q.rem=Q.modulo,Q.not=function(){return _e(~this.low,~this.high,this.unsigned)},Q.and=function(T){return De(T)||(T=V(T)),_e(this.low&T.low,this.high&T.high,this.unsigned)},Q.or=function(T){return De(T)||(T=V(T)),_e(this.low|T.low,this.high|T.high,this.unsigned)},Q.xor=function(T){return De(T)||(T=V(T)),_e(this.low^T.low,this.high^T.high,this.unsigned)},Q.shiftLeft=function(T){return De(T)&&(T=T.toInt()),0==(T&=63)?this:T<32?_e(this.low<<T,this.high<<T|this.low>>>32-T,this.unsigned):_e(0,this.low<<T-32,this.unsigned)},Q.shl=Q.shiftLeft,Q.shiftRight=function(T){return De(T)&&(T=T.toInt()),0==(T&=63)?this:T<32?_e(this.low>>>T|this.high<<32-T,this.high>>T,this.unsigned):_e(this.high>>T-32,this.high>=0?0:-1,this.unsigned)},Q.shr=Q.shiftRight,Q.shiftRightUnsigned=function(T){if(De(T)&&(T=T.toInt()),0==(T&=63))return this;var fe=this.high;return T<32?_e(this.low>>>T|fe<<32-T,fe>>>T,this.unsigned):_e(32===T?fe:fe>>>T-32,0,this.unsigned)},Q.shru=Q.shiftRightUnsigned,Q.shr_u=Q.shiftRightUnsigned,Q.toSigned=function(){return this.unsigned?_e(this.low,this.high,!1):this},Q.toUnsigned=function(){return this.unsigned?this:_e(this.low,this.high,!0)},Q.toBytes=function(T){return T?this.toBytesLE():this.toBytesBE()},Q.toBytesLE=function(){var T=this.high,fe=this.low;return[255&fe,fe>>>8&255,fe>>>16&255,fe>>>24,255&T,T>>>8&255,T>>>16&255,T>>>24]},Q.toBytesBE=function(){var T=this.high,fe=this.low;return[T>>>24,T>>>16&255,T>>>8&255,255&T,fe>>>24,fe>>>16&255,fe>>>8&255,255&fe]},te.fromBytes=function(T,fe,Oe){return Oe?te.fromBytesLE(T,fe):te.fromBytesBE(T,fe)},te.fromBytesLE=function(T,fe){return new te(T[0]|T[1]<<8|T[2]<<16|T[3]<<24,T[4]|T[5]<<8|T[6]<<16|T[7]<<24,fe)},te.fromBytesBE=function(T,fe){return new te(T[4]<<24|T[5]<<16|T[6]<<8|T[7],T[0]<<24|T[1]<<16|T[2]<<8|T[3],fe)}},9128:(Qe,je,te)=>{var De=te(9864),Ft=te(3919),Ae=te(3263),gt=te(5353),Me=te(3358),_e=te(3789),ze=te(2508);ze.alea=De,ze.xor128=Ft,ze.xorwow=Ae,ze.xorshift7=gt,ze.xor4096=Me,ze.tychei=_e,Qe.exports=ze},9864:function(Qe,je,te){var De;!function(Ft,Ae,gt){function Me(V){var re=this,pe=function O(){var V=4022871197;return function(pe){pe=String(pe);for(var Z=0;Z<pe.length;Z++){var ae=.02519603282416938*(V+=pe.charCodeAt(Z));ae-=V=ae>>>0,V=(ae*=V)>>>0,V+=4294967296*(ae-=V)}return 2.3283064365386963e-10*(V>>>0)}}();re.next=function(){var Z=2091639*re.s0+2.3283064365386963e-10*re.c;return re.s0=re.s1,re.s1=re.s2,re.s2=Z-(re.c=0|Z)},re.c=1,re.s0=pe(" "),re.s1=pe(" "),re.s2=pe(" "),re.s0-=pe(V),re.s0<0&&(re.s0+=1),re.s1-=pe(V),re.s1<0&&(re.s1+=1),re.s2-=pe(V),re.s2<0&&(re.s2+=1),pe=null}function _e(V,re){return re.c=V.c,re.s0=V.s0,re.s1=V.s1,re.s2=V.s2,re}function ze(V,re){var pe=new Me(V),Z=re&&re.state,ae=pe.next;return ae.int32=function(){return 4294967296*pe.next()|0},ae.double=function(){return ae()+11102230246251565e-32*(2097152*ae()|0)},ae.quick=ae,Z&&("object"==typeof Z&&_e(Z,pe),ae.state=function(){return _e(pe,{})}),ae}Ae&&Ae.exports?Ae.exports=ze:te.amdD&&te.amdO?void 0!==(De=function(){return ze}.call(je,te,je,Ae))&&(Ae.exports=De):this.alea=ze}(0,Qe=te.nmd(Qe))},3789:function(Qe,je,te){var De;!function(Ft,Ae,gt){function Me(O){var V=this,re="";V.next=function(){var Z=V.b,ae=V.c,ve=V.d,Se=V.a;return Z=Z<<25^Z>>>7^ae,ae=ae-ve|0,ve=ve<<24^ve>>>8^Se,Se=Se-Z|0,V.b=Z=Z<<20^Z>>>12^ae,V.c=ae=ae-ve|0,V.d=ve<<16^ae>>>16^Se,V.a=Se-Z|0},V.a=0,V.b=0,V.c=-1640531527,V.d=1367130551,O===Math.floor(O)?(V.a=O/4294967296|0,V.b=0|O):re+=O;for(var pe=0;pe<re.length+20;pe++)V.b^=0|re.charCodeAt(pe),V.next()}function _e(O,V){return V.a=O.a,V.b=O.b,V.c=O.c,V.d=O.d,V}function ze(O,V){var re=new Me(O),pe=V&&V.state,Z=function(){return(re.next()>>>0)/4294967296};return Z.double=function(){do{var Se=((re.next()>>>11)+(re.next()>>>0)/4294967296)/(1<<21)}while(0===Se);return Se},Z.int32=re.next,Z.quick=Z,pe&&("object"==typeof pe&&_e(pe,re),Z.state=function(){return _e(re,{})}),Z}Ae&&Ae.exports?Ae.exports=ze:te.amdD&&te.amdO?void 0!==(De=function(){return ze}.call(je,te,je,Ae))&&(Ae.exports=De):this.tychei=ze}(0,Qe=te.nmd(Qe))},3919:function(Qe,je,te){var De;!function(Ft,Ae,gt){function Me(O){var V=this,re="";V.x=0,V.y=0,V.z=0,V.w=0,V.next=function(){var Z=V.x^V.x<<11;return V.x=V.y,V.y=V.z,V.z=V.w,V.w^=V.w>>>19^Z^Z>>>8},O===(0|O)?V.x=O:re+=O;for(var pe=0;pe<re.length+64;pe++)V.x^=0|re.charCodeAt(pe),V.next()}function _e(O,V){return V.x=O.x,V.y=O.y,V.z=O.z,V.w=O.w,V}function ze(O,V){var re=new Me(O),pe=V&&V.state,Z=function(){return(re.next()>>>0)/4294967296};return Z.double=function(){do{var Se=((re.next()>>>11)+(re.next()>>>0)/4294967296)/(1<<21)}while(0===Se);return Se},Z.int32=re.next,Z.quick=Z,pe&&("object"==typeof pe&&_e(pe,re),Z.state=function(){return _e(re,{})}),Z}Ae&&Ae.exports?Ae.exports=ze:te.amdD&&te.amdO?void 0!==(De=function(){return ze}.call(je,te,je,Ae))&&(Ae.exports=De):this.xor128=ze}(0,Qe=te.nmd(Qe))},3358:function(Qe,je,te){var De;!function(Ft,Ae,gt){function Me(O){var V=this;V.next=function(){var ve,Se,pe=V.w,Z=V.X,ae=V.i;return V.w=pe=pe+1640531527|0,Se=Z[ae+34&127],ve=Z[ae=ae+1&127],Se^=Se<<13,ve^=ve<<17,Se=Z[ae]=(Se^=Se>>>15)^(ve^=ve>>>12),V.i=ae,Se+(pe^pe>>>16)|0},function re(pe,Z){var ae,ve,Se,ut,Jt,Ot=[],Bn=128;for(Z===(0|Z)?(ve=Z,Z=null):(Z+="\0",ve=0,Bn=Math.max(Bn,Z.length)),Se=0,ut=-32;ut<Bn;++ut)Z&&(ve^=Z.charCodeAt((ut+32)%Z.length)),0===ut&&(Jt=ve),ve^=ve<<10,ve^=ve>>>15,ve^=ve<<4,ve^=ve>>>13,ut>=0&&(Se=0==(ae=Ot[127&ut]^=ve+(Jt=Jt+1640531527|0))?Se+1:0);for(Se>=128&&(Ot[127&(Z&&Z.length||0)]=-1),Se=127,ut=512;ut>0;--ut)ve=Ot[Se+34&127],ae=Ot[Se=Se+1&127],ve^=ve<<13,ae^=ae<<17,Ot[Se]=(ve^=ve>>>15)^(ae^=ae>>>12);pe.w=Jt,pe.X=Ot,pe.i=Se}(V,O)}function _e(O,V){return V.i=O.i,V.w=O.w,V.X=O.X.slice(),V}function ze(O,V){null==O&&(O=+new Date);var re=new Me(O),pe=V&&V.state,Z=function(){return(re.next()>>>0)/4294967296};return Z.double=function(){do{var Se=((re.next()>>>11)+(re.next()>>>0)/4294967296)/(1<<21)}while(0===Se);return Se},Z.int32=re.next,Z.quick=Z,pe&&(pe.X&&_e(pe,re),Z.state=function(){return _e(re,{})}),Z}Ae&&Ae.exports?Ae.exports=ze:te.amdD&&te.amdO?void 0!==(De=function(){return ze}.call(je,te,je,Ae))&&(Ae.exports=De):this.xor4096=ze}(0,Qe=te.nmd(Qe))},5353:function(Qe,je,te){var De;!function(Ft,Ae,gt){function Me(O){var V=this;V.next=function(){var ae,ve,pe=V.x,Z=V.i;return ae=pe[Z],ve=(ae^=ae>>>7)^ae<<24,ve^=(ae=pe[Z+1&7])^ae>>>10,ve^=(ae=pe[Z+3&7])^ae>>>3,ve^=(ae=pe[Z+4&7])^ae<<7,ae=pe[Z+7&7],pe[Z]=ve^=(ae^=ae<<13)^ae<<9,V.i=Z+1&7,ve},function re(pe,Z){var ae,Se=[];if(Z===(0|Z))Se[0]=Z;else for(Z=""+Z,ae=0;ae<Z.length;++ae)Se[7&ae]=Se[7&ae]<<15^Z.charCodeAt(ae)+Se[ae+1&7]<<13;for(;Se.length<8;)Se.push(0);for(ae=0;ae<8&&0===Se[ae];++ae);for(8==ae&&(Se[7]=-1),pe.x=Se,pe.i=0,ae=256;ae>0;--ae)pe.next()}(V,O)}function _e(O,V){return V.x=O.x.slice(),V.i=O.i,V}function ze(O,V){null==O&&(O=+new Date);var re=new Me(O),pe=V&&V.state,Z=function(){return(re.next()>>>0)/4294967296};return Z.double=function(){do{var Se=((re.next()>>>11)+(re.next()>>>0)/4294967296)/(1<<21)}while(0===Se);return Se},Z.int32=re.next,Z.quick=Z,pe&&(pe.x&&_e(pe,re),Z.state=function(){return _e(re,{})}),Z}Ae&&Ae.exports?Ae.exports=ze:te.amdD&&te.amdO?void 0!==(De=function(){return ze}.call(je,te,je,Ae))&&(Ae.exports=De):this.xorshift7=ze}(0,Qe=te.nmd(Qe))},3263:function(Qe,je,te){var De;!function(Ft,Ae,gt){function Me(O){var V=this,re="";V.next=function(){var Z=V.x^V.x>>>2;return V.x=V.y,V.y=V.z,V.z=V.w,V.w=V.v,(V.d=V.d+362437|0)+(V.v=V.v^V.v<<4^Z^Z<<1)|0},V.x=0,V.y=0,V.z=0,V.w=0,V.v=0,O===(0|O)?V.x=O:re+=O;for(var pe=0;pe<re.length+64;pe++)V.x^=0|re.charCodeAt(pe),pe==re.length&&(V.d=V.x<<10^V.x>>>4),V.next()}function _e(O,V){return V.x=O.x,V.y=O.y,V.z=O.z,V.w=O.w,V.v=O.v,V.d=O.d,V}function ze(O,V){var re=new Me(O),pe=V&&V.state,Z=function(){return(re.next()>>>0)/4294967296};return Z.double=function(){do{var Se=((re.next()>>>11)+(re.next()>>>0)/4294967296)/(1<<21)}while(0===Se);return Se},Z.int32=re.next,Z.quick=Z,pe&&("object"==typeof pe&&_e(pe,re),Z.state=function(){return _e(re,{})}),Z}Ae&&Ae.exports?Ae.exports=ze:te.amdD&&te.amdO?void 0!==(De=function(){return ze}.call(je,te,je,Ae))&&(Ae.exports=De):this.xorwow=ze}(0,Qe=te.nmd(Qe))},2508:function(Qe,je,te){var De;!function(Ft,Ae,gt){var ae,Me=256,V=gt.pow(Me,6),re=gt.pow(2,52),pe=2*re,Z=Me-1;function ve(Ke,st,qe){var Q=[],Y=Ot(Jt((st=1==st?{entropy:!0}:st||{}).entropy?[Ke,vt(Ae)]:Ke??function Bn(){try{var Ke;return ae&&(Ke=ae.randomBytes)?Ke=Ke(Me):(Ke=new Uint8Array(Me),(Ft.crypto||Ft.msCrypto).getRandomValues(Ke)),vt(Ke)}catch{var st=Ft.navigator,qe=st&&st.plugins;return[+new Date,Ft,qe,Ft.screen,vt(Ae)]}}(),3),Q),T=new Se(Q),fe=function(){for(var Oe=T.g(6),S=V,Re=0;Oe<re;)Oe=(Oe+Re)*Me,S*=Me,Re=T.g(1);for(;Oe>=pe;)Oe/=2,S/=2,Re>>>=1;return(Oe+Re)/S};return fe.int32=function(){return 0|T.g(4)},fe.quick=function(){return T.g(4)/4294967296},fe.double=fe,Ot(vt(T.S),Ae),(st.pass||qe||function(Oe,S,Re,tt){return tt&&(tt.S&&ut(tt,T),Oe.state=function(){return ut(T,{})}),Re?(gt.random=Oe,S):Oe})(fe,Y,"global"in st?st.global:this==gt,st.state)}function Se(Ke){var st,qe=Ke.length,Q=this,Y=0,T=Q.i=Q.j=0,fe=Q.S=[];for(qe||(Ke=[qe++]);Y<Me;)fe[Y]=Y++;for(Y=0;Y<Me;Y++)fe[Y]=fe[T=Z&T+Ke[Y%qe]+(st=fe[Y])],fe[T]=st;(Q.g=function(Oe){for(var S,Re=0,tt=Q.i,L=Q.j,Ut=Q.S;Oe--;)S=Ut[tt=Z&tt+1],Re=Re*Me+Ut[Z&(Ut[tt]=Ut[L=Z&L+S])+(Ut[L]=S)];return Q.i=tt,Q.j=L,Re})(Me)}function ut(Ke,st){return st.i=Ke.i,st.j=Ke.j,st.S=Ke.S.slice(),st}function Jt(Ke,st){var Y,qe=[],Q=typeof Ke;if(st&&"object"==Q)for(Y in Ke)try{qe.push(Jt(Ke[Y],st-1))}catch{}return qe.length?qe:"string"==Q?Ke:Ke+"\0"}function Ot(Ke,st){for(var Q,qe=Ke+"",Y=0;Y<qe.length;)st[Z&Y]=Z&(Q^=19*st[Z&Y])+qe.charCodeAt(Y++);return vt(st)}function vt(Ke){return String.fromCharCode.apply(0,Ke)}if(Ot(gt.random(),Ae),Qe.exports){Qe.exports=ve;try{ae=te(5042)}catch{}}else void 0!==(De=function(){return ve}.call(je,te,je,Qe))&&(Qe.exports=De)}(typeof self<"u"?self:this,[],Math)},5410:()=>{},8628:()=>{},1601:()=>{},7792:()=>{},4977:()=>{},5042:()=>{}}]);